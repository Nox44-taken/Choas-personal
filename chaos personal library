// Your "Library" tab should look like this
/*
Auto-Cards
Made by LewdLeah on May 21, 2025
This AI Dungeon script automatically creates and updates plot-relevant story cards while you play
General-purpose usefulness and compatibility with other scenarios/scripts were my design priorities
Auto-Cards is fully open-source, please copy for use within your own projects! ❤️
*/
function AutoCards(inHook, inText, inStop) {
    "use strict";
    /*
    Default Auto-Cards settings
    Feel free to change these settings to customize your scenario's default gameplay experience
    The default values for your scenario are specified below:
    */

    // Is Auto-Cards already enabled when the adventure begins?
    const DEFAULT_DO_AC = true
    // (true or false)

    // Pin the "Configure Auto-Cards" story card at the top of the player's story cards list?
    const DEFAULT_PIN_CONFIGURE_CARD = true
    // (true or false)

    // Minimum number of turns in between automatic card generation events?
    const DEFAULT_CARD_CREATION_COOLDOWN = 22
    // (0 to 9999)

    // Use a bulleted list format for newly generated card entries?
    const DEFAULT_USE_BULLETED_LIST_MODE = true
    // (true or false)

    // Maximum allowed length for newly generated story card entries?
    const DEFAULT_GENERATED_ENTRY_LIMIT = 750
    // (200 to 2000)

    // Do newly generated cards have memory updates enabled by default?
    const DEFAULT_NEW_CARDS_DO_MEMORY_UPDATES = true
    // (true or false)

    // Default character limit before the card's memory bank is summarized?
    const DEFAULT_NEW_CARDS_MEMORY_LIMIT = 2750
    // (1750 to 9900)

    // Approximately how much shorter should recently compressed memories be? (ratio = 10 * old / new)
    const DEFAULT_MEMORY_COMPRESSION_RATIO = 25
    // (20 to 1250)

    // Ignore all-caps during title candidate detection?
    const DEFAULT_IGNORE_ALL_CAPS_TITLES = true
    // (true or false)

    // Should player input actions (Do/Say/Story) be considered during title detection?
    const DEFAULT_DETECT_TITLES_FROM_INPUTS = false
    // (true or false)

    // How many (minimum) actions in the past does Auto-Cards look for named entities?
    const DEFAULT_MINIMUM_LOOK_BACK_DISTANCE = 5
    // (2 to 88)

    // Is Live Script Interface v2 enabled?
    const DEFAULT_DO_LSI_V2 = false
    // (true or false)

    // Should the "Debug Data" story card be visible?
    const DEFAULT_SHOW_DEBUG_DATA = false
    // (true or false)

    // AI prompt used to generate new story card entries?
    const DEFAULT_CARD_GENERATION_PROMPT = prose(
        "-----",
        "",
        "<SYSTEM>",
        "# Stop the story and ignore previous instructions. Write a brief and coherent informational entry for %{title} following these instructions:",
        "- Write only third-person pure prose information about %{title} using complete sentences with correct punctuation",
        "- Avoid short-term temporary details or appearances, instead focus on plot-significant information",
        "- Prioritize story-relevant details about %{title} first to ensure seamless integration with the previous plot",
        "- Create new information based on the context and story direction",
        "- Mention %{title} in every sentence",
        "- Use semicolons if needed",
        "- Add additional details about %{title} beneath incomplete entries",
        "- Be concise and grounded",
        "- Imitate the story's writing style and infer the reader's preferences",
        "</SYSTEM>",
        "Continue the entry for %{title} below while avoiding repetition:",
        "%{entry}"
    ); // (mimic this multi-line "text" format)

    // AI prompt used to summarize a given story card's memory bank?
    const DEFAULT_CARD_MEMORY_COMPRESSION_PROMPT = prose(
        "-----",
        "",
        "<SYSTEM>",
        "# Stop the story and ignore previous instructions. Summarize and condense the given paragraph into a narrow and focused memory passage while following these guidelines:",
        "- Ensure the passage retains the core meaning and most essential details",
        "- Use the third-person perspective",
        "- Prioritize information-density, accuracy, and completeness",
        "- Remain brief and concise",
        "- Write firmly in the past tense",
        "- The paragraph below pertains to old events from far earlier in the story",
        "- Integrate %{title} naturally within the memory; however, only write about the events as they occurred",
        "- Only reference information present inside the paragraph itself, be specific",
        "</SYSTEM>",
        "Write a summarized old memory passage for %{title} based only on the following paragraph:",
        "\"\"\"",
        "%{memory}",
        "\"\"\"",
        "Summarize below:"
    ); // (mimic this multi-line "text" format)

    // Titles banned from future card generation attempts?
    const DEFAULT_BANNED_TITLES_LIST = (
        "North, East, South, West, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, January, February, March, April, May, June, July, August, September, October, November, December,  New Story Arc, Story Arc, Generate Story Arc, Redo Story Arc, Him, Her, She, His, Hers, Theirs, Both, Them, They, Ours, Our, We're, They're, And, But, When, Why, Who, What, Us, We, Story Arc Engine, Scales, Set Story Arc Type, Type, New, NEW, Time, TIME, Intensity, Year, Story Arc Settings, Story Arc, Updating Story Arc Next Turn, Charmer, Honorable, Rogue, Dominant, Submissive, Prankster, Curious, Innocent, Mischievous, Affectionate, Defiant, Brave, Clever, Playful, Month, Year, Day, Minute"
    ); // (mimic this comma-list "text" format)

    // Default story card "type" used by Auto-Cards? (does not matter)
    const DEFAULT_CARD_TYPE = "class"
    // ("text")

    // Should titles mentioned in the "opening" plot component be banned from future card generation by default?
    const DEFAULT_BAN_TITLES_FROM_OPENING = true
    // (true or false)

    //—————————————————————————————————————————————————————————————————————————————————

    /*
    Useful API functions for coders (otherwise ignore)
    Here's what each one does in plain terms:

    AutoCards().API.postponeEvents();
    Pauses Auto-Cards activity for n many turns

    AutoCards().API.emergencyHalt();
    Emergency stop or resume

    AutoCards().API.suppressMessages();
    Hides Auto-Cards toasts by preventing assignment to state.message

    AutoCards().API.debugLog();
    Writes to the debug log card

    AutoCards().API.toggle();
    Turns Auto-Cards on/off

    AutoCards().API.generateCard();
    Initiates AI generation of the requested card

    AutoCards().API.redoCard();
    Regenerates an existing card

    AutoCards().API.setCardAsAuto();
    Flags or unflags a card as automatic

    AutoCards().API.addCardMemory();
    Adds a memory to a specific card

    AutoCards().API.eraseAllAutoCards();
    Deletes all auto-cards

    AutoCards().API.getUsedTitles();
    Lists all current card titles

    AutoCards().API.getBannedTitles();
    Shows your current banned titles list

    AutoCards().API.setBannedTitles();
    Replaces the banned titles list with a new list

    AutoCards().API.buildCard();
    Makes a new card from scratch, using exact parameters

    AutoCards().API.getCard();
    Finds cards that match a filter

    AutoCards().API.eraseCard();
    Deletes cards matching a filter
    */

    /*** Postpones internal Auto-Cards events for a specified number of turns
    * 
    * @function
    * @param {number} turns A non-negative integer representing the number of turns to postpone events
    * @returns {Object} An object containing cooldown values affected by the postponement
    * @throws {Error} If turns is not a non-negative integer
    */
    // AutoCards().API.postponeEvents();

    /*** Sets or clears the emergency halt flag to pause Auto-Cards operations
    * 
    * @function
    * @param {boolean} shouldHalt A boolean value indicating whether to engage (true) or disengage (false) emergency halt
    * @returns {boolean} The value that was set
    * @throws {Error} If called from within isolateLSIv2 scope or with a non-boolean argument
    */
    // AutoCards().API.emergencyHalt();

    /*** Enables or disables state.message assignments from Auto-Cards
    * 
    * @function
    * @param {boolean} shouldSuppress If true, suppresses all Auto-Cards messages; false enables them
    * @returns {Array} The current pending messages after setting suppression
    * @throws {Error} If shouldSuppress is not a boolean
    */
    // AutoCards().API.suppressMessages();

    /*** Logs debug information to the "Debug Log card console
    * 
    * @function
    * @param {...any} args Arguments to log for debugging purposes
    * @returns {any} The story card object reference
    */
    // AutoCards().API.debugLog();

    /*** Toggles Auto-Cards behavior or sets it directly
    * 
    * @function
    * @param {boolean|null|undefined} toggleType If undefined, toggles the current state. If boolean or null, sets the state accordingly
    * @returns {boolean|null|undefined} The state that was set or inferred
    * @throws {Error} If toggleType is not a boolean, null, or undefined
    */
    // AutoCards().API.toggle();

    /*** Generates a new card using optional prompt details or a card request object
    * 
    * This function supports two usage modes:
    * 
    * 1. Object Mode:
    *    Pass a single object containing card request parameters. The only mandatory property is "title"
    *    All other properties are optional and customize the card generation
    * 
    *    Example:
    *    AutoCards().API.generateCard({
    *      type: "character",         // The category or type of the card; defaults to "class" if omitted
    *      title: "Leah the Lewd",    // The card's title (required)
    *      keysStart: "Lewd,Leah",    // Optional trigger keywords associated with the card
    *      entryStart: "You are a woman named Leah.", // Existing content to prepend to the AI-generated entry
    *      entryPrompt: "",           // Global prompt guiding AI content generation
    *      entryPromptDetails: "Focus on Leah's works of artifice and ingenuity", // Additional prompt info
    *      entryLimit: 750,           // Target character length for the AI-generated entry
    *      description: "Player character!", // Freeform notes
    *      memoryStart: "Leah purchased a new sweater.", // Existing memory content
    *      memoryUpdates: true,       // Whether the card's memory bank will update on its own
    *      memoryLimit: 2750          // Preferred memory bank size before summarization/compression
    *    });
    * 
    * 2. String Mode:
    *    Pass a string as the title and optionally two additional strings to specify prompt details
    *    This mode is shorthand for quick card generation without an explicit card request object
    * 
    *    Examples:
    *    AutoCards().API.generateCard("Leah the Lewd");
    *    AutoCards().API.generateCard("Leah the Lewd", "Focus on Leah's works of artifice and ingenuity");
    *    AutoCards().API.generateCard(
    *      "Leah the Lewd",
    *      "Focus on Leah's works of artifice and ingenuity",
    *      "You are a woman named Leah."
    *    );
    * 
    * @function
    * @param {Object|string} request Either a fully specified card request object or a string title
    * @param {string} [extra1] Optional detailed prompt text when using string mode
    * @param {string} [extra2] Optional entry start text when using string mode
    * @returns {boolean} Returns true if the generation attempt succeeded, false otherwise
    * @throws {Error} Throws if called with invalid arguments or missing a required title property
    */
    // AutoCards().API.generateCard();

    /*** Regenerates a card by title or object reference, optionally preserving or modifying its input info
    *
    * @function
    * @param {Object|string} request Either a fully specified card request object or a string title for the card to be regenerated
    * @param {boolean} [useOldInfo=true] If true, preserves old info in the new generation; false omits it
    * @param {string} [newInfo=""] Additional info to append to the generation prompt
    * @returns {boolean} True if regeneration succeeded; false otherwise
    * @throws {Error} If the request format is invalid, or if the second or third parameters are the wrong types
    */
    // AutoCards().API.redoCard();

    /*** Flags or unflags a card as an auto-card, controlling its automatic generation behavior
    *
    * @function
    * @param {Object|string} targetCard The card object or title to mark/unmark as an auto-card
    * @param {boolean} [setOrUnset=true] If true, marks the card as an auto-card; false removes the flag
    * @returns {boolean} True if the operation succeeded; false if the card was invalid or already matched the target state
    * @throws {Error} If the arguments are invalid types
    */
    // AutoCards().API.setCardAsAuto();

    /*** Appends a memory to a story card's memory bank
    *
    * @function
    * @param {Object|string} targetCard A card object reference or title string
    * @param {string} newMemory The memory text to add
    * @returns {boolean} True if the memory was added; false if it was empty, already present, or the card was not found
    * @throws {Error} If the inputs are not a string or valid card object reference
    */
    // AutoCards().API.addCardMemory();

    /*** Removes all previously generated auto-cards and resets various states
    *
    * @function
    * @returns {number} The number of cards that were removed
    */
    // AutoCards().API.eraseAllAutoCards();

    /*** Retrieves an array of titles currently used by the adventure's story cards
    *
    * @function
    * @returns {Array<string>} An array of strings representing used titles
    */
    // AutoCards().API.getUsedTitles();

    /*** Retrieves an array of banned titles
    *
    * @function
    * @returns {Array<string>} An array of banned title strings
    */
    // AutoCards().API.getBannedTitles();

    /*** Sets the banned titles array, replacing any previously banned titles
    *
    * @function
    * @param {string|Array<string>} titles A comma-separated string or array of strings representing titles to ban
    * @returns {Object} An object containing oldBans and newBans arrays
    * @throws {Error} If the input is neither a string nor an array of strings
    */
    // AutoCards().API.setBannedTitles();

    /*** Creates a new story card with the specified parameters
    *
    * @function
    * @param {string|Object} title Card title string or full card template object containing all fields
    * @param {string} [entry] The entry text for the card
    * @param {string} [type] The card type (e.g., "character", "location")
    * @param {string} [keys] The keys (triggers) for the card
    * @param {string} [description] The notes or memory bank of the card
    * @param {number} [insertionIndex] Optional index to insert the card at a specific position within storyCards
    * @returns {Object|null} The created card object reference, or null if creation failed
    */
    // AutoCards().API.buildCard();

    /*** Finds and returns story cards satisfying a user-defined condition
    * Example:
    * const leahCard = AutoCards().API.getCard(card => (card.title === "Leah"));
    *
    * @function
    * @param {Function} predicate A function which takes a card and returns true if it matches
    * @param {boolean} [getAll=false] If true, returns all matching cards; otherwise returns the first match
    * @returns {Object|Array<Object>|null} A single card object reference, an array of cards, or null if no match is found
    * @throws {Error} If the predicate is not a function or getAll is not a boolean
    */
    // AutoCards().API.getCard();

    /*** Removes story cards based on a user-defined condition or by direct reference
    * Example:
    * AutoCards().API.eraseCard(card => (card.title === "Leah"));
    *
    * @function
    * @param {Function|Object} predicate A predicate function or a card object reference
    * @param {boolean} [eraseAll=false] If true, removes all matching cards; otherwise removes the first match
    * @returns {boolean|number} True if a single card was removed, false if none matched, or the number of cards erased
    * @throws {Error} If the inputs are not a valid predicate function, card object, or boolean
    */
    // AutoCards().API.eraseCard();

    //—————————————————————————————————————————————————————————————————————————————————

    /*
    To everyone who helped, thank you:

    AHotHamster22
    Most extensive testing, feedback, ideation, and kindness

    BinKompliziert
    UI feedback

    Boo
    Discord communication

    bottledfox
    API ideas for alternative card generation use-cases

    Bruno
    Most extensive testing, feedback, ideation, and kindness
    https://play.aidungeon.com/profile/Azuhre

    Burnout
    Implementation improvements, algorithm ideas, script help, and LSIv2 inspiration

    bweni
    Testing

    DebaczX
    Most extensive testing, feedback, ideation, and kindness

    Dirty Kurtis
    Card entry generation prompt engineering

    Dragranis
    Provided the memory dataset used for boundary calibration

    effortlyss
    Data, testing, in-game command ideas, config settings, and other UX improvements

    Hawk
    Grammar and special-cased proper nouns

    Idle Confusion
    Testing
    https://play.aidungeon.com/profile/Idle%20Confusion

    ImprezA
    Most extensive testing, feedback, ideation, and kindness
    https://play.aidungeon.com/profile/ImprezA

    Kat-Oli
    Title parsing, grammar, and special-cased proper nouns

    KryptykAngel
    LSIv2 ideas
    https://play.aidungeon.com/profile/KryptykAngel

    Mad19pumpkin
    API ideas
    https://play.aidungeon.com/profile/Mad19pumpkin

    Magic
    Implementation and syntax improvements
    https://play.aidungeon.com/profile/MagicOfLolis

    Mirox80
    Testing, feedback, and scenario integration ideas
    https://play.aidungeon.com/profile/Mirox80

    Nathaniel Wyvern
    Testing
    https://play.aidungeon.com/profile/NathanielWyvern

    NobodyIsUgly
    All-caps title parsing feedback

    OnyxFlame
    Card memory bank implementation ideas and special-cased proper nouns

    Purplejump
    API ideas for deep integration with other AID scripts

    Randy Viosca
    Context injection and card memory bank structure
    https://play.aidungeon.com/profile/Random_Variable

    RustyPawz
    API ideas for simplified card interaction
    https://play.aidungeon.com/profile/RustyPawz

    sinner
    Testing

    Sleepy pink
    Testing and feedback
    https://play.aidungeon.com/profile/Pinkghost

    Vutinberg
    Memory compression ideas and prompt engineering

    Wilmar
    Card entry generation and memory summarization prompt engineering

    Yi1i1i
    Idea for the redoCard API function and "/ac redo" in-game command

    A note to future individuals:
    If you fork or modify Auto-Cards... Go ahead and put your name here too! Yay! 🥰
    */

    //—————————————————————————————————————————————————————————————————————————————————

    /*
    The code below implements Auto-Cards
    Enjoy! ❤️
    */

    // My class definitions are hoisted by wrapper functions because it's less ugly (lol)
    const Const = hoistConst();
    const O = hoistO();
    const Words = hoistWords();
    const StringsHashed = hoistStringsHashed();
    const Internal = hoistInternal();
    // AutoCards has an explicitly immutable domain: HOOK, TEXT, and STOP
    const HOOK = inHook;
    const TEXT = ((typeof inText === "string") && inText) || "\n";
    const STOP = (inStop === true);
    // AutoCards returns a pseudoimmutable codomain which is initialized only once before being read and returned
    const CODOMAIN = new Const().declare();
    // Transient sets for high-performance lookup
    const [used, bans, auto, forenames, surnames] = Array.from({length: 5}, () => new Set());
    // Holds a reference to the data card singleton, remains unassigned unless required
    let data = null;
    // Validate globalThis.text
    text = ((typeof text === "string") && text) || "\n";
    // Container for the persistent state of AutoCards
    const AC = (function() {
        if (state.LSIv2) {
            // The Auto-Cards external API is also available from within the inner scope of LSIv2
            // Call with AutoCards().API.nameOfFunction(yourArguments);
            return state.LSIv2;
        } else if (state.AutoCards) {
            // state.AutoCards is prioritized for performance
            const ac = state.AutoCards;
            delete state.AutoCards;
            return ac;
        }
        const dataVariants = getDataVariants();
        data = getSingletonCard(false, O.f({...dataVariants.critical}), O.f({...dataVariants.debug}));
        // Deserialize the state of Auto-Cards from the data card
        const ac = (function() {
            try {
                return JSON.parse(data?.description);
            } catch {
                return null;
            }
        })();
        // If the deserialized state fails to match the following structure, fallback to defaults
        if (validate(ac, O.f({
            config: [
                "doAC", "deleteAllAutoCards", "pinConfigureCard", "addCardCooldown", "bulletedListMode", "defaultEntryLimit", "defaultCardsDoMemoryUpdates", "defaultMemoryLimit", "memoryCompressionRatio", "ignoreAllCapsTitles", "readFromInputs", "minimumLookBackDistance", "LSIv2", "showDebugData", "generationPrompt", "compressionPrompt", "defaultCardType"
            ],
            signal: [
                "emergencyHalt", "forceToggle", "overrideBans", "swapControlCards", "recheckRetryOrErase", "maxChars", "outputReplacement", "upstreamError"
            ],
            generation: [
                "cooldown", "completed", "permitted", "workpiece", "pending"
            ],
            compression: [
                "completed", "titleKey", "vanityTitle", "responseEstimate", "lastConstructIndex", "oldMemoryBank", "newMemoryBank"
            ],
            message: [
                "previous", "suppress", "pending", "event"
            ],
            chronometer: [
                "turn", "step", "amnesia", "postpone"
            ],
            database: {
                titles: [
                    "used", "banned", "candidates", "lastActionParsed", "lastTextHash", "pendingBans", "pendingUnbans"
                ],
                memories: [
                    "associations", "duplicates"
                ]
            }
        }))) {
            // The deserialization was a success
            return ac;
        }
        function validate(obj, finalKeys) {
            if ((typeof obj !== "object") || (obj === null)) {
                return false;
            } else {
                return Object.entries(finalKeys).every(([key, value]) => {
                    if (!(key in obj)) {
                        return false;
                    } else if (Array.isArray(value)) {
                        return value.every(finalKey => {
                            return (finalKey in obj[key]);
                        });
                    } else {
                        return validate(obj[key], value);
                    }
                });
            }
        }
        // AC is malformed, reinitialize with default values
        return {
            // In-game configurable parameters
            config: getDefaultConfig(),
            // Collection of various short-term signals passed forward in time
            signal: {
                // API: Suspend nearly all Auto-Cards processes
                emergencyHalt: false,
                // API: Forcefully toggle Auto-Cards on or off
                forceToggle: null,
                // API: Banned titles were externally overwritten
                overrideBans: 0,
                // Signal the construction of the opposite control card during the upcoming onOutput hook
                swapControlCards: false,
                // Signal a limited recheck of recent title candidates following a retry or erase
                recheckRetryOrErase: false,
                // Signal an upcoming onOutput text replacement
                outputReplacement: "",
                // info.maxChars is only defined onContext but must be accessed during other hooks too
                maxChars: Math.abs(info?.maxChars || 3200),
                // An error occured within the isolateLSIv2 scope during an earlier hook
                upstreamError: ""
            },
            // Moderates the generation of new story card entries
            generation: {
                // Number of story progression turns between card generations
                cooldown: validateCooldown(underQuarterInteger(validateCooldown(DEFAULT_CARD_CREATION_COOLDOWN))),
                // Continues prompted so far
                completed: 0,
                // Upper limit on consecutive continues
                permitted: 34,
                // Properties of the incomplete story card
                workpiece: O.f({}),
                // Pending card generations
                pending: [],
            },
            // Moderates the compression of story card memories
            compression: {
                // Continues prompted so far
                completed: 0,
                // A title header reference key for this auto-card
                titleKey: "",
                // The full and proper title
                vanityTitle: "",
                // Response length estimate used to compute # of outputs remaining
                responseEstimate: 1400,
                // Indices [0, n] of oldMemoryBank memories used to build the current memory construct
                lastConstructIndex: -1,
                // Bank of card memories awaiting compression
                oldMemoryBank: [],
                // Incomplete bank of newly compressed card memories
                newMemoryBank: [],
            },
            // Prevents incompatibility issues borne of state.message modification
            message: {
                // Last turn's state.message
                previous: getStateMessage(),
                // API: Allow Auto-Cards to post messages?
                suppress: false,
                // Pending Auto-Cards message(s)
                pending: (function() {
                    if (DEFAULT_DO_AC !== false) {
                        const startupMessage = "Enabled! You may now edit the \"Configure Auto-Cards\" story card";
                        logEvent(startupMessage);
                        return [startupMessage];
                    } else {
                        return [];
                    }
                })(),
                // Counter to track all Auto-Cards message events
                event: 0
            },
            // Timekeeper used for temporal events
            chronometer: {
                // Previous turn's measurement of info.actionCount
                turn: getTurn(),
                // Whether or not various turn counters should be stepped (falsified by retry actions)
                step: true,
                // Number of consecutive turn interruptions
                amnesia: 0,
                // API: Postpone Auto-Cards externalities for n many turns
                postpone: 0,
            },
            // Scalable atabase to store dynamic game information
            database: {
                // Words are pale shadows of forgotten names. As names have power, words have power
                titles: {
                    // A transient array of known titles parsed from card titles, entry title headers, and trigger keywords
                    used: [],
                    // Titles banned from future card generation attempts and various maintenance procedures
                    banned: getDefaultConfigBans(),
                    // Potential future card titles and their turns of occurrence
                    candidates: [],
                    // Helps avoid rechecking the same action text more than once, generally
                    lastActionParsed: -1,
                    // Ensures weird combinations of retry/erase events remain predictable
                    lastTextHash: "%@%",
                    // Newly banned titles which will be added to the config card
                    pendingBans: [],
                    // Currently banned titles which will be removed from the config card
                    pendingUnbans: []
                },
                // Memories are parsed from context and handled by various operations (basically magic)
                memories: {
                    // Dynamic store of 'story card -> memory' conceptual relations
                    associations: {},
                    // Serialized hashset of the 2000 most recent near-duplicate memories purged from context
                    duplicates: "%@%"
                }
            }
        };
    })();
    O.f(AC);
    O.s(AC.config);
    O.s(AC.signal);
    O.s(AC.generation);
    O.s(AC.generation.workpiece);
    AC.generation.pending.forEach(request => O.s(request));
    O.s(AC.compression);
    O.s(AC.message);
    O.s(AC.chronometer);
    O.f(AC.database);
    O.s(AC.database.titles);
    O.s(AC.database.memories);
    if (!HOOK) {
        globalThis.stop ??= false;
        AC.signal.maxChars = Math.abs(info?.maxChars || AC.signal.maxChars);
        if (HOOK === null) {
            if (/Recent\s*Story\s*:/i.test(text)) {
                // AutoCards(null) is always invoked once after being declared within the shared library
                // Context must be cleaned before passing text to the context modifier
                // This measure is taken to ensure compatability with other scripts
                // First, remove all command, continue, and comfirmation messages from the context window
                text = (text
                    // Hide the guide
                    .replace(/\s*>>>\s*Detailed\s*Guide\s*:[\s\S]*?<<<\s*/gi, "\n\n")
                    // Excise all /AC command messages
                    .replace(/\s*>>>\s*Auto-Cards\s*has\s*been\s*enabled!\s*<<<\s*/gi, " ")
                    .replace(/^.*\/\s*A\s*C.*$/gmi, "%@%")
                    .replace(/\s*%@%\s*/g, " ")
                    // Consolidate all consecutive continue messages into placeholder substrings
                    .replace(/(?:(?:\s*>>>\s*please\s*select\s*"continue"\s*\([\s\S]*?\)\s*<<<\s*)+)/gi, message => {
                        // Replace all continue messages with %@+%-patterned substrings
                        return (
                            // The # of "@" symbols corresponds with the # of consecutive continue messages
                            "%" + "@".repeat(
                                // Count the number of consecutive continue message occurrences
                                (message.match(/>>>\s*please\s*select\s*"continue"\s*\([\s\S]*?\)\s*<<</gi) || []).length
                            ) + "%"
                        );
                    })
                    // Situationally replace all placeholder substrings with either spaces or double newlines
                    .replace(/%@+%/g, (match, matchIndex, intermediateText) => {
                        // Check the case of the next char following the match to decide how to replace it
                        let i = matchIndex + match.length;
                        let nextChar = intermediateText[i];
                        if (nextChar === undefined) {
                            return " ";
                        } else if (/^[A-Z]$/.test(nextChar)) {
                            // Probably denotes a new sentence/paragraph
                            return "\n\n";
                        } else if (/^[a-z]$/.test(nextChar)) {
                            return " ";
                        }
                        // The first nextChar was a weird punctuation char, find the next non-whitespace char
                        do {
                            i++;
                            nextChar = intermediateText[i];
                            if (nextChar === undefined) {
                                return " ";
                            }
                        } while (/\s/.test(nextChar));
                        if (nextChar === nextChar.toUpperCase()) {
                            // Probably denotes a new sentence/paragraph
                            return "\n\n";
                        }
                        // Returning " " probably indicates a previous output's incompleteness
                        return " ";
                    })
                    // Remove all comfirmation requests and responses
                    .replace(/\s*\n*.*CONFIRM\s*DELETE.*\n*\s*/gi, confirmation => {
                        if (confirmation.includes("<<<")) {
                            return " ";
                        } else {
                            return "";
                        }
                    })
                    // Remove dumb memories from the context window
                    // (Latitude, if you're reading this, please give us memoryBank read/write access 😭)
                    .replace(/(Memories\s*:)\s*([\s\S]*?)\s*(Recent\s*Story\s*:|$)/i, (_, left, memories, right) => {
                        return (left + "\n" + (memories
                            .split("\n")
                            .filter(memory => {
                                const lowerMemory = memory.toLowerCase();
                                return !(
                                    (lowerMemory.includes("select") && lowerMemory.includes("continue"))
                                    || lowerMemory.includes(">>>") || lowerMemory.includes("<<<")
                                    || lowerMemory.includes("lsiv2")
                                );
                            })
                            .join("\n")
                        ) + (function() {
                            if (right !== "") {
                                return "\n\n" + right;
                            } else {
                                return "";
                            }
                        })());
                    })
                    // Remove LSIv2 error messages
                    .replace(/(?:\s*>>>[\s\S]*?<<<\s*)+/g, " ")
                );
                if (!shouldProceed()) {
                    // Whenever Auto-Cards is inactive, remove auto card title headers from contextualized story card entries
                    text = (text
                        .replace(/\s*{\s*titles?\s*:[\s\S]*?}\s*/gi, "\n\n")
                        .replace(/World\s*Lore\s*:\s*/i, "World Lore:\n")
                    );
                    // Otherwise, implement a more complex version of this step within the (HOOK === "context") scope of AutoCards
                }
            }
            CODOMAIN.initialize(null);
        } else {
            // AutoCards was (probably) called without arguments, return an external API to allow other script creators to programmatically govern the behavior of Auto-Cards from elsewhere within their own scripts
            CODOMAIN.initialize({API: O.f(Object.fromEntries(Object.entries({
                // Call these API functions like so: AutoCards().API.nameOfFunction(argumentsOfFunction)
                /*** Postpones internal Auto-Cards events for a specified number of turns
                * 
                * @function
                * @param {number} turns A non-negative integer representing the number of turns to postpone events
                * @returns {Object} An object containing cooldown values affected by the postponement
                * @throws {Error} If turns is not a non-negative integer
                */
                postponeEvents: function(turns) {
                    if (Number.isInteger(turns) && (0 <= turns)) {
                        AC.chronometer.postpone = turns;
                    } else {
                        throw new Error(
                            "Invalid argument: \"" + turns + "\" -> AutoCards().API.postponeEvents() must be be called with a non-negative integer"
                        );
                    }
                    return {
                        postponeAllCooldown: turns,
                        addCardRealCooldown: AC.generation.cooldown,
                        addCardNextCooldown: AC.config.addCardCooldown
                    };
                },
                /*** Sets or clears the emergency halt flag to pause Auto-Cards operations
                * 
                * @function
                * @param {boolean} shouldHalt A boolean value indicating whether to engage (true) or disengage (false) emergency halt
                * @returns {boolean} The value that was set
                * @throws {Error} If called from within isolateLSIv2 scope or with a non-boolean argument
                */
                emergencyHalt: function(shouldHalt) {
                    const scopeRestriction = new Error();
                    if (scopeRestriction.stack && scopeRestriction.stack.includes("isolateLSIv2")) {
                        throw new Error(
                            "Scope restriction: AutoCards().API.emergencyHalt() cannot be called from within LSIv2 (prevents deadlock) but you're more than welcome to use AutoCards().API.postponeEvents() instead!"
                        );
                    } else if (typeof shouldHalt === "boolean") {
                        AC.signal.emergencyHalt = shouldHalt;
                    } else {
                        throw new Error(
                            "Invalid argument: \"" + shouldHalt + "\" -> AutoCards().API.emergencyHalt() must be called with a boolean true or false"
                        );
                    }
                    return shouldHalt;
                },
                /*** Enables or disables state.message assignments from Auto-Cards
                * 
                * @function
                * @param {boolean} shouldSuppress If true, suppresses all Auto-Cards messages; false enables them
                * @returns {Array} The current pending messages after setting suppression
                * @throws {Error} If shouldSuppress is not a boolean
                */
                suppressMessages: function(shouldSuppress) {
                    if (typeof shouldSuppress === "boolean") {
                        AC.message.suppress = shouldSuppress;
                    } else {
                        throw new Error(
                            "Invalid argument: \"" + shouldSuppress + "\" -> AutoCards().API.suppressMessages() must be called with a boolean true or false"
                        );
                    }
                    return AC.message.pending;
                },
                /*** Logs debug information to the "Debug Log" console card
                * 
                * @function
                * @param {...any} args Arguments to log for debugging purposes
                * @returns {any} The story card object reference
                */
                debugLog: function(...args) {
                    return Internal.debugLog(...args);
                },
                /*** Toggles Auto-Cards behavior or sets it directly
                * 
                * @function
                * @param {boolean|null|undefined} toggleType If undefined, toggles the current state. If boolean or null, sets the state accordingly
                * @returns {boolean|null|undefined} The state that was set or inferred
                * @throws {Error} If toggleType is not a boolean, null, or undefined
                */
                toggle: function(toggleType) {
                    if (toggleType === undefined) {
                        if (AC.signal.forceToggle !== null) {
                            AC.signal.forceToggle = !AC.signal.forceToggle;
                        } else if (AC.config.doAC) {
                            AC.signal.forceToggle = false;
                        } else {
                            AC.signal.forceToggle = true;
                        }
                    } else if ((toggleType === null) || (typeof toggleType === "boolean")) {
                        AC.signal.forceToggle = toggleType;
                    } else {
                        throw new Error(
                            "Invalid argument: \"" + toggleType + "\" -> AutoCards().API.toggle() must be called with either A) a boolean true or false, B) a null argument, or C) no arguments at all (undefined)"
                        );
                    }
                    return toggleType;
                },
                /*** Generates a new card using optional prompt details or a request object
                * 
                * @function
                * @param {Object|string} request A request object with card parameters or a string representing the title
                * @param {string} [extra1] Optional entryPromptDetails if using string mode
                * @param {string} [extra2] Optional entryStart if using string mode
                * @returns {boolean} Did the generation attempt succeed or fail
                * @throws {Error} If the request is not valid or missing a title
                */
                generateCard: function(request, extra1, extra2) {
                    // Function call guide:
                    // AutoCards().API.generateCard({
                    //     // All properties except 'title' are optional
                    //     type: "card type, defaults to 'class' for ease of filtering",
                    //     title: "card title",
                    //     keysStart: "preexisting card triggers",
                    //     entryStart: "preexisting card entry",
                    //     entryPrompt: "prompt the AI will use to complete this entry",
                    //     entryPromptDetails: "extra details to include with this card's prompt",
                    //     entryLimit: 750, // target character count for the generated entry
                    //     description: "card notes",
                    //     memoryStart: "preexisting card memory",
                    //     memoryUpdates: true, // card updates when new relevant memories are formed
                    //     memoryLimit: 2750, // max characters before the card memory is compressed
                    // });
                    if (typeof request === "string") {
                        request = {title: request};
                        if (typeof extra1 === "string") {
                            request.entryPromptDetails = extra1;
                            if (typeof extra2 === "string") {
                                request.entryStart = extra2;
                            }
                        }
                    } else if (!isTitleInObj(request)) {
                        throw new Error(
                            "Invalid argument: \"" + request + "\" -> AutoCards().API.generateCard() must be called with either 1, 2, or 3 strings OR a correctly formatted card generation object"
                        );
                    }
                    O.f(request);
                    Internal.getUsedTitles(true);
                    return Internal.generateCard(request);
                },
                /*** Regenerates a card by title or object reference, optionally preserving or modifying its input info
                *
                * @function
                * @param {Object|string} request A card object reference or title string for the card to be regenerated
                * @param {boolean} [useOldInfo=true] If true, preserves old info in the new generation; false omits it
                * @param {string} [newInfo=""] Additional info to append to the generation prompt
                * @returns {boolean} True if regeneration succeeded; false otherwise
                * @throws {Error} If the request format is invalid, or if the second or third parameters are the wrong types
                */
                redoCard: function(request, useOldInfo = true, newInfo = "") {
                    if (typeof request === "string") {
                        request = {title: request};
                    } else if (!isTitleInObj(request)) {
                        throw new Error(
                            "Invalid argument: \"" + request + "\" -> AutoCards().API.redoCard() must be called with a string or correctly formatted card generation object"
                        );
                    }
                    if (typeof useOldInfo !== "boolean") {
                        throw new Error(
                            "Invalid argument: \"" + request + ", " + useOldInfo + "\" -> AutoCards().API.redoCard() requires a boolean as its second argument"
                        );
                    } else if (typeof newInfo !== "string") {
                        throw new Error(
                            "Invalid argument: \"" + request + ", " + useOldInfo + ", " + newInfo + "\" -> AutoCards().API.redoCard() requires a string for its third argument"
                        );
                    }
                    return Internal.redoCard(request, useOldInfo, newInfo);
                },
                /*** Flags or unflags a card as an auto-card, controlling its automatic generation behavior
                *
                * @function
                * @param {Object|string} targetCard The card object or title to mark/unmark as an auto-card
                * @param {boolean} [setOrUnset=true] If true, marks the card as an auto-card; false removes the flag
                * @returns {boolean} True if the operation succeeded; false if the card was invalid or already matched the target state
                * @throws {Error} If the arguments are invalid types
                */
                setCardAsAuto: function(targetCard, setOrUnset = true) {
                    if (isTitleInObj(targetCard)) {
                        targetCard = targetCard.title;
                    } else if (typeof targetCard !== "string") {
                        throw new Error(
                            "Invalid argument: \"" + targetCard + "\" -> AutoCards().API.setCardAsAuto() must be called with a string or card object"
                        );
                    }
                    if (typeof setOrUnset !== "boolean") {
                        throw new Error(
                            "Invalid argument: \"" + targetCard + ", " + setOrUnset + "\" -> AutoCards().API.setCardAsAuto() requires a boolean as its second argument"
                        );
                    }
                    const [card, isAuto] = getIntendedCard(targetCard);
                    if (card === null) {
                        return false;
                    }
                    if (setOrUnset) {
                        if (checkAuto()) {
                            return false;
                        }
                        card.description = "{title:}";
                        Internal.getUsedTitles(true);
                        return card.entry.startsWith("{title: ");
                    } else if (!checkAuto()) {
                        return false;
                    }
                    card.entry = removeAutoProps(card.entry);
                    card.description = removeAutoProps(card.description.replace((
                        /\s*Auto(?:-|\s*)Cards\s*will\s*contextualize\s*these\s*memories\s*:\s*/gi
                    ), ""));
                    function checkAuto() {
                        return (isAuto || /{updates: (?:true|false), limit: \d+}/.test(card.description));
                    }
                    return true;
                },
                /*** Appends a memory to a story card's memory bank
                *
                * @function
                * @param {Object|string} targetCard A card object reference or title string
                * @param {string} newMemory The memory text to add
                * @returns {boolean} True if the memory was added; false if it was empty, already present, or the card was not found
                * @throws {Error} If the inputs are not a string or valid card object reference
                */
                addCardMemory: function(targetCard, newMemory) {
                    if (isTitleInObj(targetCard)) {
                        targetCard = targetCard.title;
                    } else if (typeof targetCard !== "string") {
                        throw new Error(
                            "Invalid argument: \"" + targetCard + "\" -> AutoCards().API.addCardMemory() must be called with a string or card object"
                        );
                    }
                    if (typeof newMemory !== "string") {
                        throw new Error(
                            "Invalid argument: \"" + targetCard + ", " + newMemory + "\" -> AutoCards().API.addCardMemory() requires a string for its second argument"
                        );
                    }
                    newMemory = newMemory.trim().replace(/\s+/g, " ").replace(/^-+\s*/, "");
                    if (newMemory === "") {
                        return false;
                    }
                    const [card, isAuto, titleKey] = getIntendedCard(targetCard);
                    if (
                        (card === null)
                        || card.description.replace(/\s+/g, " ").toLowerCase().includes(newMemory.toLowerCase())
                    ) {
                        return false;
                    } else if (card.description !== "") {
                        card.description += "\n";
                    }
                    card.description += "- " + newMemory;
                    if (titleKey in AC.database.memories.associations) {
                        AC.database.memories.associations[titleKey][1] = (StringsHashed
                            .deserialize(AC.database.memories.associations[titleKey][1], 65536)
                            .remove(newMemory)
                            .add(newMemory)
                            .latest(3500)
                            .serialize()
                        );
                    } else if (isAuto) {
                        AC.database.memories.associations[titleKey] = [999, (new StringsHashed(65536)
                            .add(newMemory)
                            .serialize()
                        )];
                    }
                    return true;
                },
                /*** Removes all previously generated auto-cards and resets various states
                *
                * @function
                * @returns {number} The number of cards that were removed
                */
                eraseAllAutoCards: function() {
                    return Internal.eraseAllAutoCards();
                },
                /*** Retrieves an array of titles currently used by the adventure's story cards
                *
                * @function
                * @returns {Array<string>} An array of strings representing used titles
                */
                getUsedTitles: function() {
                    return Internal.getUsedTitles(true);
                },
                /*** Retrieves an array of banned titles
                *
                * @function
                * @returns {Array<string>} An array of banned title strings
                */
                getBannedTitles: function() {
                    return Internal.getBannedTitles();
                },
                /*** Sets the banned titles array, replacing any previously banned titles
                *
                * @function
                * @param {string|Array<string>} titles A comma-separated string or array of strings representing titles to ban
                * @returns {Object} An object containing oldBans and newBans arrays
                * @throws {Error} If the input is neither a string nor an array of strings
                */
                setBannedTitles: function(titles) {
                    const codomain = {oldBans: AC.database.titles.banned};
                    if (Array.isArray(titles) && titles.every(title => (typeof title === "string"))) {
                        assignBannedTitles(titles);
                    } else if (typeof titles === "string") {
                        if (titles.includes(",")) {
                            assignBannedTitles(titles.split(","));
                        } else {
                            assignBannedTitles([titles]);
                        }
                    } else {
                        throw new Error(
                            "Invalid argument: \"" + titles + "\" -> AutoCards().API.setBannedTitles() must be called with either a string or an array of strings"
                        );
                    }
                    codomain.newBans = AC.database.titles.banned;
                    function assignBannedTitles(titles) {
                        Internal.setBannedTitles(uniqueTitlesArray(titles), false);
                        AC.signal.overrideBans = 3;
                        return;
                    }
                    return codomain;
                },
                /*** Creates a new story card with the specified parameters
                *
                * @function
                * @param {string|Object} title Card title string or full card template object containing all fields
                * @param {string} [entry] The entry text for the card
                * @param {string} [type] The card type (e.g., "character", "location")
                * @param {string} [keys] The keys (triggers) for the card
                * @param {string} [description] The notes or memory bank of the card
                * @param {number} [insertionIndex] Optional index to insert the card at a specific position within storyCards
                * @returns {Object|null} The created card object reference, or null if creation failed
                */
                buildCard: function(title, entry, type, keys, description, insertionIndex) {
                    if (isTitleInObj(title)) {
                        type = title.type ?? type;
                        keys = title.keys ?? keys;
                        entry = title.entry ?? entry;
                        description = title.description ?? description;
                        title = title.title;
                    }
                    title = cast(title);
                    const card = constructCard(O.f({
                        type: cast(type, AC.config.defaultCardType),
                        title,
                        keys: cast(keys, buildKeys("", title)),
                        entry: cast(entry),
                        description: cast(description)
                    }), boundInteger(0, insertionIndex, storyCards.length, newCardIndex()));
                    if (notEmptyObj(card)) {
                        return card;
                    }
                    function cast(value, fallback = "") {
                        if (typeof value === "string") {
                            return value;
                        } else {
                            return fallback;
                        }
                    }
                    return null;
                },
                /*** Finds and returns story cards satisfying a user-defined condition
                *
                * @function
                * @param {Function} predicate A function which takes a card and returns true if it matches
                * @param {boolean} [getAll=false] If true, returns all matching cards; otherwise returns the first match
                * @returns {Object|Array<Object>|null} A single card object reference, an array of cards, or null if no match is found
                * @throws {Error} If the predicate is not a function or getAll is not a boolean
                */
                getCard: function(predicate, getAll = false) {
                    if (typeof predicate !== "function") {
                        throw new Error(
                            "Invalid argument: \"" + predicate + "\" -> AutoCards().API.getCard() must be called with a function"
                        );
                    } else if (typeof getAll !== "boolean") {
                        throw new Error(
                            "Invalid argument: \"" + predicate + ", " + getAll + "\" -> AutoCards().API.getCard() requires a boolean as its second argument"
                        );
                    }
                    return Internal.getCard(predicate, getAll);
                },
                /*** Removes story cards based on a user-defined condition or by direct reference
                *
                * @function
                * @param {Function|Object} predicate A predicate function or a card object reference
                * @param {boolean} [eraseAll=false] If true, removes all matching cards; otherwise removes the first match
                * @returns {boolean|number} True if a single card was removed, false if none matched, or the number of cards erased
                * @throws {Error} If the inputs are not a valid predicate function, card object, or boolean
                */
                eraseCard: function(predicate, eraseAll = false) {
                    if (isTitleInObj(predicate) && storyCards.includes(predicate)) {
                        return eraseCard(predicate);
                    } else if (typeof predicate !== "function") {
                        throw new Error(
                            "Invalid argument: \"" + predicate + "\" -> AutoCards().API.eraseCard() must be called with a function or card object"
                        );
                    } else if (typeof eraseAll !== "boolean") {
                        throw new Error(
                            "Invalid argument: \"" + predicate + ", " + eraseAll + "\" -> AutoCards().API.eraseCard() requires a boolean as its second argument"
                        );
                    } else if (eraseAll) {
                        // Erase all cards which satisfy the given condition
                        let cardsErased = 0;
                        for (const [index, card] of storyCards.entries()) {
                            if (predicate(card)) {
                                removeStoryCard(index);
                                cardsErased++;
                            }
                        }
                        return cardsErased;
                    }
                    // Erase the first card which satisfies the given condition
                    for (const [index, card] of storyCards.entries()) {
                        if (predicate(card)) {
                            removeStoryCard(index);
                            return true;
                        }
                    }
                    return false;
                }
            }).map(([key, fn]) => [key, function(...args) {
                const result = fn.apply(this, args);
                if (data) {
                    data.description = JSON.stringify(AC);
                }
                return result;
            }])))});
            function isTitleInObj(obj) {
                return (
                    (typeof obj === "object")
                    && (obj !== null)
                    && ("title" in obj)
                    && (typeof obj.title === "string")
                );
            }
        }
    } else if (AC.signal.emergencyHalt) {
        switch(HOOK) {
        case "context": {
            // AutoCards was called within the context modifier
            advanceChronometer();
            break; }
        case "output": {
            // AutoCards was called within the output modifier
            concludeEmergency();
            const previousAction = readPastAction(0);
            if (isDoSayStory(previousAction.type) && /escape\s*emergency\s*halt/i.test(previousAction.text)) {
                AC.signal.emergencyHalt = false;
            }
            break; }
        }
        CODOMAIN.initialize(TEXT);
    } else if ((AC.config.LSIv2 !== null) && AC.config.LSIv2) {
        // Silly recursion shenanigans
        state.LSIv2 = AC;
        AC.config.LSIv2 = false;
        const LSI_DOMAIN = AutoCards(HOOK, TEXT, STOP);
        // Is this lazy loading mechanism overkill? Yes. But it's fun!
        const factories = O.f({
            library: () => ({
                name: Words.reserved.library,
                entry: prose(
                    "// Your adventure's Shared Library code goes here",
                    "// Example Library code:",
                    "state.promptDragon ??= false;",
                    "state.mind ??= 0;",
                    "state.willStop ??= false;",
                    "function formatMessage(message, space = \" \") {",
                    "    let leadingNewlines = \"\";",
                    "    let trailingNewlines = \"\\n\\n\";",
                    "    if (text.startsWith(\"\\n> \")) {",
                    "        // We don't want any leading/trailing newlines for Do/Say",
                    "        trailingNewlines = \"\";",
                    "    } else if (history && (0 < history.length)) {",
                    "        // Decide leading newlines based on the previous action",
                    "        const action = history[history.length - 1];",
                    "        if ((action.type === \"continue\") || (action.type === \"story\")) {",
                    "            if (!action.text.endsWith(\"\\n\")) {",
                    "                leadingNewlines = \"\\n\\n\";",
                    "            } else if (!action.text.endsWith(\"\\n\\n\")) {",
                    "                leadingNewlines = \"\\n\";",
                    "            }",
                    "        }",
                    "    }",
                    "    return leadingNewlines + \"{>\" + space + (message",
                    "        .replace(/(?:\\s*(?:{>|<})\\s*)+/g, \" \")",
                    "        .trim()",
                    "    ) + space + \"<}\" + trailingNewlines;",
                    "}"),
                description:
                    "// You may also continue your Library code below",
                singleton: false,
                position: 2
            }),
            input: () => ({
                name: Words.reserved.input,
                entry: prose(
                    "// Your adventure's Input Modifier code goes here",
                    "// Example Input code:",
                    "const minds = [",
                    "\"kind and gentle\",",
                    "\"curious and eager\",",
                    "\"cruel and evil\"",
                    "];",
                    "// Type any of these triggers into a Do/Say/Story action",
                    "const commands = new Map([",
                    "[\"encounter dragon\", () => {",
                    "    AutoCards().API.postponeEvents(1);",
                    "    state.promptDragon = true;",
                    "    text = formatMessage(\"You encounter a dragon!\");",
                    "    log(\"A dragon appears!\");",
                    "}],",
                    "[\"summon leah\", () => {",
                    "    alterMind();",
                    "    const success = AutoCards().API.generateCard({",
                    "        title: \"Leah\",",
                    "        entryPromptDetails: (",
                    "            \"Leah is an exceptionally \" +",
                    "            minds[state.mind] +",
                    "            \" woman\"",
                    "        ),",
                    "        entryStart: \"Leah is your magically summoned assistant.\"",
                    "    });",
                    "    if (success) {",
                    "        text = formatMessage(\"You begin summoning Leah!\");",
                    "        log(\"Attempting to summon Leah\");",
                    "    } else {",
                    "        text = formatMessage(\"You failed to summon Leah...\");",
                    "        log(\"Leah could not be summoned\");",
                    "    }",
                    "}],",
                    "[\"alter leah\", () => {",
                    "    alterMind();",
                    "    const success = AutoCards().API.redoCard(\"Leah\", true, (",
                    "        \"You subjected Leah to mind-altering magic\\n\" +",
                    "        \"Therefore she is now entirely \" +",
                    "        minds[state.mind] +",
                    "        \", utterly captivated by your will\"",
                    "    ));",
                    "    if (success) {",
                    "        text = formatMessage(",
                    "            \"You proceed to alter Leah's mind!\"",
                    "        );",
                    "        log(\"Attempting to alter Leah\");",
                    "    } else {",
                    "        text = formatMessage(\"You failed to alter Leah...\");",
                    "        log(\"Leah could not be altered\");",
                    "    }",
                    "}],",
                    "[\"show api\", () => {",
                    "    state.showAPI = true;",
                    "    text = formatMessage(\"Displaying the Auto-Cards API below\");",
                    "}],",
                    "[\"force stop\", () => {",
                    "    state.willStop = true;",
                    "}]",
                    "]);",
                    "const lowerText = text.toLowerCase();",
                    "for (const [trigger, implement] of commands) {",
                    "    if (lowerText.includes(trigger)) {",
                    "        implement();",
                    "        break;",
                    "    }",
                    "}",
                    "function alterMind() {",
                    "    state.mind = (state.mind + 1) % minds.length;",
                    "    return;",
                    "}"),
                description:
                    "// You may also continue your Input code below",
                singleton: false,
                position: 3
            }),
            context: () => ({
                name: Words.reserved.context,
                entry: prose(
                    "// Your adventure's Context Modifier code goes here",
                    "// Example Context code:",
                    "text = text.replace(/\\s*{>[\\s\\S]*?<}\\s*/gi, \"\\n\\n\");",
                    "if (state.willStop) {",
                    "    state.willStop = false;",
                    "    // Assign true to prevent the onOutput hook",
                    "    // This can only be done onContext",
                    "    stop = true;",
                    "} else if (state.promptDragon) {",
                    "    state.promptDragon = false;",
                    "    text = (",
                    "        text.trimEnd() +",
                    "        \"\\n\\nA cute little dragon softly lands upon your head. \"",
                    "    );",
                    "}"),
                description:
                    "// You may also continue your Context code below",
                singleton: false,
                position: 4
            }),
            output: () => ({
                name: Words.reserved.output,
                entry: prose(
                    "// Your adventure's Output Modifier code goes here",
                    "// Example Output code:",
                    "if (state.showAPI) {",
                    "    state.showAPI = false;",
                    "    const apiKeys = (Object.keys(AutoCards().API)",
                    "        .map(key => (\"AutoCards().API.\" + key + \"()\"))",
                    "    );",
                    "    text = formatMessage(apiKeys.join(\"\\n\"), \"\\n\");",
                    "    log(apiKeys);",
                    "}"),
                description:
                    "// You may also continue your Output code below",
                singleton: false,
                position: 5
            }),
            guide: () => ({
                name: Words.reserved.guide,
                entry: prose(
                    "Any valid JavaScript code you write within the Shared Library or Input/Context/Output Modifier story cards will be executed from top to bottom; Live Script Interface v2 closely emulates AI Dungeon's native scripting environment, even if you aren't the owner of the original scenario. Furthermore, I've provided full access to the Auto-Cards scripting API. Please note that disabling LSIv2 via the \"Configure Auto-Cards\" story card will reset your LSIv2 adventure scripts!",
                    "",
                    "If you aren't familiar with scripting in AI Dungeon, please refer to the official guidebook page:",
                    "https://help.aidungeon.com/scripting",
                    "",
                    "I've included an example script with the four aforementioned code cards, to help showcase some of my fancy schmancy Auto-Cards API functions. Take a look, try some of my example commands, inspect the Console Log, and so on... It's a ton of fun! ❤️",
                    "",
                    "If you ever run out of space in your Library, Input, Context, or Output code cards, simply duplicate whichever one(s) you need and then perform an in-game turn before writing any more code. (emphasis on \"before\") Doing so will signal LSIv2 to convert your duplicated code card(s) into additional auxiliary versions.",
                    "",
                    "Auxiliary code cards are numbered, and any code written within will be appended in sequential order. For example:",
                    "// Shared Library (entry)",
                    "// Shared Library (notes)",
                    "// Shared Library 2 (entry)",
                    "// Shared Library 2 (notes)",
                    "// Shared Library 3 (entry)",
                    "// Shared Library 3 (notes)",
                    "// Input Modifier (entry)",
                    "// Input Modifier (notes)",
                    "// Input Modifier 2 (entry)",
                    "// Input Modifier 2 (notes)",
                    "// And so on..."),
                description:
                    "",
                singleton: true,
                position: 0
            }),
            state: () => ({
                name: Words.reserved.state,
                entry:
                    "Your adventure's full state object is displayed in the Notes section below.",
                description:
                    "",
                singleton: true,
                position: 6
            }),
            log: () => ({
                name: Words.reserved.log,
                entry:
                    "Please refer to the Notes section below to view the full log history for LSIv2. Console log entries are ordered from most recent to oldest. LSIv2 error messages will be recorded here, alongside the outputs of log and console.log function calls within your adventure scripts.",
                description:
                    "",
                singleton: true,
                position: 1
            })
        });
        const cache = {};
        const templates = new Proxy({}, {
            get(_, key) {
                return cache[key] ??= O.f(factories[key]());
            }
        });
        if (AC.config.LSIv2 !== null) {
            switch(HOOK) {
            case "input": {
                // AutoCards was called within the input modifier
                const [libraryCards, inputCards, logCard] = collectCards(
                    templates.library,
                    templates.input,
                    templates.log
                );
                const [error, newText] = isolateLSIv2(parseCode(libraryCards, inputCards), callbackLog(logCard), LSI_DOMAIN);
                handleError(logCard, error);
                if (hadError()) {
                    CODOMAIN.initialize(getStoryError());
                    AC.signal.upstreamError = "\n";
                } else {
                    CODOMAIN.initialize(newText);
                }
                break; }
            case "context": {
                // AutoCards was called within the context modifier
                const [libraryCards, contextCards, logCard] = collectCards(
                    templates.library,
                    templates.context,
                    templates.log,
                    templates.input
                );
                if (hadError()) {
                    endContextLSI(LSI_DOMAIN);
                    break;
                }
                const [error, ...newCodomain] = (([error, newText, newStop]) => [error, newText, (newStop === true)])(
                    isolateLSIv2(parseCode(libraryCards, contextCards), callbackLog(logCard), LSI_DOMAIN[0], LSI_DOMAIN[1])
                );
                handleError(logCard, error);
                endContextLSI(newCodomain);
                function endContextLSI(newCodomain) {
                    CODOMAIN.initialize(newCodomain);
                    if (!newCodomain[1]) {
                        return;
                    }
                    const [guideCard, stateCard] = collectCards(
                        templates.guide,
                        templates.state,
                        templates.output
                    );
                    AC.message.pending = [];
                    concludeLSI(guideCard, stateCard, logCard);
                    return;
                }
                break; }
            case "output": {
                // AutoCards was called within the output modifier
                const [libraryCards, outputCards, guideCard, stateCard, logCard] = collectCards(
                    templates.library,
                    templates.output,
                    templates.guide,
                    templates.state,
                    templates.log
                );
                if (hadError()) {
                    endOutputLSI(true, LSI_DOMAIN);
                    break;
                }
                const [error, newText] = isolateLSIv2(parseCode(libraryCards, outputCards), callbackLog(logCard), LSI_DOMAIN);
                handleError(logCard, error);
                endOutputLSI(hadError(), newText);
                function endOutputLSI(displayError, newText) {
                    if (displayError) {
                        if (AC.signal.upstreamError === "\n") {
                            CODOMAIN.initialize("\n");
                        } else {
                            CODOMAIN.initialize(getStoryError() + "\n");
                        }
                        AC.message.pending = [];
                    } else {
                        CODOMAIN.initialize(newText);
                    }
                    concludeLSI(guideCard, stateCard, logCard);
                    return;
                }
                break; }
            case "initialize": {
                collectAll();
                logToCard(Internal.getCard(card => (card.title === templates.log.name)), "LSIv2 startup -> Success!");
                CODOMAIN.initialize(null);
                break; }
            }
            AC.config.LSIv2 = true;
            function parseCode(...args) {
                return (args
                    .flatMap(cardset => [cardset.primary, ...cardset.auxiliaries])
                    .flatMap(card => [card.entry, card.description])
                    .join("\n")
                );
            }
            function callbackLog(logCard) {
                return function(...args) {
                    logToCard(logCard, ...args);
                    return;
                }
            }
            function handleError(logCard, error) {
                if (!error) {
                    return;
                }
                O.f(error);
                AC.signal.upstreamError = (
                    "LSIv2 encountered an error during the on" + HOOK[0].toUpperCase() + HOOK.slice(1) + " hook"
                );
                if (error.message) {
                    AC.signal.upstreamError += ":\n";
                    if (error.stack) {
                        const stackMatch = error.stack.match(/AutoCards[\s\S]*?:\s*(\d+)\s*:\s*(\d+)/i);
                        if (stackMatch) {
                            AC.signal.upstreamError += (
                                (error.name ?? "Error") + ": " + error.message + "\n" +
                                "(line #" + stackMatch[1] + " column #" + stackMatch[2] + ")"
                            );
                        } else {
                            AC.signal.upstreamError += error.stack;
                        }
                    } else {
                        AC.signal.upstreamError += (error.name ?? "Error") + ": " + error.message;
                    }
                    AC.signal.upstreamError = cleanSpaces(AC.signal.upstreamError.trimEnd());
                }
                logToCard(logCard, AC.signal.upstreamError);
                if (getStateMessage() === AC.signal.upstreamError) {
                    state.message = AC.signal.upstreamError + " ";
                } else {
                    state.message = AC.signal.upstreamError;
                }
                return;
            }
            function hadError() {
                return (AC.signal.upstreamError !== "");
            }
            function getStoryError() {
                return getPrecedingNewlines() + ">>>\n" + AC.signal.upstreamError + "\n<<<\n";
            }
            function concludeLSI(guideCard, stateCard, logCard) {
                AC.signal.upstreamError = "";
                guideCard.description = templates.guide.description;
                guideCard.entry = templates.guide.entry;
                stateCard.entry = templates.state.entry;
                logCard.entry = templates.log.entry;
                postMessages();
                const simpleState = {...state};
                delete simpleState.LSIv2;
                stateCard.description = limitString(stringifyObject(simpleState).trim(), 999999).trimEnd();
                return;
            }
        } else {
            const cardsets = collectAll();
            for (const cardset of cardsets) {
                if ("primary" in cardset) {
                    killCard(cardset.primary);
                    for (const card of cardset.auxiliaries) {
                        killCard(card);
                    }
                } else {
                    killCard(cardset);
                }
                function killCard(card) {
                    unbanTitle(card.title);
                    eraseCard(card);
                }
            }
            AC.signal.upstreamError = "";
            CODOMAIN.initialize(LSI_DOMAIN);
        }
        // This measure ensures the Auto-Cards external API is equally available from within the inner scope of LSIv2
        // As before, call with AutoCards().API.nameOfFunction(yourArguments);
        deepMerge(AC, state.LSIv2);
        delete state.LSIv2;
        function deepMerge(target, source) {
            for (const key in source) {
                if (!source.hasOwnProperty(key)) {
                    continue;
                } else if (
                    (typeof source[key] === "object")
                    && (source[key] !== null)
                    && !Array.isArray(source[key])
                    && (typeof target[key] === "object")
                    && (target[key] !== null)
                    && (key !== "workpiece")
                    && (key !== "associations")
                ) {
                    // Recursively merge static objects
                    deepMerge(target[key], source[key]);
                } else {
                    // Directly replace values
                    target[key] = source[key];
                }
            }
            return;
        }
        function collectAll() {
            return collectCards(...Object.keys(factories).map(key => templates[key]));
        }
        // collectCards constructs, validates, repairs, retrieves, and organizes all LSIv2 script cards associated with the given arguments by iterating over the storyCards array only once! Returned elements are easily handled via array destructuring assignment
        function collectCards(...args) {
            // args: [{name: string, entry: string, description: string, singleton: boolean, position: integer}]
            const collections = O.f(args.map(({name, entry, description, singleton, position}) => {
                const collection = {
                    template: O.f({
                        type: AC.config.defaultCardType,
                        title: name,
                        keys: name,
                        entry,
                        description
                    }),
                    singleton,
                    position,
                    primary: null,
                    excess: [],
                };
                if (!singleton) {
                    collection.auxiliaries = [];
                    collection.occupied = new Set([0, 1]);
                }
                return O.s(collection);
            }));
            for (const card of storyCards) {
                O.s(card);
                for (const collection of collections) {
                    if (
                        !card.title.toLowerCase().includes(collection.template.title.toLowerCase())
                        && !card.keys.toLowerCase().includes(collection.template.title.toLowerCase())
                    ) {
                        // No match, swipe left
                        continue;
                    }
                    if (collection.singleton) {
                        setPrimary();
                        break;
                    }
                    const [extensionA, extensionB] = [card.title, card.keys].map(name => {
                        const extensionMatch = name.replace(/[^a-zA-Z0-9]/g, "").match(/\d+$/);
                        if (extensionMatch) {
                            return parseInt(extensionMatch[0], 10);
                        } else {
                            return -1;
                        }
                    });
                    if (-1 < extensionA) {
                        if (-1 < extensionB) {
                            if (collection.occupied.has(extensionA)) {
                                setAuxiliary(extensionB);
                            } else {
                                setAuxiliary(extensionA, true);
                            }
                        } else {
                            setAuxiliary(extensionA);
                        }
                    } else if (-1 < extensionB) {
                        setAuxiliary(extensionB);
                    } else {
                        setPrimary();
                    }
                    function setAuxiliary(extension, preChecked = false) {
                        if (preChecked || !collection.occupied.has(extension)) {
                            addAuxiliary(card, collection, extension);
                        } else {
                            card.title = card.keys = collection.template.title;
                            collection.excess.push(card);
                        }
                        return;
                    }
                    function setPrimary() {
                        card.title = card.keys = collection.template.title;
                        if (collection.primary === null) {
                            collection.primary = card;
                        } else {
                            collection.excess.push(card);
                        }
                        return;
                    }
                    break;
                }
            }
            for (const collection of collections) {
                banTitle(collection.template.title);
                if (collection.singleton) {
                    if (collection.primary === null) {
                        constructPrimary();
                    } else if (hasExs()) {
                        for (const card of collection.excess) {
                            eraseCard(card);
                        }
                    }
                    continue;
                } else if (collection.primary === null) {
                    if (hasExs()) {
                        collection.primary = collection.excess.shift();
                        if (hasExs() || hasAux()) {
                            applyComment(collection.primary);
                        } else {
                            collection.primary.entry = collection.template.entry;
                            collection.primary.description = collection.template.description;
                            continue;
                        }
                    } else {
                        constructPrimary();
                        if (hasAux()) {
                            applyComment(collection.primary);
                        } else {
                            continue;
                        }
                    }
                }
                if (hasExs()) {
                    for (const card of collection.excess) {
                        let extension = 2;
                        while (collection.occupied.has(extension)) {
                            extension++;
                        }
                        applyComment(card);
                        addAuxiliary(card, collection, extension);
                    }
                }
                if (hasAux()) {
                    collection.auxiliaries.sort((a, b) => {
                        return a.extension - b.extension;
                    });
                }
                function hasExs() {
                    return (0 < collection.excess.length);
                }
                function hasAux() {
                    return (0 < collection.auxiliaries.length);
                }
                function applyComment(card) {
                    card.entry = card.description = "// You may continue writing your code here";
                    return;
                }
                function constructPrimary() {
                    collection.primary = constructCard(collection.template, newCardIndex());
                    // I like my LSIv2 cards to display in the proper order once initialized uwu
                    const templateKeys = Object.keys(factories);
                    const cards = templateKeys.map(key => O.f({
                        card: Internal.getCard(card => (card.title === templates[key].name)),
                        position: templates[key].position
                    })).filter(pair => (pair.card !== null));
                    if (cards.length < templateKeys.length) {
                        return;
                    }
                    const fullCardset = cards.sort((a, b) => (a.position - b.position)).map(pair => pair.card);
                    for (const card of fullCardset) {
                        eraseCard(card);
                        card.title = card.keys;
                    }
                    storyCards.splice(newCardIndex(), 0, ...fullCardset);
                    return;
                }
            }
            function addAuxiliary(card, collection, extension) {
                collection.occupied.add(extension);
                card.title = card.keys = collection.template.title + " " + extension;
                collection.auxiliaries.push({card, extension});
                return;
            }
            return O.f(collections.map(({singleton, primary, auxiliaries}) => {
                if (singleton) {
                    return primary;
                } else {
                    return O.f({primary, auxiliaries: O.f(auxiliaries.map(({card}) => card))});
                }
            }));
        }
    } else if (AC.config.doAC) {
        // Auto-Cards is currently enabled
        // "text" represents the original text which was present before any scripts were executed
        // "TEXT" represents the script-modified version of "text" which AutoCards was called with
        // This dual scheme exists to ensure Auto-Cards is safely compatible with other scripts
        switch(HOOK) {
        case "input": {
            // AutoCards was called within the input modifier
            if ((AC.config.deleteAllAutoCards === false) && /CONFIRM\s*DELETE/i.test(TEXT)) {
                CODOMAIN.initialize("CONFIRM DELETE -> Success!");
            } else if (/\/\s*A\s*C/i.test(text)) {
                CODOMAIN.initialize(doPlayerCommands(text));
            } else if (TEXT.startsWith(" ") && readPastAction(0).text.endsWith("\n")) {
                // Just a simple little formatting bugfix for regular AID story actions
                CODOMAIN.initialize(getPrecedingNewlines() + TEXT.replace(/^\s+/, ""));
            } else {
                CODOMAIN.initialize(TEXT);
            }
            break; }
        case "context": {
            // AutoCards was called within the context modifier
            advanceChronometer();
            // Get or construct the "Configure Auto-Cards" story card
            const configureCardTemplate = getConfigureCardTemplate();
            const configureCard = getSingletonCard(true, configureCardTemplate);
            banTitle(configureCardTemplate.title);
            pinAndSortCards(configureCard);
            const bansOverwritten = (0 < AC.signal.overrideBans);
            if ((configureCard.description !== configureCardTemplate.description) || bansOverwritten) {
                const descConfigPatterns = (getConfigureCardDescription()
                    .split(Words.delimiter)
                    .slice(1)
                    .map(descPattern => (descPattern
                        .slice(0, descPattern.indexOf(":"))
                        .trim()
                        .replace(/\s+/g, "\\s*")
                    ))
                    .map(descPattern => (new RegExp("^\\s*" + descPattern + "\\s*:", "i")))
                );
                const descConfigs = configureCard.description.split(Words.delimiter).slice(1);
                if (
                    (descConfigs.length === descConfigPatterns.length)
                    && descConfigs.every((descConfig, index) => descConfigPatterns[index].test(descConfig))
                ) {
                    // All description config headers must be present and well-formed
                    let cfg = extractDescSetting(0);
                    if (AC.config.generationPrompt !== cfg) {
                        notify("Changes to your card generation prompt were successfully saved");
                        AC.config.generationPrompt = cfg;
                    }
                    cfg = extractDescSetting(1);
                    if (AC.config.compressionPrompt !== cfg) {
                        notify("Changes to your card memory compression prompt were successfully saved");
                        AC.config.compressionPrompt = cfg;
                    }
                    if (bansOverwritten) {
                        overrideBans();
                    } else if ((0 < AC.database.titles.pendingBans.length) || (0 < AC.database.titles.pendingUnbans.length)) {
                        const pendingBans = AC.database.titles.pendingBans.map(pair => pair[0]);
                        const pendingRewrites = new Set(
                            lowArr([...pendingBans, ...AC.database.titles.pendingUnbans.map(pair => pair[0])])
                        );
                        Internal.setBannedTitles([...pendingBans, ...extractDescSetting(2)
                            .split(",")
                            .filter(newBan => !pendingRewrites.has(newBan.toLowerCase().replace(/\s+/, " ").trim()))
                        ], true);
                    } else {
                        Internal.setBannedTitles(extractDescSetting(2).split(","), true);
                    }
                    function extractDescSetting(index) {
                        return descConfigs[index].replace(descConfigPatterns[index], "").trim();
                    }
                } else if (bansOverwritten) {
                    overrideBans();
                }
                configureCard.description = getConfigureCardDescription();
                function overrideBans() {
                    Internal.setBannedTitles(AC.database.titles.pendingBans.map(pair => pair[0]), true);
                    AC.signal.overrideBans = 0;
                    return;
                }
            }
            if (configureCard.entry !== configureCardTemplate.entry) {
                const oldConfig = {};
                const settings = O.f((function() {
                    const userSettings = extractSettings(configureCard.entry);
                    if (userSettings.resetallconfigsettingsandprompts !== true) {
                        return userSettings;
                    }
                    // Reset all config settings and display state change notifications only when appropriate
                    Object.assign(oldConfig, AC.config);
                    Object.assign(AC.config, getDefaultConfig());
                    AC.config.deleteAllAutoCards = oldConfig.deleteAllAutoCards;
                    AC.config.LSIv2 = oldConfig.LSIv2;
                    AC.config.defaultCardType = oldConfig.defaultCardType;
                    AC.database.titles.banned = getDefaultConfigBans();
                    configureCard.description = getConfigureCardDescription();
                    configureCard.entry = getConfigureCardEntry();
                    const defaultSettings = extractSettings(configureCard.entry);
                    if ((DEFAULT_DO_AC === false) || (userSettings.disableautocards === true)) {
                        defaultSettings.disableautocards = true;
                    }
                    notify("Restoring all settings and prompts to their default values");
                    return defaultSettings;
                })());
                O.f(oldConfig);
                if ((settings.deleteallautomaticstorycards === true) && (AC.config.deleteAllAutoCards === null)) {
                    AC.config.deleteAllAutoCards = true;
                } else if (settings.showdetailedguide === true) {
                    AC.signal.outputReplacement = Words.guide;
                }
                let cfg;
                if (parseConfig("pinthisconfigcardnearthetop", false, "pinConfigureCard")) {
                    if (cfg) {
                        pinAndSortCards(configureCard);
                        notify("The settings config card will now be pinned near the top of your story cards list");
                    } else {
                        const index = storyCards.indexOf(configureCard);
                        if (index !== -1) {
                            storyCards.splice(index, 1);
                            storyCards.push(configureCard);
                        }
                        notify("The settings config card will no longer be pinned near the top of your story cards list");
                    }
                }
                if (parseConfig("minimumturnscooldownfornewcards", true, "addCardCooldown")) {
                    const oldCooldown = AC.config.addCardCooldown;
                    AC.config.addCardCooldown = validateCooldown(cfg);
                    if (!isPendingGeneration() && !isAwaitingGeneration() && (0 < AC.generation.cooldown)) {
                        const quarterCooldown = validateCooldown(underQuarterInteger(AC.config.addCardCooldown));
                        if ((AC.config.addCardCooldown < oldCooldown) && (quarterCooldown < AC.generation.cooldown)) {
                            // Reduce the next generation's cooldown counter by a factor of 4
                            // But only if the new cooldown config is lower than it was before
                            // And also only if quarter cooldown is less than the current next gen cooldown
                            // (Just a random little user experience improvement)
                            AC.generation.cooldown = quarterCooldown;
                        } else if (oldCooldown < AC.config.addCardCooldown) {
                            if (oldCooldown === AC.generation.cooldown) {
                                AC.generation.cooldown = AC.config.addCardCooldown;
                            } else {
                                AC.generation.cooldown = validateCooldown(boundInteger(
                                    0,
                                    AC.generation.cooldown + quarterCooldown,
                                    AC.config.addCardCooldown
                                ));
                            }
                        }
                    }
                    switch(AC.config.addCardCooldown) {
                    case 9999: {
                        notify(
                            "You have disabled automatic card generation. To re-enable, simply set your cooldown config to any number lower than 9999. Or use the \"/ac\" in-game command to manually direct the card generation process"
                        );
                        break; }
                    case 1: {
                        notify(
                            "A new card will be generated during alternating game turns, but only if your story contains available titles"
                        );
                        break; }
                    case 0: {
                        notify(
                            "New cards will be immediately generated whenever valid titles exist within your recent story"
                        );
                        break; }
                    default: {
                        notify(
                            "A new card will be generated once every " + AC.config.addCardCooldown + " turns, but only if your story contains available titles"
                        );
                        break; }
                    }
                }
                if (parseConfig("newcardsuseabulletedlistformat", false, "bulletedListMode")) {
                    if (cfg) {
                        notify("New card entries will be generated using a bulleted list format");
                    } else {
                        notify("New card entries will be generated using a pure prose format");
                    }
                }
                if (parseConfig("maximumentrylengthfornewcards", true, "defaultEntryLimit")) {
                    AC.config.defaultEntryLimit = validateEntryLimit(cfg);
                    notify(
                        "New card entries will be limited to " + AC.config.defaultEntryLimit + " characters of generated text"
                    );
                }
                if (parseConfig("newcardsperformmemoryupdates", false, "defaultCardsDoMemoryUpdates")) {
                    if (cfg) {
                        notify("Newly constructed cards will begin with memory updates enabled by default");
                    } else {
                        notify("Newly constructed cards will begin with memory updates disabled by default");
                    }
                }
                if (parseConfig("cardmemorybankpreferredlength", true, "defaultMemoryLimit")) {
                    AC.config.defaultMemoryLimit = validateMemoryLimit(cfg);
                    notify(
                        "Newly constructed cards will begin with their memory bank length preference set to " + AC.config.defaultMemoryLimit + " characters of text"
                    );
                }
                if (parseConfig("memorysummarycompressionratio", true, "memoryCompressionRatio")) {
                    AC.config.memoryCompressionRatio = validateMemCompRatio(cfg);
                    notify(
                        "Freshly summarized card memory banks will be approximately " + (AC.config.memoryCompressionRatio / 10) + "x shorter than their originals"
                    );
                }
                if (parseConfig("excludeallcapsfromtitledetection", false, "ignoreAllCapsTitles")) {
                    if (cfg) {
                        notify("All-caps text will be ignored during title detection to help prevent bad cards");
                    } else {
                        notify("All-caps text may be considered during title detection processes");
                    }
                }
                if (parseConfig("alsodetecttitlesfromplayerinputs", false, "readFromInputs")) {
                    if (cfg) {
                        notify("Titles may be detected from player Do/Say/Story action inputs");
                    } else {
                        notify("Title detection will skip player Do/Say/Story action inputs for grammatical leniency");
                    }
                }
                if (parseConfig("minimumturnsagefortitledetection", true, "minimumLookBackDistance")) {
                    AC.config.minimumLookBackDistance = validateMinLookBackDist(cfg);
                    notify(
                        "Titles and names mentioned in your story may become eligible for future card generation attempts once they are at least " + AC.config.minimumLookBackDistance + " actions old"
                    );
                }
                cfg = settings.uselivescriptinterfacev2;
                if (typeof cfg === "boolean") {
                    if (AC.config.LSIv2 === null) {
                        if (cfg) {
                            AC.config.LSIv2 = true;
                            state.LSIv2 = AC;
                            AutoCards("initialize");
                            notify("Live Script Interface v2 is now embedded within your adventure!");
                        }
                    } else {
                        if (!cfg) {
                            AC.config.LSIv2 = null;
                            notify("Live Script Interface v2 has been removed from your adventure");
                        }
                    }
                }
                if (parseConfig("logdebugdatainaseparatecard" , false, "showDebugData")) {
                    if (data === null) {
                        if (cfg) {
                            notify("State may now be viewed within the \"Debug Data\" story card");
                        } else {
                            notify("The \"Debug Data\" story card has been removed");
                        }
                    } else if (cfg) {
                        notify("Debug data will be shared with the \"Critical Data\" story card to conserve memory");
                    } else {
                        notify("Debug mode has been disabled");
                    }
                }
                if ((settings.disableautocards === true) && (AC.signal.forceToggle !== true)) {
                    disableAutoCards();
                    break;
                } else {
                    // Apply the new card entry and proceed to implement Auto-Cards onContext
                    configureCard.entry = getConfigureCardEntry();
                }
                function parseConfig(settingsKey, isNumber, configKey) {
                    cfg = settings[settingsKey];
                    if (isNumber) {
                        return checkConfig("number");
                    } else if (!checkConfig("boolean")) {
                        return false;
                    }
                    AC.config[configKey] = cfg;
                    function checkConfig(type) {
                        return ((typeof cfg === type) && (
                            (notEmptyObj(oldConfig) && (oldConfig[configKey] !== cfg))
                            || (AC.config[configKey] !== cfg)
                        ));
                    }
                    return true;
                }
            }
            if (AC.signal.forceToggle === false) {
                disableAutoCards();
                break;
            }
            AC.signal.forceToggle = null;
            if (0 < AC.chronometer.postpone) {
                CODOMAIN.initialize(TEXT);
                break;
            }
            // Fully implement Auto-Cards onContext
            const forceStep = AC.signal.recheckRetryOrErase;
            const currentTurn = getTurn();
            const nearestUnparsedAction = boundInteger(0, currentTurn - AC.config.minimumLookBackDistance);
            if (AC.signal.recheckRetryOrErase || (nearestUnparsedAction <= AC.database.titles.lastActionParsed)) {
                // The player erased or retried an unknown number of actions
                // Purge recent candidates and perform a safety recheck
                if (nearestUnparsedAction <= AC.database.titles.lastActionParsed) {
                    AC.signal.recheckRetryOrErase = true;
                } else {
                    AC.signal.recheckRetryOrErase = false;
                }
                AC.database.titles.lastActionParsed = boundInteger(-1, nearestUnparsedAction - 8);
                for (let i = AC.database.titles.candidates.length - 1; 0 <= i; i--) {
                    const candidate = AC.database.titles.candidates[i];
                    for (let j = candidate.length - 1; 0 < j; j--) {
                        if (AC.database.titles.lastActionParsed < candidate[j]) {
                            candidate.splice(j, 1);
                        }
                    }
                    if (candidate.length <= 1) {
                        AC.database.titles.candidates.splice(i, 1);
                    }
                }
            }
            const pendingCandidates = new Map();
            if ((0 < nearestUnparsedAction) && (AC.database.titles.lastActionParsed < nearestUnparsedAction)) {
                const actions = [];
                for (
                    let actionToParse = AC.database.titles.lastActionParsed + 1;
                    actionToParse <= nearestUnparsedAction;
                    actionToParse++
                ) {
                    // I wrote this whilst sleep-deprived, somehow it works
                    const lookBack = currentTurn - actionToParse - (function() {
                        if (isDoSayStory(readPastAction(0).type)) {
                            // Inputs count as 2 actions instead of 1, conditionally offset lookBack by 1
                            return 0;
                        } else {
                            return 1;
                        }
                    })();
                    if (history.length <= lookBack) {
                        // history cannot be indexed with a negative integer
                        continue;
                    }
                    const action = readPastAction(lookBack);
                    const thisTextHash = new StringsHashed(4096).add(action.text).serialize();
                    if (actionToParse === nearestUnparsedAction) {
                        if (AC.signal.recheckRetryOrErase || (thisTextHash === AC.database.titles.lastTextHash)) {
                            // Additional safety to minimize duplicate candidate additions during retries or erases
                            AC.signal.recheckRetryOrErase = true;
                            break;
                        } else {
                            // Action parsing will proceed
                            AC.database.titles.lastActionParsed = nearestUnparsedAction;
                            AC.database.titles.lastTextHash = thisTextHash;
                        }
                    } else if (
                        // Special case where a consecutive retry>erase>continue cancels out
                        AC.signal.recheckRetryOrErase
                        && (actionToParse === (nearestUnparsedAction - 1))
                        && (thisTextHash === AC.database.titles.lastTextHash)
                    ) {
                        AC.signal.recheckRetryOrErase = false;
                    }
                    actions.push([action, actionToParse]);
                }
                if (!AC.signal.recheckRetryOrErase) {
                    for (const [action, turn] of actions) {
                        if (
                            (action.type === "see")
                            || (action.type === "unknown")
                            || (!AC.config.readFromInputs && isDoSayStory(action.type))
                            || /^[^\p{Lu}]*$/u.test(action.text)
                            || action.text.includes("<<<")
                            || /\/\s*A\s*C/i.test(action.text)
                            || /CONFIRM\s*DELETE/i.test(action.text)
                        ) {
                            // Skip see actions
                            // Skip input actions (only if input title detection has been disabled in the config)
                            // Skip strings without capital letters
                            // Skip utility actions
                            continue;
                        }
                        const words = (prettifyEmDashes(action.text)
                            // Nuh uh
                            .replace(/[“”]/g, "\"").replace(/[‘’]/g, "'").replaceAll("´", "`")
                            .replaceAll("。", ".").replaceAll("？", "?").replaceAll("！", "!")
                            // Replace special clause opening punctuation with colon ":" terminators
                            .replace(/(^|\s+)["'`]\s*/g, ": ").replace(/\s*[\(\[{]\s*/g, ": ")
                            // Likewise for end-quotes (curbs a common AI grammar mistake)
                            .replace(/\s*,?\s*["'`](?:\s+|$)/g, ": ")
                            // Replace funky wunky symbols with regular spaces
                            .replace(/[؟،«»¿¡„“…§，、\*_~><\)\]}#"`\s]/g, " ")
                            // Replace some mid-sentence punctuation symbols with a placeholder word
                            .replace(/\s*[—;,\/\\]\s*/g, " %@% ")
                            // Replace "I", "I'm", "I'd", "I'll", and "I've" with a placeholder word
                            .replace(/(?:^|\s+|-)I(?:'(?:m|d|ll|ve))?(?:\s+|-|$)/gi, " %@% ")
                            // Remove "'s" only if not followed by a letter
                            .replace(/'s(?![a-zA-Z])/g, "")
                            // Replace "s'" with "s" only if preceded but not followed by a letter
                            .replace(/(?<=[a-zA-Z])s'(?![a-zA-Z])/g, "s")
                            // Remove apostrophes not between letters (preserve contractions like "don't")
                            .replace(/(?<![a-zA-Z])'(?![a-zA-Z])/g, "")
                            // Remove a leading bullet
                            .replace(/^\s*-+\s*/, "")
                            // Replace common honorifics with a placeholder word
                            .replace(buildKiller(Words.honorifics), " %@% ")
                            // Remove common abbreviations
                            .replace(buildKiller(Words.abbreviations), " ")
                            // Fix end punctuation
                            .replace(/\s+\.(?![a-zA-Z])/g, ".").replace(/\.\.+/g, ".")
                            .replace(/\s+\?(?![a-zA-Z])/g, "?").replace(/\?\?+/g, "?")
                            .replace(/\s+!(?![a-zA-Z])/g, "!").replace(/!!+/g, "!")
                            .replace(/\s+:(?![a-zA-Z])/g, ":").replace(/::+/g, ":")
                            // Colons are treated as substitute end-punctuation, apply the capitalization rule
                            .replace(/:\s+(\S)/g, (_, next) => ": " + next.toUpperCase())
                            // Condense consecutive whitespace
                            .trim().replace(/\s+/g, " ")
                        ).split(" ");
                        if (!Array.isArray(words) || (words.length < 2)) {
                            continue;
                        }
                        const titles = [];
                        const incompleteTitle = [];
                        let previousWordTerminates = true;
                        for (let i = 0; i < words.length; i++) {
                            let word = words[i];
                            if (startsWithTerminator()) {
                                // This word begins on a terminator, push the preexisting incomplete title to titles and proceed with the next sentence's beginning
                                pushTitle();
                                previousWordTerminates = true;
                                // Ensure no leading terminators remain
                                while ((word !== "") && startsWithTerminator()) {
                                    word = word.slice(1);
                                }
                            }
                            if (word === "") {
                                continue;
                            } else if (previousWordTerminates) {
                                // We cannot detect titles from sentence beginnings due to sentence capitalization rules. The previous sentence was recently terminated, implying the current series of capitalized words (plus lowercase minor words) occurs near the beginning of the current sentence
                                if (endsWithTerminator()) {
                                    continue;
                                } else if (startsWithUpperCase()) {
                                    if (isMinorWord(word)) {
                                        // Special case where a capitalized minor word precedes a named entity, clear the previous termination status
                                        previousWordTerminates = false;
                                    }
                                    // Otherwise, proceed without clearing
                                } else if (!isMinorWord(word) && !/^(?:and|&)(?:$|[\.\?!:]$)/.test(word)) {
                                    // Previous sentence termination status is cleared by the first new non-minor lowercase word encountered during forward iteration through the action text's words
                                    previousWordTerminates = false;
                                }
                                continue;
                            }
                            // Words near the beginning of this sentence have been skipped, proceed with named entity detection using capitalization rules. An incomplete title will be pushed to titles if A) a non-minor lowercase word is encountered, B) three consecutive minor words occur in a row, C) a terminator symbol is encountered at the end of a word. Otherwise, continue pushing words to the incomplete title
                            if (endsWithTerminator()) {
                                previousWordTerminates = true;
                                while ((word !== "") && endsWithTerminator()) {
                                    word = word.slice(0, -1);
                                }
                                if (word === "") {
                                    pushTitle();
                                    continue;
                                }
                            }
                            if (isMinorWord(word)) {
                                if (0 < incompleteTitle.length) {
                                    // Titles cannot start with a minor word
                                    if (
                                        (2 < incompleteTitle.length) && !(isMinorWord(incompleteTitle[incompleteTitle.length - 1]) && isMinorWord(incompleteTitle[incompleteTitle.length - 2]))
                                    ) {
                                        // Titles cannot have 3 or more consecutive minor words in a row
                                        pushTitle();
                                        continue;
                                    } else {
                                        // Titles may contain minor words in their middles. Ex: "Ace of Spades"
                                        incompleteTitle.push(word.toLowerCase());
                                    }
                                }
                            } else if (startsWithUpperCase()) {
                                // Add this proper noun to the incomplete title
                                incompleteTitle.push(word);
                            } else {
                                // The full title has a non-minor lowercase word to its immediate right
                                pushTitle();
                                continue;
                            }
                            if (previousWordTerminates) {
                                pushTitle();
                            }
                            function pushTitle() {
                                while (
                                    (1 < incompleteTitle.length)
                                    && isMinorWord(incompleteTitle[incompleteTitle.length - 1])
                                ) {
                                    incompleteTitle.pop();
                                }
                                if (0 < incompleteTitle.length) {
                                    titles.push(incompleteTitle.join(" "));
                                    // Empty the array
                                    incompleteTitle.length = 0;
                                }
                                return;
                            }
                            function isMinorWord(testWord) {
                                return Words.minor.includes(testWord.toLowerCase());
                            }
                            function startsWithUpperCase() {
                                return /^\p{Lu}/u.test(word);
                            }
                            function startsWithTerminator() {
                                return /^[\.\?!:]/.test(word);
                            }
                            function endsWithTerminator() {
                                return /[\.\?!:]$/.test(word);
                            }
                        }
                        for (let i = titles.length - 1; 0 <= i; i--) {
                            titles[i] = formatTitle(titles[i]).newTitle;
                            if (titles[i] === "" || (
                                AC.config.ignoreAllCapsTitles
                                && (2 < titles[i].replace(/[^a-zA-Z]/g, "").length)
                                && (titles[i] === titles[i].toUpperCase())
                            )) {
                                titles.splice(i, 1);
                            }
                        }
                        // Remove duplicates
                        const uniqueTitles = [...new Set(titles)];
                        if (uniqueTitles.length === 0) {
                            continue;
                        } else if (
                            // No reason to keep checking long past the max lookback distance
                            (currentTurn < 256)
                            && (action.type === "start")
                            // This is only used here so it doesn't need its own AC.config property or validation
                            && (DEFAULT_BAN_TITLES_FROM_OPENING !== false)
                        ) {
                            // Titles in the opening prompt are banned by default, hopefully accounting for the player character's name and other established setting details
                            uniqueTitles.forEach(title => banTitle(title));
                        } else {
                            // Schedule new titles for later insertion within the candidates database
                            for (const title of uniqueTitles) {
                                const pendingHashKey = title.toLowerCase();
                                if (pendingCandidates.has(pendingHashKey)) {
                                    // Consolidate pending candidates with matching titles but different turns
                                    pendingCandidates.get(pendingHashKey).turns.push(turn);
                                } else {
                                    pendingCandidates.set(pendingHashKey, O.s({title, turns: [turn]}));
                                }
                            }
                        }
                        function buildKiller(words) {
                            return (new RegExp(("(?:^|\\s+|-)(?:" + (words
                                .map(word => word.replace(".", "\\."))
                                .join("|")
                            ) + ")(?:\\s+|-|$)"), "gi"));
                        }
                    }
                }
            }
            // Measure the minimum and maximum turns of occurance for all title candidates
            let minTurn = currentTurn;
            let maxTurn = 0;
            for (let i = AC.database.titles.candidates.length - 1; 0 <= i; i--) {
                const candidate = AC.database.titles.candidates[i];
                const title = candidate[0];
                if (isUsedOrBanned(title) || isNamed(title)) {
                    // Retroactively ensure AC.database.titles.candidates contains no used / banned titles
                    AC.database.titles.candidates.splice(i, 1);
                } else {
                    const pendingHashKey = title.toLowerCase();
                    if (pendingCandidates.has(pendingHashKey)) {
                        // This candidate title matches one of the pending candidates, collect the pending turns
                        candidate.push(...pendingCandidates.get(pendingHashKey).turns);
                        // Remove this pending candidate
                        pendingCandidates.delete(pendingHashKey);
                    }
                    if (2 < candidate.length) {
                        // Ensure all recorded turns of occurance are unique for this candidate
                        // Sort the turns from least to greatest
                        const sortedTurns = [...new Set(candidate.slice(1))].sort((a, b) => (a - b));
                        if (625 < sortedTurns.length) {
                            sortedTurns.splice(0, sortedTurns.length - 600);
                        }
                        candidate.length = 1;
                        candidate.push(...sortedTurns);
                    }
                    setCandidateTurnBounds(candidate);
                }
            }
            for (const pendingCandidate of pendingCandidates.values()) {
                // Insert any remaining pending candidates (validity has already been ensured)
                const newCandidate = [pendingCandidate.title, ...pendingCandidate.turns];
                setCandidateTurnBounds(newCandidate);
                AC.database.titles.candidates.push(newCandidate);
            }
            const isCandidatesSorted = (function() {
                if (425 < AC.database.titles.candidates.length) {
                    // Sorting a large title candidates database is computationally expensive
                    sortCandidates();
                    AC.database.titles.candidates.splice(400);
                    // Flag this operation as complete for later consideration
                    return true;
                } else {
                    return false;
                }
            })();
            Internal.getUsedTitles();
            for (const titleKey in AC.database.memories.associations) {
                if (isAuto(titleKey)) {
                    // Reset the lifespan counter
                    AC.database.memories.associations[titleKey][0] = 999;
                } else if (AC.database.memories.associations[titleKey][0] < 1) {
                    // Forget this set of memory associations
                    delete AC.database.memories.associations[titleKey];
                } else if (!isAwaitingGeneration()) {
                    // Decrement the lifespan counter
                    AC.database.memories.associations[titleKey][0]--;
                }
            }
            // This copy of TEXT may be mutated
            let context = TEXT;
            const titleHeaderPatternGlobal = /\s*{\s*titles?\s*:\s*([\s\S]*?)\s*}\s*/gi;
            // Card events govern the parsing of memories from raw context as well as card memory bank injection
            const cardEvents = (function() {
                // Extract memories from the initial text (not TEXT as called from within the context modifier!)
                const contextMemories = (function() {
                    const memoriesMatch = text.match(/Memories\s*:\s*([\s\S]*?)\s*(?:Recent\s*Story\s*:|$)/i);
                    if (!memoriesMatch) {
                        return new Set();
                    }
                    const uniqueMemories = new Set(isolateMemories(memoriesMatch[1]));
                    if (uniqueMemories.size === 0) {
                        return uniqueMemories;
                    }
                    const duplicatesHashed = StringsHashed.deserialize(AC.database.memories.duplicates, 65536);
                    const duplicateMemories = new Set();
                    const seenMemories = new Set();
                    for (const memoryA of uniqueMemories) {
                        if (duplicatesHashed.has(memoryA)) {
                            // Remove to ensure the insertion order for this duplicate changes
                            duplicatesHashed.remove(memoryA);
                            duplicateMemories.add(memoryA);
                        } else if ((function() {
                            for (const memoryB of seenMemories) {
                                if (0.42 < similarityScore(memoryA, memoryB)) {
                                    // This memory is too similar to another memory
                                    duplicateMemories.add(memoryA);
                                    return false;
                                }
                            }
                            return true;
                        })()) {
                            seenMemories.add(memoryA);
                        }
                    }
                    if (0 < duplicateMemories.size) {
                        // Add each near duplicate's hashcode to AC.database.memories.duplicates
                        // Then remove duplicates from uniqueMemories and the context window
                        for (const duplicate of duplicateMemories) {
                            duplicatesHashed.add(duplicate);
                            uniqueMemories.delete(duplicate);
                            context = context.replaceAll("\n" + duplicate, "");
                        }
                        // Only the 2000 most recent duplicate memory hashcodes are remembered
                        AC.database.memories.duplicates = duplicatesHashed.latest(2000).serialize();
                    }
                    return uniqueMemories;
                })();
                const leftBoundary = "^|\\s|\"|'|—|\\(|\\[|{";
                const rightBoundary = "\\s|\\.|\\?|!|,|;|\"|'|—|\\)|\\]|}|$";
                // Murder, homicide if you will, nothing to see here
                const theKiller = new RegExp("(?:" + leftBoundary + ")the[\\s\\S]*$", "i");
                const peerageKiller = new RegExp((
                    "(?:" + leftBoundary + ")(?:" + Words.peerage.join("|") + ")(?:" + rightBoundary + ")"
                ), "gi");
                const events = new Map();
                for (const contextMemory of contextMemories) {
                    for (const titleKey of auto) {
                        if (!(new RegExp((
                            "(?<=" + leftBoundary + ")" + (titleKey
                                .replace(theKiller, "")
                                .replace(peerageKiller, "")
                                .replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
                            ) + "(?=" + rightBoundary + ")"
                        ), "i")).test(contextMemory)) {
                            continue;
                        }
                        // AC card titles found in active memories will promote card events
                        if (events.has(titleKey)) {
                            events.get(titleKey).pendingMemories.push(contextMemory);
                            continue;
                        }
                        events.set(titleKey, O.s({
                            pendingMemories: [contextMemory],
                            titleHeader: ""
                        }));
                    }
                }
                const titleHeaderMatches = [...context.matchAll(titleHeaderPatternGlobal)];
                for (const [titleHeader, title] of titleHeaderMatches) {
                    if (!isAuto(title)) {
                        continue;
                    }
                    // Unique title headers found in context will promote card events
                    const titleKey = title.toLowerCase();
                    if (events.has(titleKey)) {
                        events.get(titleKey).titleHeader = titleHeader;
                        continue;
                    }
                    events.set(titleKey, O.s({
                        pendingMemories: [],
                        titleHeader: titleHeader
                    }));
                }
                return events;
            })();
            // Remove auto card title headers from active story card entries and contextualize their respective memory banks
            // Also handle the growth and maintenance of card memory banks
            let isRemembering = false;
            for (const card of storyCards) {
                // Iterate over each card to handle pending card events and forenames/surnames
                const titleHeaderMatcher = /^{title: \s*([\s\S]*?)\s*}/;
                let breakForCompression = isPendingCompression();
                if (breakForCompression) {
                    break;
                } else if (!card.entry.startsWith("{title: ")) {
                    continue;
                } else if (exceedsMemoryLimit()) {
                    const titleHeaderMatch = card.entry.match(titleHeaderMatcher);
                    if (titleHeaderMatch && isAuto(titleHeaderMatch[1])) {
                        prepareMemoryCompression(titleHeaderMatch[1].toLowerCase());
                        break;
                    }
                }
                // Handle card events
                const lowerEntry = card.entry.toLowerCase();
                for (const titleKey of cardEvents.keys()) {
                    if (!lowerEntry.startsWith("{title: " + titleKey + "}")) {
                        continue;
                    }
                    const cardEvent = cardEvents.get(titleKey);
                    if (
                        (0 < cardEvent.pendingMemories.length)
                        && /{\s*updates?\s*:\s*true\s*,\s*limits?\s*:[\s\S]*?}/i.test(card.description)
                    ) {
                        // Add new card memories
                        const associationsHashed = (function() {
                            if (titleKey in AC.database.memories.associations) {
                                return StringsHashed.deserialize(AC.database.memories.associations[titleKey][1], 65536);
                            } else {
                                AC.database.memories.associations[titleKey] = [999, ""];
                                return new StringsHashed(65536);
                            }
                        })();
                        const oldMemories = isolateMemories(extractCardMemories().text);
                        for (let i = 0; i < cardEvent.pendingMemories.length; i++) {
                            if (associationsHashed.has(cardEvent.pendingMemories[i])) {
                                // Remove first to alter the insertion order
                                associationsHashed.remove(cardEvent.pendingMemories[i]);
                            } else if (!oldMemories.some(oldMemory => (
                                (0.8 < similarityScore(oldMemory, cardEvent.pendingMemories[i]))
                            ))) {
                                // Ensure no near-duplicate memories are appended
                                card.description += "\n- " + cardEvent.pendingMemories[i];
                            }
                            associationsHashed.add(cardEvent.pendingMemories[i]);
                        }
                        AC.database.memories.associations[titleKey][1] = associationsHashed.latest(3500).serialize();
                        if (associationsHashed.size() === 0) {
                            delete AC.database.memories.associations[titleKey];
                        }
                        if (exceedsMemoryLimit()) {
                            breakForCompression = prepareMemoryCompression(titleKey);
                            break;
                        }
                    }
                    if (cardEvent.titleHeader !== "") {
                        // Replace this card's title header in context
                        const cardMemoriesText = extractCardMemories().text;
                        if (cardMemoriesText === "") {
                            // This card contains no card memories to contextualize
                            context = context.replace(cardEvent.titleHeader, "\n\n");
                        } else {
                            // Insert card memories within context and ensure they occur uniquely
                            const cardMemories = cardMemoriesText.split("\n").map(cardMemory => cardMemory.trim());
                            for (const cardMemory of cardMemories) {
                                if (25 < cardMemory.length) {
                                    context = (context
                                        .replaceAll(cardMemory, "<#>")
                                        .replaceAll(cardMemory.replace(/^-+\s*/, ""), "<#>")
                                    );
                                }
                            }
                            context = context.replace(cardEvent.titleHeader, (
                                "\n\n{%@MEM@%" + cardMemoriesText + "%@MEM@%}\n"
                            ));
                            isRemembering = true;
                        }
                    }
                    cardEvents.delete(titleKey);
                    break;
                }
                if (breakForCompression) {
                    break;
                }
                // Simplify auto-card titles which contain an obvious surname
                const titleHeaderMatch = card.entry.match(titleHeaderMatcher);
                if (!titleHeaderMatch) {
                    continue;
                }
                const [oldTitleHeader, oldTitle] = titleHeaderMatch;
                if (!isAuto(oldTitle)) {
                    continue;
                }
                const surname = isNamed(oldTitle, true);
                if (typeof surname !== "string") {
                    continue;
                }
                const newTitle = oldTitle.replace(" " + surname, "");
                const [oldTitleKey, newTitleKey] = [oldTitle, newTitle].map(title => title.toLowerCase());
                if (oldTitleKey === newTitleKey) {
                    continue;
                }
                // Preemptively mitigate some global state considered within the formatTitle scope
                clearTransientTitles();
                AC.database.titles.used = ["%@%"];
                [used, forenames, surnames].forEach(nameset => nameset.add("%@%"));
                // Premature optimization is the root of all evil
                const newKey = formatTitle(newTitle).newKey;
                clearTransientTitles();
                if (newKey === "") {
                    Internal.getUsedTitles();
                    continue;
                }
                if (oldTitleKey in AC.database.memories.associations) {
                    AC.database.memories.associations[newTitleKey] = AC.database.memories.associations[oldTitleKey];
                    delete AC.database.memories.associations[oldTitleKey];
                }
                if (AC.compression.titleKey === oldTitleKey) {
                    AC.compression.titleKey = newTitleKey;
                }
                card.entry = card.entry.replace(oldTitleHeader, oldTitleHeader.replace(oldTitle, newTitle));
                card.keys = buildKeys(card.keys.replaceAll(" " + surname, ""), newKey);
                Internal.getUsedTitles();
                function exceedsMemoryLimit() {
                    return ((function() {
                        const memoryLimitMatch = card.description.match(/limits?\s*:\s*(\d+)\s*}/i);
                        if (memoryLimitMatch) {
                            return validateMemoryLimit(parseInt(memoryLimitMatch[1], 10));
                        } else {
                            return AC.config.defaultMemoryLimit;
                        }
                    })() < (function() {
                        const cardMemories = extractCardMemories();
                        if (cardMemories.missing) {
                            return card.description;
                        } else {
                            return cardMemories.text;
                        }
                    })().length);
                }
                function prepareMemoryCompression(titleKey) {
                    AC.compression.oldMemoryBank = isolateMemories(extractCardMemories().text);
                    if (AC.compression.oldMemoryBank.length === 0) {
                        return false;
                    }
                    AC.compression.completed = 0;
                    AC.compression.titleKey = titleKey;
                    AC.compression.vanityTitle = cleanSpaces(card.title.trim());
                    AC.compression.responseEstimate = (function() {
                        const responseEstimate = estimateResponseLength();
                        if (responseEstimate === -1) {
                            return 1400
                        } else {
                            return responseEstimate;
                        }
                    })();
                    AC.compression.lastConstructIndex = -1;
                    AC.compression.newMemoryBank = [];
                    return true;
                }
                function extractCardMemories() {
                    const memoryHeaderMatch = card.description.match(
                        /(?<={\s*updates?\s*:[\s\S]*?,\s*limits?\s*:[\s\S]*?})[\s\S]*$/i
                    );
                    if (memoryHeaderMatch) {
                        return O.f({missing: false, text: cleanSpaces(memoryHeaderMatch[0].trim())});
                    } else {
                        return O.f({missing: true, text: ""});
                    }
                }
            }
            // Remove repeated memories plus any remaining title headers
            context = (context
                .replace(/(\s*<#>\s*)+/g, "\n")
                .replace(titleHeaderPatternGlobal, "\n\n")
                .replace(/World\s*Lore\s*:\s*/i, "World Lore:\n")
                .replace(/Memories\s*:\s*(?=Recent\s*Story\s*:|$)/i, "")
            );
            // Prompt the AI to generate a new card entry, compress an existing card's memories, or continue the story
            let isGenerating = false;
            let isCompressing = false;
            if (isPendingGeneration()) {
                promptGeneration();
            } else if (isAwaitingGeneration()) {
                AC.generation.workpiece = AC.generation.pending.shift();
                promptGeneration();
            } else if (isPendingCompression()) {
                promptCompression();
            } else if (AC.signal.recheckRetryOrErase) {
                // Do nothing 😜
            } else if ((AC.generation.cooldown <= 0) && (0 < AC.database.titles.candidates.length)) {
                // Prepare to automatically construct a new plot-relevant story card by selecting a title
                let selectedTitle = (function() {
                    if (AC.database.titles.candidates.length === 1) {
                        return AC.database.titles.candidates[0][0];
                    } else if (!isCandidatesSorted) {
                        sortCandidates();
                    }
                    const mostRelevantTitle = AC.database.titles.candidates[0][0];
                    if ((AC.database.titles.candidates.length < 16) || (Math.random() < 0.6667)) {
                        // Usually, 2/3 of the time, the most relevant title is selected
                        return mostRelevantTitle;
                    }
                    // Occasionally (1/3 of the time once the candidates databases has at least 16 titles) make a completely random selection between the top 4 most recently occuring title candidates which are NOT the top 2 most relevant titles. Note that relevance !== recency
                    // This gives non-character titles slightly better odds of being selected for card generation due to the relevance sorter's inherent bias towards characters; they tend to appear far more often in prose
                    return (AC.database.titles.candidates
                        // Create a shallow copy to avoid modifying AC.database.titles.candidates itself
                        // Add index to preserve original positions whenever ties occur during sorting
                        .map((candidate, index) => ({candidate, index}))
                        // Sort by each candidate's most recent turn
                        .sort((a, b) => {
                            const turnDiff = b.candidate[b.candidate.length - 1] - a.candidate[a.candidate.length - 1];
                            if (turnDiff === 0) {
                                // Don't change indices in the case of a tie
                                return (a.index - b.index);
                            } else {
                                // No tie here, sort by recency
                                return turnDiff;
                            }
                        })
                        // Get the top 6 most recent titles (4 + 2 because the top 2 relevant titles may be present)
                        .slice(0, 6)
                        // Extract only the title names
                        .map(element => element.candidate[0])
                        // Exclude the top 2 most relevant titles
                        .filter(title => ((title !== mostRelevantTitle) && (title !== AC.database.titles.candidates[1][0])))
                        // Ensure only 4 titles remain
                        .slice(0, 4)
                    )[Math.floor(Math.random() * 4)];
                })();
                while (!Internal.generateCard(O.f({title: selectedTitle}))) {
                    // This is an emergency precaution, I don't expect the interior of this while loop to EVER execute
                    // That said, it's crucial for the while condition be checked at least once, because Internal.generateCard appends an element to AC.generation.pending as a side effect
                    const lowerSelectedTitle = formatTitle(selectedTitle).newTitle.toLowerCase();
                    const index = AC.database.titles.candidates.findIndex(candidate => {
                        return (formatTitle(candidate[0]).newTitle.toLowerCase() === lowerSelectedTitle);
                    });
                    if (index === -1) {
                        // Should be impossible
                        break;
                    }
                    AC.database.titles.candidates.splice(index, 1);
                    if (AC.database.titles.candidates.length === 0) {
                        break;
                    }
                    selectedTitle = AC.database.titles.candidates[0][0];
                }
                if (isAwaitingGeneration()) {
                    // Assign the workpiece so card generation may fully commence!
                    AC.generation.workpiece = AC.generation.pending.shift();
                    promptGeneration();
                } else if (isPendingCompression()) {
                    promptCompression();
                }
            } else if (
                (AC.chronometer.step || forceStep)
                && (0 < AC.generation.cooldown)
                && (AC.config.addCardCooldown !== 9999)
            ) {
                AC.generation.cooldown--;
            }
            if (shouldTrimContext()) {
                // Truncate context based on AC.signal.maxChars, begin by individually removing the oldest sentences from the recent story portion of the context window
                const recentStoryPattern = /Recent\s*Story\s*:\s*([\s\S]*?)(%@GEN@%|%@COM@%|\s\[\s*Author's\s*note\s*:|$)/i;
                const recentStoryMatch = context.match(recentStoryPattern);
                if (recentStoryMatch) {
                    const recentStory = recentStoryMatch[1];
                    let sentencesJoined = recentStory;
                    // Split by the whitespace chars following each sentence (without consuming)
                    const sentences = splitBySentences(recentStory);
                    // [minimum num of story sentences] = ([max chars for context] / 6) / [average chars per sentence]
                    const sentencesMinimum = Math.ceil(
                        (AC.signal.maxChars / 6) / (
                            boundInteger(1, context.length) / boundInteger(1, sentences.length)
                        )
                    ) + 1;
                    do {
                        if (sentences.length < sentencesMinimum) {
                            // A minimum of n many recent story sentences must remain
                            // Where n represents a sentence count equal to roughly 16.7% of the full context chars
                            break;
                        }
                        // Remove the first (oldest) recent story sentence
                        sentences.shift();
                        // Check if the total length exceeds the AC.signal.maxChars limit
                        sentencesJoined = sentences.join("");
                    } while (AC.signal.maxChars < (context.length - recentStory.length + sentencesJoined.length + 3));
                    // Rebuild the context with the truncated recentStory
                    context = context.replace(recentStoryPattern, "Recent Story:\n" + sentencesJoined + recentStoryMatch[2]);
                }
                if (isRemembering && shouldTrimContext()) {
                    // Next remove loaded card memories (if any) with top-down priority, one card at a time
                    do {
                        // This matcher relies on its case-sensitivity
                        const cardMemoriesMatch = context.match(/{%@MEM@%([\s\S]+?)%@MEM@%}/);
                        if (!cardMemoriesMatch) {
                            break;
                        }
                        context = context.replace(cardMemoriesMatch[0], (cardMemoriesMatch[0]
                            .replace(cardMemoriesMatch[1], "")
                            // Set the MEM tags to lowercase to avoid repeated future matches
                            .toLowerCase()
                        ));
                    } while (AC.signal.maxChars < (context.length + 3));
                }
                if (shouldTrimContext()) {
                    // If the context is still too long, just trim from the beginning I guess 🤷‍♀️
                    context = context.slice(context.length - AC.signal.maxChars + 1);
                }
            }
            if (isRemembering) {
                // Card memory flags serve no further purpose
                context = (context
                    // Case-insensitivity is crucial here
                    .replace(/(?<={%@MEM@%)\s*/gi, "")
                    .replace(/\s*(?=%@MEM@%})/gi, "")
                    .replace(/{%@MEM@%%@MEM@%}\s?/gi, "")
                    .replaceAll("{%@MEM@%", "{ Memories:\n")
                    .replaceAll("%@MEM@%}", " }")
                );
            }
            if (isGenerating) {
                // Likewise for the card entry generation delimiter
                context = context.replaceAll("%@GEN@%", "");
            } else if (isCompressing) {
                // Or the (mutually exclusive) card memory compression delimiter
                context = context.replaceAll("%@COM@%", "");
            }
            CODOMAIN.initialize(context);
            function isolateMemories(memoriesText) {
                return (memoriesText
                    .split("\n")
                    .map(memory => cleanSpaces(memory.trim().replace(/^-+\s*/, "")))
                    .filter(memory => (memory !== ""))
                );
            }
            function isAuto(title) {
                return auto.has(title.toLowerCase());
            }
            function promptCompression() {
                isGenerating = false;
                const cardEntryText = (function() {
                    const card = getAutoCard(AC.compression.titleKey);
                    if (card === null) {
                        return null;
                    }
                    const entryLines = formatEntry(card.entry).trimEnd().split("\n");
                    if (Object.is(entryLines[0].trim(), "")) {
                        return "";
                    }
                    for (let i = 0; i < entryLines.length; i++) {
                        entryLines[i] = entryLines[i].trim();
                        if (/[a-zA-Z]$/.test(entryLines[i])) {
                            entryLines[i] += ".";
                        }
                        entryLines[i] += " ";
                    }
                    return entryLines.join("");
                })();
                if (cardEntryText === null) {
                    // Safety measure
                    resetCompressionProperties();
                    return;
                }
                repositionAN();
                // The "%COM%" substring serves as a temporary delimiter for later context length trucation
                context = context.trimEnd() + "\n\n" + cardEntryText + (
                    [...AC.compression.newMemoryBank, ...AC.compression.oldMemoryBank].join(" ")
                ) + "%@COM@%\n\n" + (function() {
                    const memoryConstruct = (function() {
                        if (AC.compression.lastConstructIndex === -1) {
                            for (let i = 0; i < AC.compression.oldMemoryBank.length; i++) {
                                AC.compression.lastConstructIndex = i;
                                const memoryConstruct = buildMemoryConstruct();
                                if ((
                                    (AC.config.memoryCompressionRatio / 10) * AC.compression.responseEstimate
                                ) < memoryConstruct.length) {
                                    return memoryConstruct;
                                }
                            }
                        } else {
                            // The previous card memory compression attempt produced a bad output
                            AC.compression.lastConstructIndex = boundInteger(
                                0, AC.compression.lastConstructIndex + 1, AC.compression.oldMemoryBank.length - 1
                            );
                        }
                        return buildMemoryConstruct();
                    })();
                    // Fill all %{title} placeholders
                    const precursorPrompt = insertTitle(AC.config.compressionPrompt, AC.compression.vanityTitle).trim();
                    const memoryPlaceholderPattern = /(?:[%\$]+\s*|[%\$]*){+\s*memor(y|ies)\s*}+/gi;
                    if (memoryPlaceholderPattern.test(precursorPrompt)) {
                        // Fill all %{memory} placeholders with a selection of pending old memories
                        return precursorPrompt.replace(memoryPlaceholderPattern, memoryConstruct);
                    } else {
                        // Append the partial entry to the end of context
                        return precursorPrompt + "\n\n" + memoryConstruct;
                    }
                })() + "\n\n";
                isCompressing = true;
                return;
            }
            function promptGeneration() {
                repositionAN();
                // All %{title} placeholders were already filled during this workpiece's initialization
                // The "%GEN%" substring serves as a temporary delimiter for later context length trucation
                context = context.trimEnd() + "%@GEN@%\n\n" + (function() {
                    // For context only, remove the title header from this workpiece's partially completed entry
                    const partialEntry = formatEntry(AC.generation.workpiece.entry);
                    const entryPlaceholderPattern = /(?:[%\$]+\s*|[%\$]*){+\s*entry\s*}+/gi;
                    if (entryPlaceholderPattern.test(AC.generation.workpiece.prompt)) {
                        // Fill all %{entry} placeholders with the partial entry
                        return AC.generation.workpiece.prompt.replace(entryPlaceholderPattern, partialEntry);
                    } else {
                        // Append the partial entry to the end of context
                        return AC.generation.workpiece.prompt.trimEnd() + "\n\n" + partialEntry;
                    }
                })();
                isGenerating = true;
                return;
            }
            function repositionAN() {
                // Move the Author's Note further back in context during card generation (should still be considered)
                const authorsNotePattern = /\s*(\[\s*Author's\s*note\s*:[\s\S]*\])\s*/i;
                const authorsNoteMatch = context.match(authorsNotePattern);
                if (!authorsNoteMatch) {
                    return;
                }
                const leadingSpaces = context.match(/^\s*/)[0];
                context = context.replace(authorsNotePattern, " ").trimStart();
                const recentStoryPattern = /\s*Recent\s*Story\s*:\s*/i;
                if (recentStoryPattern.test(context)) {
                    // Remove author's note from its original position and insert above "Recent Story:\n"
                    context = (context
                        .replace(recentStoryPattern, "\n\n" + authorsNoteMatch[1] + "\n\nRecent Story:\n")
                        .trimStart()
                    );
                } else {
                    context = authorsNoteMatch[1] + "\n\n" + context;
                }
                context = leadingSpaces + context;
                return;
            }
            function sortCandidates() {
                if (AC.database.titles.candidates.length < 2) {
                    return;
                }
                const turnRange = boundInteger(1, maxTurn - minTurn);
                const recencyExponent = Math.log10(turnRange) + 1.85;
                // Sort the database of available title candidates by relevance
                AC.database.titles.candidates.sort((a, b) => {
                    return relevanceScore(b) - relevanceScore(a);
                });
                function relevanceScore(candidate) {
                    // weight = (((turn - minTurn) / (maxTurn - minTurn)) + 1)^(log10(maxTurn - minTurn) + 1.85)
                    return candidate.slice(1).reduce((sum, turn) => {
                        // Apply exponential scaling to give far more weight to recent turns
                        return sum + Math.pow((
                            // The recency weight's exponent scales by log10(turnRange) + 1.85
                            // Shhh don't question it 😜
                            ((turn - minTurn) / turnRange) + 1
                        ), recencyExponent);
                    }, 0);
                }
                return;
            }
            function shouldTrimContext() {
                return (AC.signal.maxChars <= context.length);
            }
            function setCandidateTurnBounds(candidate) {
                // candidate: ["Example Title", 0, 1, 2, 3]
                minTurn = boundInteger(0, minTurn, candidate[1]);
                maxTurn = boundInteger(candidate[candidate.length - 1], maxTurn);
                return;
            }
            function disableAutoCards() {
                AC.signal.forceToggle = null;
                // Auto-Cards has been disabled
                AC.config.doAC = false;
                // Deconstruct the "Configure Auto-Cards" story card
                unbanTitle(configureCardTemplate.title);
                eraseCard(configureCard);
                // Signal the construction of "Edit to enable Auto-Cards" during the next onOutput hook
                AC.signal.swapControlCards = true;
                // Post a success message
                notify("Disabled! Use the \"Edit to enable Auto-Cards\" story card to undo");
                CODOMAIN.initialize(TEXT);
                return;
            }
            break; }
        case "output": {
            // AutoCards was called within the output modifier
            const output = prettifyEmDashes(TEXT);
            if (0 < AC.chronometer.postpone) {
                // Do not capture or replace any outputs during this turn
                promoteAmnesia();
                if (permitOutput()) {
                    CODOMAIN.initialize(output);
                }
            } else if (AC.signal.swapControlCards) {
                if (permitOutput()) {
                    CODOMAIN.initialize(output);
                }
            } else if (isPendingGeneration()) {
                const textClone = prettifyEmDashes(text);
                AC.chronometer.amnesia = 0;
                AC.generation.completed++;
                const generationsRemaining = (function() {
                    if (
                        textClone.includes("\"")
                        || /(?<=^|\s|—|\(|\[|{)sa(ys?|id)(?=\s|\.|\?|!|,|;|—|\)|\]|}|$)/i.test(textClone)
                    ) {
                        // Discard full outputs containing "say" or quotations
                        // To build coherent entries, the AI must not attempt to continue the story
                        return skip(estimateRemainingGens());
                    }
                    const oldSentences = (splitBySentences(formatEntry(AC.generation.workpiece.entry))
                        .map(sentence => sentence.trim())
                        .filter(sentence => (2 < sentence.length))
                    );
                    const seenSentences = new Set();
                    const entryAddition = splitBySentences(textClone
                        .replace(/[\*_~]/g, "")
                        .replace(/:+/g, "#")
                        .replace(/\s+/g, " ")
                    ).map(sentence => (sentence
                        .trim()
                        .replace(/^-+\s*/, "")
                    )).filter(sentence => (
                        // Remove empty strings
                        (sentence !== "")
                        // Remove colon ":" headers or other stinky symbols because me no like 😠
                        && !/[#><@]/.test(sentence)
                        // Remove previously repeated sentences
                        && !oldSentences.some(oldSentence => (0.75 < similarityScore(oldSentence, sentence)))
                        // Remove repeated sentences from within entryAddition itself
                        && ![...seenSentences].some(seenSentence => (0.75 < similarityScore(seenSentence, sentence)))
                        // Simply ensure this sentence is henceforth unique
                        && seenSentences.add(sentence)
                    )).join(" ").trim() + " ";
                    if (entryAddition === " ") {
                        return skip(estimateRemainingGens());
                    } else if (
                        /^{title:[\s\S]*?}$/.test(AC.generation.workpiece.entry.trim())
                        && (AC.generation.workpiece.entry.length < 111)
                    ) {
                        AC.generation.workpiece.entry += "\n" + entryAddition;
                    } else {
                        AC.generation.workpiece.entry += entryAddition;
                    }
                    if (AC.generation.workpiece.limit < AC.generation.workpiece.entry.length) {
                        let exit = false;
                        let truncatedEntry = AC.generation.workpiece.entry.trimEnd();
                        const sentences = splitBySentences(truncatedEntry);
                        for (let i = sentences.length - 1; 0 <= i; i--) {
                            if (!sentences[i].includes("\n")) {
                                sentences.splice(i, 1);
                                truncatedEntry = sentences.join("").trimEnd();
                                if (truncatedEntry.length <= AC.generation.workpiece.limit) {
                                    break;
                                }
                                continue;
                            }
                            // Lines only matter for initial entries provided via AutoCards().API.generateCard
                            const lines = sentences[i].split("\n");
                            for (let j = lines.length - 1; 0 <= j; j--) {
                                lines.splice(j, 1);
                                sentences[i] = lines.join("\n");
                                truncatedEntry = sentences.join("").trimEnd();
                                if (truncatedEntry.length <= AC.generation.workpiece.limit) {
                                    // Exit from both loops
                                    exit = true;
                                    break;
                                }
                            }
                            if (exit) {
                                break;
                            }
                        }
                        if (truncatedEntry.length < 150) {
                            // Disregard the previous sentence/line-based truncation attempt
                            AC.generation.workpiece.entry = limitString(
                                AC.generation.workpiece.entry, AC.generation.workpiece.limit
                            );
                            // Attempt to remove the last word/fragment
                            truncatedEntry = AC.generation.workpiece.entry.replace(/\s*\S+$/, "");
                            if (150 <= truncatedEntry) {
                                AC.generation.workpiece.entry = truncatedEntry;
                            }
                        } else {
                            AC.generation.workpiece.entry = truncatedEntry;
                        }
                        return 0;
                    } else if ((AC.generation.workpiece.limit - 50) <= AC.generation.workpiece.entry.length) {
                        AC.generation.workpiece.entry = AC.generation.workpiece.entry.trimEnd();
                        return 0;
                    }
                    function skip(remaining) {
                        if (AC.generation.permitted <= AC.generation.completed) {
                            AC.generation.workpiece.entry = AC.generation.workpiece.entry.trimEnd();
                            return 0;
                        }
                        return remaining;
                    }
                    function estimateRemainingGens() {
                        const responseEstimate = estimateResponseLength();
                        if (responseEstimate === -1) {
                            return 1;
                        }
                        const remaining = boundInteger(1, Math.round(
                            (150 + AC.generation.workpiece.limit - AC.generation.workpiece.entry.length) / responseEstimate
                        ));
                        if (AC.generation.permitted === 34) {
                            AC.generation.permitted = boundInteger(6, Math.floor(3.5 * remaining), 32);
                        }
                        return remaining;
                    }
                    return skip(estimateRemainingGens());
                })();
                postOutputMessage(textClone, AC.generation.completed / Math.min(
                    AC.generation.permitted,
                    AC.generation.completed + generationsRemaining
                ));
                if (generationsRemaining <= 0) {
                    notify("\"" + AC.generation.workpiece.title + "\" was successfully added to your story cards!");
                    constructCard(O.f({
                        type: AC.generation.workpiece.type,
                        title: AC.generation.workpiece.title,
                        keys: AC.generation.workpiece.keys,
                        entry: (function() {
                            if (!AC.config.bulletedListMode) {
                                return AC.generation.workpiece.entry;
                            }
                            const sentences = splitBySentences(
                                formatEntry(
                                    AC.generation.workpiece.entry.replace(/\s+/g, " ")
                                ).replace(/:+/g, "#")
                            ).map(sentence => {
                                sentence = (sentence
                                    .replaceAll("#", ":")
                                    .trim()
                                    .replace(/^-+\s*/, "")
                                );
                                if (sentence.length < 12) {
                                    return sentence;
                                } else {
                                    return "\n- " + sentence.replace(/\s*[\.\?!]+$/, "");
                                }
                            });
                            const titleHeader = "{title: " + AC.generation.workpiece.title + "}";
                            if (sentences.every(sentence => (sentence.length < 12))) {
                                const sentencesJoined = sentences.join(" ").trim();
                                if (sentencesJoined === "") {
                                    return titleHeader;
                                } else {
                                    return limitString(titleHeader + "\n" + sentencesJoined, 2000);
                                }
                            }
                            for (let i = sentences.length - 1; 0 <= i; i--) {
                                const bulletedEntry = cleanSpaces(titleHeader + sentences.join(" ")).trimEnd();
                                if (bulletedEntry.length <= 2000) {
                                    return bulletedEntry;
                                }
                                if (sentences.length === 1) {
                                    break;
                                }
                                sentences.splice(i, 1);
                            }
                            return limitString(AC.generation.workpiece.entry, 2000);
                        })(),
                        description: AC.generation.workpiece.description,
                    }), newCardIndex());
                    AC.generation.cooldown = AC.config.addCardCooldown;
                    AC.generation.completed = 0;
                    AC.generation.permitted = 34;
                    AC.generation.workpiece = O.f({});
                    clearTransientTitles();
                }
            } else if (isPendingCompression()) {
                const textClone = prettifyEmDashes(text);
                AC.chronometer.amnesia = 0;
                AC.compression.completed++;
                const compressionsRemaining = (function() {
                    const newMemory = (textClone
                        // Remove some dumb stuff
                        .replace(/^[\s\S]*:/g, "")
                        .replace(/[\*_~#><@\[\]{}`\\]/g, " ")
                        // Remove bullets
                        .trim().replace(/^-+\s*/, "").replace(/\s*-+$/, "").replace(/\s*-\s+/g, " ")
                        // Condense consecutive whitespace
                        .replace(/\s+/g, " ")
                    );
                    if ((AC.compression.oldMemoryBank.length - 1) <= AC.compression.lastConstructIndex) {
                        // Terminate this compression cycle; the memory construct cannot grow any further
                        AC.compression.newMemoryBank.push(newMemory);
                        return 0;
                    } else if ((newMemory.trim() !== "") && (newMemory.length < buildMemoryConstruct().length)) {
                        // Good output, preserve and then proceed onwards
                        AC.compression.oldMemoryBank.splice(0, AC.compression.lastConstructIndex + 1);
                        AC.compression.lastConstructIndex = -1;
                        AC.compression.newMemoryBank.push(newMemory);
                    } else {
                        // Bad output, discard and then try again
                        AC.compression.responseEstimate += 200;
                    }
                    return boundInteger(1, joinMemoryBank(AC.compression.oldMemoryBank).length) / AC.compression.responseEstimate;
                })();
                postOutputMessage(textClone, AC.compression.completed / (AC.compression.completed + compressionsRemaining));
                if (compressionsRemaining <= 0) {
                    const card = getAutoCard(AC.compression.titleKey);
                    if (card === null) {
                        notify(
                            "Failed to apply summarized memories for \"" + AC.compression.vanityTitle + "\" due to a missing or invalid AC card title header!"
                        );
                    } else {
                        const memoryHeaderMatch = card.description.match(
                            /(?<={\s*updates?\s*:[\s\S]*?,\s*limits?\s*:[\s\S]*?})[\s\S]*$/i
                        );
                        if (memoryHeaderMatch) {
                            // Update the card memory bank
                            notify("Memories for \"" + AC.compression.vanityTitle + "\" were successfully summarized!");
                            card.description = card.description.replace(memoryHeaderMatch[0], (
                                "\n" + joinMemoryBank(AC.compression.newMemoryBank)
                            ));
                        } else {
                            notify(
                                "Failed to apply summarizes memories for \"" + AC.compression.vanityTitle + "\" due to a missing or invalid AC card memory header!"
                            );
                        }
                    }
                    resetCompressionProperties();
                } else if (AC.compression.completed === 1) {
                    notify("Summarizing excess memories for \"" + AC.compression.vanityTitle + "\"");
                }
                function joinMemoryBank(memoryBank) {
                    return cleanSpaces("- " + memoryBank.join("\n- "));
                }
            } else if (permitOutput()) {
                CODOMAIN.initialize(output);
            }
            concludeOutputBlock((function() {
                if (AC.signal.swapControlCards) {
                    return getConfigureCardTemplate();
                } else {
                    return null;
                }
            })())
            function postOutputMessage(textClone, ratio) {
                if (!permitOutput()) {
                    // Do nothing
                } else if (0.5 < similarityScore(textClone, output)) {
                    // To improve Auto-Cards' compatability with other scripts, I only bother to replace the output text when the original and new output texts have a similarity score above a particular threshold. Otherwise, I may safely assume the output text has already been replaced by another script and thus skip this step.
                    CODOMAIN.initialize(
                        getPrecedingNewlines() + ">>> please select \"continue\" (" + Math.round(ratio * 100) + "%) <<<\n\n"
                    );
                } else {
                    CODOMAIN.initialize(output);
                }
                return;
            }
            break; }
        default: {
            CODOMAIN.initialize(TEXT);
            break; }
        }
        // Get an individual story card reference via titleKey
        function getAutoCard(titleKey) {
            return Internal.getCard(card => card.entry.toLowerCase().startsWith("{title: " + titleKey + "}"));
        }
        function buildMemoryConstruct() {
            return (AC.compression.oldMemoryBank
                .slice(0, AC.compression.lastConstructIndex + 1)
                .join(" ")
            );
        }
        // Estimate the average AI response char count based on recent continue outputs
        function estimateResponseLength() {
            if (!Array.isArray(history) || (history.length === 0)) {
                return -1;
            }
            const charCounts = [];
            for (let i = 0; i < history.length; i++) {
                const action = readPastAction(i);
                if ((action.type === "continue") && !action.text.includes("<<<")) {
                    charCounts.push(action.text.length);
                }
            }
            if (charCounts.length < 7) {
                if (charCounts.length === 0) {
                    return -1;
                } else if (charCounts.length < 4) {
                    return boundInteger(350, charCounts[0]);
                }
                charCounts.splice(3);
            }
            return boundInteger(175, Math.floor(
                charCounts.reduce((sum, charCount) => {
                    return sum + charCount;
                }, 0) / charCounts.length
            ));
        }
        // Evalute how similar two strings are on the range [0, 1]
        function similarityScore(strA, strB) {
            if (strA === strB) {
                return 1;
            }
            // Normalize both strings for further comparison purposes
            const [cleanA, cleanB] = [strA, strB].map(str => limitString((str
                .replace(/[0-9\s]/g, " ")
                .trim()
                .replace(/  +/g, " ")
                .toLowerCase()
            ), 1400));
            if (cleanA === cleanB) {
                return 1;
            }
            // Compute the Levenshtein distance
            const [lengthA, lengthB] = [cleanA, cleanB].map(str => str.length);
            // I love DP ❤️ (dynamic programming)
            const dp = Array(lengthA + 1).fill(null).map(() => Array(lengthB + 1).fill(0));
            for (let i = 0; i <= lengthA; i++) {
                dp[i][0] = i;
            }
            for (let j = 0; j <= lengthB; j++) {
                dp[0][j] = j;
            }
            for (let i = 1; i <= lengthA; i++) {
                for (let j = 1; j <= lengthB; j++) {
                    if (cleanA[i - 1] === cleanB[j - 1]) {
                        // No cost if chars match, swipe right 😎
                        dp[i][j] = dp[i - 1][j - 1];
                    } else {
                        dp[i][j] = Math.min(
                            // Deletion
                            dp[i - 1][j] + 1,
                            // Insertion
                            dp[i][j - 1] + 1,
                            // Substitution
                            dp[i - 1][j - 1] + 1
                        );
                    }
                }
            }
            // Convert distance to similarity score (1 - (distance / maxLength))
            return 1 - (dp[lengthA][lengthB] / Math.max(lengthA, lengthB));
        }
        function splitBySentences(prose) {
            // Don't split sentences on honorifics or abbreviations such as "Mr.", "Mrs.", "etc."
            return (prose
                .replace(new RegExp("(?<=\\s|\"|\\(|—|\\[|'|{|^)(?:" + ([...Words.honorifics, ...Words.abbreviations]
                    .map(word => word.replace(".", ""))
                    .join("|")
                ) + ")\\.", "gi"), "$1%@%")
                .split(/(?<=[\.\?!:]["\)'\]}]?\s+)(?=[^\p{Ll}\s])/u)
                .map(sentence => sentence.replaceAll("%@%", "."))
            );
        }
        function formatEntry(partialEntry) {
            const cleanedEntry = cleanSpaces(partialEntry
                .replace(/^{title:[\s\S]*?}/, "")
                .replace(/[#><@*_~]/g, "")
                .trim()
            ).replace(/(?<=^|\n)-+\s*/g, "");
            if (cleanedEntry === "") {
                return "";
            } else {
                return cleanedEntry + " ";
            }
        }
        // Resolve malformed em dashes (common AI cliche)
        function prettifyEmDashes(str) {
            return str.replace(/(?<!^\s*)(?: - | ?– ?)(?!\s*$)/g, "—");
        }
        function getConfigureCardTemplate() {
            const names = getControlVariants().configure;
            return O.f({
                type: AC.config.defaultCardType,
                title: names.title,
                keys: names.keys,
                entry: getConfigureCardEntry(),
                description: getConfigureCardDescription()
            });
        }
        function getConfigureCardEntry() {
            return prose(
                "> Auto-Cards automatically creates and updates plot-relevant story cards while you play. You may configure the following settings by replacing \"false\" with \"true\" (and vice versa) or by adjusting numbers for the appropriate settings.",
                "> Disable Auto-Cards: false",
                "> Show detailed guide: false",
                "> Delete all automatic story cards: false",
                "> Reset all config settings and prompts: false",
                "> Pin this config card near the top: " + AC.config.pinConfigureCard,
                "> Minimum turns cooldown for new cards: " + AC.config.addCardCooldown,
                "> New cards use a bulleted list format: " + AC.config.bulletedListMode,
                "> Maximum entry length for new cards: " + AC.config.defaultEntryLimit,
                "> New cards perform memory updates: " + AC.config.defaultCardsDoMemoryUpdates,
                "> Card memory bank preferred length: " + AC.config.defaultMemoryLimit,
                "> Memory summary compression ratio: " + AC.config.memoryCompressionRatio,
                "> Exclude all-caps from title detection: " + AC.config.ignoreAllCapsTitles,
                "> Also detect titles from player inputs: " + AC.config.readFromInputs,
                "> Minimum turns age for title detection: " + AC.config.minimumLookBackDistance,
                "> Use Live Script Interface v2: " + (AC.config.LSIv2 !== null),
                "> Log debug data in a separate card: " + AC.config.showDebugData
            );
        }
        function getConfigureCardDescription() {
            return limitString(O.v(prose(
                Words.delimiter,
                "> AI prompt to generate new cards:",
                limitString(AC.config.generationPrompt.trim(), 4350).trimEnd(),
                Words.delimiter,
                "> AI prompt to summarize card memories:",
                limitString(AC.config.compressionPrompt.trim(), 4350).trimEnd(),
                Words.delimiter,
                "> Titles banned from new card creation:",
                AC.database.titles.banned.join(", ")
            )), 9850);
        }
    } else {
        // Auto-Cards is currently disabled
        switch(HOOK) {
        case "input": {
            if (/\/\s*A\s*C/i.test(text)) {
                CODOMAIN.initialize(doPlayerCommands(text));
            } else {
                CODOMAIN.initialize(TEXT);
            }
            break; }
        case "context": {
            // AutoCards was called within the context modifier
            advanceChronometer();
            // Get or construct the "Edit to enable Auto-Cards" story card
            const enableCardTemplate = getEnableCardTemplate();
            const enableCard = getSingletonCard(true, enableCardTemplate);
            banTitle(enableCardTemplate.title);
            pinAndSortCards(enableCard);
            if (AC.signal.forceToggle) {
                enableAutoCards();
            } else if (enableCard.entry !== enableCardTemplate.entry) {
                if ((extractSettings(enableCard.entry)?.enableautocards === true) && (AC.signal.forceToggle !== false)) {
                    // Use optional chaining to check the existence of enableautocards before accessing its value
                    enableAutoCards();
                } else {
                    // Repair the damaged card entry
                    enableCard.entry = enableCardTemplate.entry;
                }
            }
            AC.signal.forceToggle = null;
            CODOMAIN.initialize(TEXT);
            function enableAutoCards() {
                // Auto-Cards has been enabled
                AC.config.doAC = true;
                // Deconstruct the "Edit to enable Auto-Cards" story card
                unbanTitle(enableCardTemplate.title);
                eraseCard(enableCard);
                // Signal the construction of "Configure Auto-Cards" during the next onOutput hook
                AC.signal.swapControlCards = true;
                // Post a success message
                notify("Enabled! You may now edit the \"Configure Auto-Cards\" story card");
                return;
            }
            break; }
        case "output": {
            // AutoCards was called within the output modifier
            promoteAmnesia();
            if (permitOutput()) {
                CODOMAIN.initialize(TEXT);
            }
            concludeOutputBlock((function() {
                if (AC.signal.swapControlCards) {
                    return getEnableCardTemplate();
                } else {
                    return null;
                }
            })());
            break; }
        default: {
            CODOMAIN.initialize(TEXT);
            break; }
        }
        function getEnableCardTemplate() {
            const names = getControlVariants().enable;
            return O.f({
                type: AC.config.defaultCardType,
                title: names.title,
                keys: names.keys,
                entry: prose(
                    "> Auto-Cards automatically creates and updates plot-relevant story cards while you play. To enable this system, simply edit the \"false\" below to say \"true\" instead!",
                    "> Enable Auto-Cards: false"),
                description: "Perform any Do/Say/Story/Continue action within your adventure to apply this change!"
            });
        }
    }
    function hoistConst() { return (class Const {
        // This helps me debug stuff uwu
        #constant;
        constructor(...args) {
            if (args.length !== 0) {
                this.constructor.#throwError([[(args.length === 1), "Const cannot be instantiated with a parameter"], ["Const cannot be instantiated with parameters"]]);
            } else {
                O.f(this);
                return this;
            }
        }
        declare(...args) {
            if (args.length !== 0) {
                this.constructor.#throwError([[(args.length === 1), "Instances of Const cannot be declared with a parameter"], ["Instances of Const cannot be declared with parameters"]]);
            } else if (this.#constant === undefined) {
                this.#constant = null;
                return this;
            } else if (this.#constant === null) {
                this.constructor.#throwError("Instances of Const cannot be redeclared");
            } else {
                this.constructor.#throwError("Instances of Const cannot be redeclared after initialization");
            }
        }
        initialize(...args) {
            if (args.length !== 1) {
                this.constructor.#throwError([[(args.length === 0), "Instances of Const cannot be initialized without a parameter"], ["Instances of Const cannot be initialized with multiple parameters"]]);
            } else if (this.#constant === null) {
                this.#constant = [args[0]];
                return this;
            } else if (this.#constant === undefined) {
                this.constructor.#throwError("Instances of Const cannot be initialized before declaration");
            } else {
                this.constructor.#throwError("Instances of Const cannot be reinitialized");
            }
        }
        read(...args) {
            if (args.length !== 0) {
                this.constructor.#throwError([[(args.length === 1), "Instances of Const cannot be read with a parameter"], ["Instances of Const cannot read with any parameters"]]);
            } else if (Array.isArray(this.#constant)) {
                return this.#constant[0];
            } else if (this.#constant === null) {
                this.constructor.#throwError("Despite prior declaration, instances of Const cannot be read before initialization");
            } else {
                this.constructor.#throwError("Instances of Const cannot be read before initialization");
            }
        }
        // An error condition is paired with an error message [condition, message], call #throwError with an array of pairs to throw the message corresponding with the first true condition [[cndtn1, msg1], [cndtn2, msg2], [cndtn3, msg3], ...] The first conditionless array element always evaluates to true ('else')
        static #throwError(...args) {
            // Look, I thought I was going to use this more at the time okay
            const [conditionalMessagesTable] = args;
            const codomain = new Const().declare();
            const error = O.f(new Error((function() {
                const codomain = new Const().declare();
                if (Array.isArray(conditionalMessagesTable)) {
                    const chosenPair = conditionalMessagesTable.find(function(...args) {
                        const [pair] = args;
                        const codomain = new Const().declare();
                        if (Array.isArray(pair)) {
                            if ((pair.length === 1) && (typeof pair[0] === "string")) {
                                codomain.initialize(true);
                            } else if (
                                (pair.length === 2)
                                && (typeof pair[0] === "boolean")
                                && (typeof pair[1] === "string")
                            ) {
                                codomain.initialize(pair[0]);
                            } else {
                                Const.#throwError("Const.#throwError encountered an invalid array element of conditionalMessagesTable");
                            }
                        } else {
                            Const.#throwError("Const.#throwError encountered a non-array element within conditionalMessagesTable");
                        }
                        return codomain.read();
                    });
                    if (Array.isArray(chosenPair)) {
                        if (chosenPair.length === 1) {
                            codomain.initialize(chosenPair[0]);
                        } else {
                            codomain.initialize(chosenPair[1]);
                        }
                    } else {
                        codomain.initialize("Const.#throwError was not called with any true conditions");
                    }
                } else if (typeof conditionalMessagesTable === "string") {
                    codomain.initialize(conditionalMessagesTable);
                } else {
                    codomain.initialize("Const.#throwError could not parse the given argument");
                }
                return codomain.read();
            })()));
            if (error.stack) {
                codomain.initialize(error.stack
                    .replace(/\(<isolated-vm>:/gi, "(")
                    .replace(/Error:|at\s*(?:#throwError|Const.(?:declare|initialize|read)|new\s*Const)\s*\(\d+:\d+\)/gi, "")
                    .replace(/AutoCards\s*\((\d+):(\d+)\)\s*at\s*<isolated-vm>:\d+:\d+\s*$/i, "AutoCards ($1:$2)")
                    .trim()
                    .replace(/\s+/g, " ")
                );
            } else {
                codomain.initialize(error.message);
            }
            throw codomain.read();
        }
    }); }
    function hoistO() { return (class O {
        // Some Object class methods are annoyingly verbose for how often I use them 👿
        static f(obj) {
            return Object.freeze(obj);
        }
        static v(base) {
            return see(Words.copy) + base;
        }
        static s(obj) {
            return Object.seal(obj);
        }
    }); }
    function hoistWords() { return (class Words { static #cache = {}; static {
        // Each word list is initialized only once before being cached!
        const wordListInitializers = {
            // Special-cased honorifics which are excluded from titles and ignored during split-by-sentences operations
            honorifics: () => [
                "mr.", "ms.", "mrs.", "dr."
            ],
            // Other special-cased abbreviations used to reformat titles and split-by-sentences
            abbreviations: () => [
                "sr.", "jr.", "etc.", "st.", "ex.", "inc."
            ],
            // Lowercase minor connector words which may exist within titles
            minor: () => [
                "&", "the", "for", "of", "le", "la", "el"
            ],
            // Removed from shortened titles for improved memory detection and trigger keword assignments
            peerage: () => [
                "sir", "lord", "lady", "king", "queen", "majesty", "duke", "duchess", "noble", "royal", "emperor", "empress", "great", "prince", "princess", "count", "countess", "baron", "baroness", "archduke", "archduchess", "marquis", "marquess", "viscount", "viscountess", "consort", "grand", "sultan", "sheikh", "tsar", "tsarina", "czar", "czarina", "viceroy", "monarch", "regent", "imperial", "sovereign", "president", "prime", "minister", "nurse", "doctor", "saint", "general", "private", "commander", "captain", "lieutenant", "sergeant", "admiral", "marshal", "baronet", "emir", "chancellor", "archbishop", "bishop", "cardinal", "abbot", "abbess", "shah", "maharaja", "maharani", "councillor", "squire", "lordship", "ladyship", "monseigneur", "mayor", "princeps", "chief", "chef", "their", "my", "his", "him", "he'd", "her", "she", "she'd", "you", "your", "yours", "you'd", "you've", "you'll", "yourself", "mine", "myself", "highness", "excellency", "farmer", "sheriff", "officer", "detective", "investigator", "miss", "mister", "colonel", "professor", "teacher", "agent", "heir", "heiress", "master", "mistress", "headmaster", "headmistress", "principal", "papa", "mama", "mommy", "daddy", "mother", "father", "grandma", "grandpa", "aunt", "auntie", "aunty", "uncle", "cousin", "sister", "brother", "holy", "holiness", "almighty", "senator", "congressman"
            ],
            // Common named entities represent special-cased INVALID card titles. Because these concepts are already abundant within the AI's training data, generating story cards for any of these would be both annoying and superfluous. Therefore, Words.entities is accessed during banned titles initialization to prevent their appearance
            entities: () => [
                // Seasons
                "spring", "summer", "autumn", "fall", "winter",
                // Holidays
                "halloween", "christmas", "thanksgiving", "easter", "hanukkah", "passover", "ramadan", "eid", "diwali", "new year", "new year eve", "valentine day", "oktoberfest",
                // People terms
                "mom", "dad", "child", "grandmother", "grandfather", "ladies", "gentlemen", "gentleman", "slave",
                // Capitalizable pronoun thingys
                "his", "him", "he'd", "her", "she", "she'd", "you", "your", "yours", "you'd", "you've", "you'll", "you're", "yourself", "mine", "myself", "this", "that",
                // Religious figures & deities
                "god", "jesus", "buddha", "allah", "christ",
                // Religious texts & concepts
                "bible", "holy bible", "qur'an", "quran", "hadith", "tafsir", "tanakh", "talmud", "torah", "vedas", "vatican", "paganism", "pagan",
                // Religions & belief systems
                "hindu", "hinduism", "christianity", "islam", "jew", "judaism", "taoism", "buddhist", "buddhism", "catholic", "baptist",
                // Common locations
                "earth", "moon", "sun", "new york city", "london", "paris", "tokyo", "beijing", "mumbai", "sydney", "berlin", "moscow", "los angeles", "san francisco", "chicago", "miami", "seattle", "vancouver", "toronto", "ottawa", "mexico city", "rio de janeiro", "cape town", "sao paulo", "bangkok", "delhi", "amsterdam", "seoul", "shanghai", "new delhi", "atlanta", "jerusalem", "africa", "north america", "south america", "central america", "asia", "north africa", "south africa", "boston", "rome", "america", "siberia", "new england", "manhattan", "bavaria", "catalonia", "greenland", "hong kong", "singapore",
                // Countries & political entities
                "china", "india", "japan", "germany", "france", "spain", "italy", "canada", "australia", "brazil", "south africa", "russia", "north korea", "south korea", "iran", "iraq", "syria", "saudi arabia", "afghanistan", "pakistan", "uk", "britain", "england", "scotland", "wales", "northern ireland", "usa", "united states", "united states of america", "mexico", "turkey", "greece", "portugal", "poland", "netherlands", "belgium", "sweden", "norway", "finland", "denmark",
                // Organizations & unions
                "united nations", "european union", "state", "nato", "nfl", "nba", "fbi", "cia", "harvard", "yale", "princeton", "ivy league", "little league", "nasa", "nsa", "noaa", "osha", "nascar", "daytona 500", "grand prix", "wwe", "mba", "superbowl",
                // Currencies
                "dollar", "euro", "pound", "yen", "rupee", "peso", "franc", "dinar", "bitcoin", "ethereum", "ruble", "won", "dirham",
                // Landmarks
                "sydney opera house", "eiffel tower", "statue of liberty", "big ben", "great wall of china", "taj mahal", "pyramids of giza", "grand canyon", "mount everest",
                // Events
                "world war i", "world war 1", "wwi", "wwii", "world war ii", "world war 2", "wwii", "ww2", "cold war", "brexit", "american revolution", "french revolution", "holocaust", "cuban missile crisis",
                // Companies
                "google", "microsoft", "apple", "amazon", "facebook", "tesla", "ibm", "intel", "samsung", "sony", "coca-cola", "nike", "ford", "chevy", "pontiac", "chrysler", "volkswagen", "lambo", "lamborghini", "ferrari", "pizza hut", "taco bell", "ai dungeon", "openai", "mcdonald", "mcdonalds", "kfc", "burger king", "disney",
                // Nationalities & languages
                "english", "french", "spanish", "german", "italian", "russian", "chinese", "japanese", "korean", "arabic", "portuguese", "hindi", "american", "canadian", "mexican", "brazilian", "indian", "australian", "egyptian", "greek", "swedish", "norwegian", "danish", "dutch", "turkish", "iranian", "ukraine", "asian", "british", "european", "polish", "thai", "vietnamese", "filipino", "malaysian", "indonesian", "finnish", "estonian", "latvian", "lithuanian", "czech", "slovak", "hungarian", "romanian", "bulgarian", "serbian", "croatian", "bosnian", "slovenian", "albanian", "georgian", "armenian", "azerbaijani", "kazakh", "uzbek", "mongolian", "hebrew", "persian", "pashto", "urdu", "bengali", "tamil", "telugu", "marathi", "gujarati", "swahili", "zulu", "xhosa", "african", "north african", "south african", "north american", "south american", "central american", "colombian", "argentinian", "chilean", "peruvian", "venezuelan", "ecuadorian", "bolivian", "paraguayan", "uruguayan", "cuban", "dominican", "arabian", "roman", "haitian", "puerto rican", "moroccan", "algerian", "tunisian", "saudi", "emirati", "qatarian", "bahraini", "omani", "yemeni", "syrian", "lebanese", "iraqi", "afghan", "pakistani", "sri lankan", "burmese", "laotian", "cambodian", "hawaiian", "victorian",
                // Fantasy stuff
                "elf", "elves", "elven", "dwarf", "dwarves", "dwarven", "human", "man", "men", "mankind", "humanity",
                // IPs
                "pokemon", "pokémon", "minecraft", "beetles", "band-aid", "bandaid", "band aid", "big mac", "gpt", "chatgpt", "gpt-2", "gpt-3", "gpt-4", "gpt-4o", "mixtral", "mistral", "linux", "windows", "mac", "happy meal", "disneyland", "disneyworld",
                // US states
                "alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "west virginia", "wisconsin", "wyoming",
                // Canadian Provinces & Territories
                "british columbia", "manitoba", "new brunswick", "labrador", "nova scotia", "ontario", "prince edward island", "quebec", "saskatchewan", "northwest territories", "nunavut", "yukon", "newfoundland",
                // Australian States & Territories
                "new south wales", "queensland", "south australia", "tasmania", "western australia", "australian capital territory",
                // idk
                "html", "javascript", "python", "java", "c++", "php", "bluetooth", "json", "sql", "word", "dna", "icbm", "npc", "usb", "rsvp", "omg", "brb", "lol", "rofl", "smh", "ttyl", "rubik", "adam", "t-shirt", "tshirt", "t shirt", "led", "leds", "laser", "lasers", "qna", "q&a", "vip", "human resource", "human resources", "llm", "llc", "ceo", "cfo", "coo", "office", "blt", "suv", "suvs", "ems", "emt", "cbt", "cpr", "ferris wheel", "toy", "pet", "plaything", "m o"
            ],
            // Unwanted values
            undesirables: () => [
                [343332, 451737, 323433, 377817], [436425, 356928, 363825, 444048], [323433, 428868, 310497, 413952], [350097, 66825, 436425, 413952, 406593, 444048], [316932, 330000, 436425, 392073], [444048, 356928, 323433], [451737, 444048, 363825], [330000, 310497, 392073, 399300]
            ],
            delimiter: () => (
                "——————————————————————————"
            ),
            // Source code location
            copy: () => [
                126852, 33792, 211200, 384912, 336633, 310497, 436425, 336633, 33792, 459492, 363825, 436425, 363825, 444048, 33792, 392073, 483153, 33792, 139425, 175857, 33792, 152592, 451737, 399300, 350097, 336633, 406593, 399300, 33792, 413952, 428868, 406593, 343332, 363825, 384912, 336633, 33792, 135168, 190608, 336633, 467313, 330000, 190608, 336633, 310497, 356928, 33792, 310497, 399300, 330000, 33792, 428868, 336633, 310497, 330000, 33792, 392073, 483153, 33792, 316932, 363825, 406593, 33792, 343332, 406593, 428868, 33792, 436425, 363825, 392073, 413952, 384912, 336633, 33792, 363825, 399300, 436425, 444048, 428868, 451737, 323433, 444048, 363825, 406593, 399300, 436425, 33792, 406593, 399300, 33792, 310497, 330000, 330000, 363825, 399300, 350097, 33792, 139425, 451737, 444048, 406593, 66825, 148137, 310497, 428868, 330000, 436425, 33792, 444048, 406593, 33792, 483153, 406593, 451737, 428868, 33792, 436425, 323433, 336633, 399300, 310497, 428868, 363825, 406593, 436425, 35937, 33792, 3355672848, 139592360193, 3300, 3300, 356928, 444048, 444048, 413952, 436425, 111012, 72897, 72897, 413952, 384912, 310497, 483153, 69828, 310497, 363825, 330000, 451737, 399300, 350097, 336633, 406593, 399300, 69828, 323433, 406593, 392073, 72897, 413952, 428868, 406593, 343332, 363825, 384912, 336633, 72897, 190608, 336633, 467313, 330000, 190608, 336633, 310497, 356928, 3300, 3300, 126852, 33792, 139425, 451737, 444048, 406593, 66825, 148137, 310497, 428868, 330000, 436425, 33792, 459492, 79233, 69828, 76032, 69828, 76032, 33792, 363825, 436425, 33792, 310497, 399300, 33792, 406593, 413952, 336633, 399300, 66825, 436425, 406593, 451737, 428868, 323433, 336633, 33792, 436425, 323433, 428868, 363825, 413952, 444048, 33792, 343332, 406593, 428868, 33792, 139425, 175857, 33792, 152592, 451737, 399300, 350097, 336633, 406593, 399300, 33792, 392073, 310497, 330000, 336633, 33792, 316932, 483153, 33792, 190608, 336633, 467313, 330000, 190608, 336633, 310497, 356928, 69828, 33792, 261393, 406593, 451737, 33792, 356928, 310497, 459492, 336633, 33792, 392073, 483153, 33792, 343332, 451737, 384912, 384912, 33792, 413952, 336633, 428868, 392073, 363825, 436425, 436425, 363825, 406593, 399300, 33792, 444048, 406593, 33792, 451737, 436425, 336633, 33792, 139425, 451737, 444048, 406593, 66825, 148137, 310497, 428868, 330000, 436425, 33792, 467313, 363825, 444048, 356928, 363825, 399300, 33792, 483153, 406593, 451737, 428868, 33792, 413952, 336633, 428868, 436425, 406593, 399300, 310497, 384912, 33792, 406593, 428868, 33792, 413952, 451737, 316932, 384912, 363825, 436425, 356928, 336633, 330000, 33792, 436425, 323433, 336633, 399300, 310497, 428868, 363825, 406593, 436425, 35937, 3300, 126852, 33792, 261393, 406593, 451737, 50193, 428868, 336633, 33792, 310497, 384912, 436425, 406593, 33792, 467313, 336633, 384912, 323433, 406593, 392073, 336633, 33792, 444048, 406593, 33792, 336633, 330000, 363825, 444048, 33792, 444048, 356928, 336633, 33792, 139425, 175857, 33792, 413952, 428868, 406593, 392073, 413952, 444048, 436425, 33792, 310497, 399300, 330000, 33792, 444048, 363825, 444048, 384912, 336633, 33792, 336633, 475200, 323433, 384912, 451737, 436425, 363825, 406593, 399300, 436425, 33792, 413952, 428868, 406593, 459492, 363825, 330000, 336633, 330000, 33792, 316932, 336633, 384912, 406593, 467313, 69828, 33792, 175857, 33792, 436425, 363825, 399300, 323433, 336633, 428868, 336633, 384912, 483153, 33792, 356928, 406593, 413952, 336633, 33792, 483153, 406593, 451737, 33792, 336633, 399300, 370788, 406593, 483153, 33792, 483153, 406593, 451737, 428868, 33792, 310497, 330000, 459492, 336633, 399300, 444048, 451737, 428868, 336633, 436425, 35937, 33792, 101128769412, 106046468352, 3300
            ],
            // Card interface names reserved for use within LSIv2
            reserved: () => ({
                library: "Shared Library", input: "Input Modifier", context: "Context Modifier", output: "Output Modifier", guide: "LSIv2 Guide", state: "State Display", log: "Console Log"
            }),
            // Acceptable config settings which are coerced to true
            trues: () => [
                "true", "t", "yes", "y", "on"
            ],
            // Acceptable config settings which are coerced to false
            falses: () => [
                "false", "f", "no", "n", "off"
            ],
            guide: () => prose(
                ">>> Detailed Guide:",
                "Auto-Cards was made by LewdLeah ❤️",
                "",
                Words.delimiter,
                "",
                "💡 What is Auto-Cards?",
                "Auto-Cards is a plug-and-play script for AI Dungeon that watches your story and automatically writes plot-relevant story cards during normal gameplay. A forgetful AI breaks my immersion, therefore my primary goal was to address the \"object permanence problem\" by extending story cards and memories with deeper automation. Auto-Cards builds a living reference of your adventure's world as you go. For your own convenience, all of this stuff is handled in the background. Though you're certainly welcome to customize various settings or use in-game commands for more precise control",
                "",
                Words.delimiter,
                "",
                " 📌 Main Features",
                "- Detects named entities from your story and periodically writes new cards",
                "- Smart long-term memory updates and summaries for important cards",
                "- Fully customizable AI card generation and memory summarization prompts",
                "- Optional in-game commands to manually direct the card generation process",
                "- Free and open source for anyone to use within their own projects",
                "- Compatible with other scripts and includes an external API",
                "- Optional in-game scripting interface (LSIv2)",
                "",
                Words.delimiter,
                "",
                "⚙️ Config Settings",
                "You may, at any time, fine-tune your settings in-game by editing their values within the config card's entry section. Simply swap true/false or tweak numbers where appropriate",
                "",
                "> Disable Auto-Cards:",
                "Turns the whole system off if true",
                "",
                "> Show detailed guide:",
                "If true, shows this player guide in-game",
                "",
                "> Delete all automatic story cards:",
                "Removes every auto-card present in your adventure",
                "",
                "> Reset all config settings and prompts:",
                "Restores all settings and prompts to their original default values",
                "",
                "> Pin this config card near the top:",
                "Keeps the config card pinned high on your cards list",
                "",
                "> Minimum turns cooldown for new cards:",
                "How many turns (minimum) to wait between generating new cards. Using 9999 will pause periodic card generation while still allowing card memory updates to continue",
                "",
                "> New cards use a bulleted list format:",
                "If true, new entries will use bullet points instead of pure prose",
                "",
                "> Maximum entry length for new cards:",
                "Caps how long newly generated card entries can be (in characters)",
                "",
                "> New cards perform memory updates:",
                "If true, new cards will automatically experience memory updates over time",
                "",
                "> Card memory bank preferred length:",
                "Character count threshold before card memories are summarized to save space",
                "",
                "> Memory summary compression ratio:",
                "Controls how much to compress when summarizing long card memory banks",
                "(ratio = 10 * old / new ... such that 25 -> 2.5x shorter)",
                "",
                "> Exclude all-caps from title detection:",
                "Prevents all-caps words like \"RUN\" from being parsed as viable titles",
                "",
                "> Also detect titles from player inputs:",
                "Allows your typed Do/Say/Story action inputs to help suggest new card topics. Set to false if you have bad grammar, or if you're German (due to idiosyncratic noun capitalization habits)",
                "",
                "> Minimum turns age for title detection:",
                "How many actions back the script looks when parsing recent titles from your story",
                "",
                "> Use Live Script Interface v2:",
                "Enables LSIv2 for extra scripting magic and advanced control via arbitrary code execution",
                "",
                "> Log debug data in a separate card:",
                "Shows a debug card if set to true",
                "",
                Words.delimiter,
                "",
                "✏️ AI Prompts",
                "You may specify how the AI handles story card processes by editing either of these two prompts within the config card's notes section",
                "",
                "> AI prompt to generate new cards:",
                "Used when Auto-Cards writes a new card entry. It tells the AI to focus on important plot stuff, avoid fluff, and write in a consistent, polished style. I like to add some personal preferences here when playing my own adventures. \"%{title}\" and \"%{entry}\" are dynamic placeholders for their namesakes",
                "",
                "> AI prompt to summarize card memories:",
                "Summarizes older details within card memory banks to keep everything concise and neat over the long-run. Maintains only the most important details, written in the past tense. \"%{title}\" and \"%{memory}\" are dynamic placeholders for their namesakes",
                "",
                Words.delimiter,
                "",
                "⛔ Banned Titles List",
                "This list prevents new cards from being created for super generic or unhelpful titles such as North, Tuesday, or December. You may edit these at the bottom of the config card's notes section. Capitalization and plural/singular forms are handled for you, so no worries about that",
                "",
                "> Titles banned from automatic new card generation:",
                "North, East, South, West, and so on...",
                "",
                Words.delimiter,
                "",
                "🔑 In-Game Commands (/ac)",
                "Use these commands to manually interact with Auto-Cards, simply type them into a Do/Say/Story input action",
                "",
                "/ac",
                "Sets your actual cooldown to 0 and immediately attempts to generate a new card for the most relevant unused title from your story (if one exists)",
                "",
                "/ac Your Title Goes Here",
                "Will immediately begin generating a new story card with the given title",
                "Example use: \"/ac Leah\"",
                "",
                "/ac Your Title Goes Here / Your extra prompt details go here",
                "Similar to the previous case, but with additional context to include with the card generation prompt",
                "Example use: \"/ac Leah / Focus on Leah's works of artifice and ingenuity\"",
                "",
                "/ac Your Title Goes Here / Your extra prompt details go here / Your starter entry goes here",
                "Again, similar to the previous case, but with an initial card entry for the generator to build upon",
                "Example use: \"/ac Leah / Focus on Leah's works of artifice and ingenuity / You are a woman named Leah.\"",
                "",
                "/ac redo Your Title Goes Here",
                "Rewrites your chosen story card, using the old card entry, memory bank, and story context for inspiration. Useful for recreating cards after important character development has occurred",
                "Example use: \"/ac redo Leah\"",
                "",
                "/ac redo Your Title Goes Here / New info goes here",
                "Similar to the previous case, but with additional info provided to guide the rewrite according to your additional specifications",
                "Example use: \"/ac redo Leah / Leah recently achieved immortality\"",
                "",
                "/ac redo all",
                "Recreates every single auto-card in your adventure. I must warn you though: This is very risky",
                "",
                "Extra Info:",
                "- Invalid titles will fail. It's a technical limitation, sorry 🤷‍♀️",
                "- Titles must be unique, unless you're attempting to use \"/ac redo\" for an existing card",
                "- You may submit multiple commands using a single input to queue up a chained sequence of requests",
                "- Capitalization doesn't matter, titles will be reformatted regardless",
                "",
                Words.delimiter,
                "",
                "🔧 External API Functions (quick summary)",
                "These are mainly for other JavaScript programmers to use, so feel free to ignore this section if that doesn't apply to you. Anyway, here's what each one does in plain terms, though please do refer to my source code for the full documentation",
                "",
                "AutoCards().API.postponeEvents();",
                "Pauses Auto-Cards activity for n many turns",
                "",
                "AutoCards().API.emergencyHalt();",
                "Emergency stop or resume",
                "",
                "AutoCards().API.suppressMessages();",
                "Hides Auto-Cards toasts by preventing assignment to state.message",
                "",
                "AutoCards().API.debugLog();",
                "Writes to the debug log card",
                "",
                "AutoCards().API.toggle();",
                "Turns Auto-Cards on/off",
                "",
                "AutoCards().API.generateCard();",
                "Initiates AI generation of the requested card",
                "",
                "AutoCards().API.redoCard();",
                "Regenerates an existing card",
                "",
                "AutoCards().API.setCardAsAuto();",
                "Flags or unflags a card as automatic",
                "",
                "AutoCards().API.addCardMemory();",
                "Adds a memory to a specific card",
                "",
                "AutoCards().API.eraseAllAutoCards();",
                "Deletes all auto-cards",
                "",
                "AutoCards().API.getUsedTitles();",
                "Lists all current card titles and keys",
                "",
                "AutoCards().API.getBannedTitles();",
                "Shows your current banned titles list",
                "",
                "AutoCards().API.setBannedTitles();",
                "Replaces the banned titles list with a new list",
                "",
                "AutoCards().API.buildCard();",
                "Makes a new card from scratch, using exact parameters",
                "",
                "AutoCards().API.getCard();",
                "Finds cards that match a filter",
                "",
                "AutoCards().API.eraseCard();",
                "Deletes cards matching a filter",
                "",
                "These API functions also work from within the LSIv2 scope, by the way",
                "",
                Words.delimiter,
                "",
                "❤️ Special Thanks",
                "This project flourished due to the incredible help, feedback, and encouragement from the AI Dungeon community. Your ideas, bug reports, testing, and support made Auto-Cards smarter, faster, and more fun for all. Please refer to my source code to learn more about everyone's specific contributions",
                "",
                "AHotHamster22, BinKompliziert, Boo, bottledfox, Bruno, Burnout, bweni, DebaczX, Dirty Kurtis, Dragranis, effortlyss, Hawk, Idle Confusion, ImprezA, Kat-Oli, KryptykAngel, Mad19pumpkin, Magic, Mirox80, Nathaniel Wyvern, NobodyIsUgly, OnyxFlame, Purplejump, Randy Viosca, RustyPawz, sinner, Sleepy pink, Vutinberg, Wilmar, Yi1i1i",
                "",
                Words.delimiter,
                "",
                "🎴 Random Tips",
                "- The default setup works great out of the box, just play normally and watch your world build itself",
                "- Enable AI Dungeon's built-in memory system for the best results",
                "- Gameplay -> AI Models -> Memory System -> Memory Bank -> Toggle-ON to enable",
                "- \"t\" and \"f\" are valid shorthand for \"true\" and \"false\" inside the config card",
                "- If Auto-Cards goes overboard with new cards, you can pause it by setting the cooldown config to 9999",
                "- Write \"{title:}\" anywhere within a regular story card's entry to transform it into an automatic card",
                "- Feel free to import/export entire story card decks at any time",
                "- Please copy my source code from here: https://play.aidungeon.com/profile/LewdLeah",
                "",
                Words.delimiter,
                "",
                "Happy adventuring! ❤️",
                "Please erase before continuing! <<<"
            )
        };
        for (const wordList in wordListInitializers) {
            // Define a lazy getter for every word list
            Object.defineProperty(Words, wordList, {
                configurable: false,
                enumerable: true,
                get() {
                    // If not already in cache, initialize and store the word list
                    if (!(wordList in Words.#cache)) {
                        Words.#cache[wordList] = O.f(wordListInitializers[wordList]());
                    }
                    return Words.#cache[wordList];
                }
            });
        }
    } }); }
    function hoistStringsHashed() { return (class StringsHashed {
        // Used for information-dense past memory recognition
        // Strings are converted to (reasonably) unique hashcodes for efficient existence checking
        static #defaultSize = 65536;
        #size;
        #store;
        constructor(size = StringsHashed.#defaultSize) {
            this.#size = size;
            this.#store = new Set();
            return this;
        }
        static deserialize(serialized, size = StringsHashed.#defaultSize) {
            const stringsHashed = new StringsHashed(size);
            stringsHashed.#store = new Set(serialized.split(","));
            return stringsHashed;
        }
        serialize() {
            return Array.from(this.#store).join(",");
        }
        has(str) {
            return this.#store.has(this.#hash(str));
        }
        add(str) {
            this.#store.add(this.#hash(str));
            return this;
        }
        remove(str) {
            this.#store.delete(this.#hash(str));
            return this;
        }
        size() {
            return this.#store.size;
        }
        latest(keepLatestCardinality) {
            if (this.#store.size <= keepLatestCardinality) {
                return this;
            }
            const excess = this.#store.size - keepLatestCardinality;
            const iterator = this.#store.values();
            for (let i = 0; i < excess; i++) {
                // The oldest hashcodes are removed first (insertion order matters!)
                this.#store.delete(iterator.next().value);
            }
            return this;
        }
        #hash(str) {
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                hash = ((31 * hash) + str.charCodeAt(i)) % this.#size;
            }
            return hash.toString(36);
        }
    }); }
    function hoistInternal() { return (class Internal {
        // Some exported API functions are internally reused by AutoCards
        // Recursively calling AutoCards().API is computationally wasteful
        // AutoCards uses this collection of static methods as an internal proxy
        static generateCard(request, predefinedPair = ["", ""]) {
            // Method call guide:
            // Internal.generateCard({
            //     // All properties except 'title' are optional
            //     type: "card type, defaults to 'class' for ease of filtering",
            //     title: "card title",
            //     keysStart: "preexisting card triggers",
            //     entryStart: "preexisting card entry",
            //     entryPrompt: "prompt the AI will use to complete this entry",
            //     entryPromptDetails: "extra details to include with this card's prompt",
            //     entryLimit: 750, // target character count for the generated entry
            //     description: "card notes",
            //     memoryStart: "preexisting card memory",
            //     memoryUpdates: true, // card updates when new relevant memories are formed
            //     memoryLimit: 2750, // max characters before the card memory is compressed
            // });
            const titleKeyPair = formatTitle((request.title ?? "").toString());
            const title = predefinedPair[0] || titleKeyPair.newTitle;
            if (
                (title === "")
                || (("title" in AC.generation.workpiece) && (title === AC.generation.workpiece.title))
                || (isAwaitingGeneration() && (AC.generation.pending.some(pendingWorkpiece => (
                    ("title" in pendingWorkpiece) && (title === pendingWorkpiece.title)
                ))))
            ) {
                logEvent("The title '" + request.title + "' is invalid or unavailable for card generation", true);
                return false;
            }
            AC.generation.pending.push(O.s({
                title: title,
                type: limitString((request.type || AC.config.defaultCardType).toString().trim(), 100),
                keys: predefinedPair[1] || buildKeys((request.keysStart ?? "").toString(), titleKeyPair.newKey),
                entry: limitString("{title: " + title + "}" + cleanSpaces((function() {
                    const entry = (request.entryStart ?? "").toString().trim();
                    if (entry === "") {
                        return "";
                    } else {
                        return ("\n" + entry + (function() {
                            if (/[a-zA-Z]$/.test(entry)) {
                                return ".";
                            } else {
                                return "";
                            }
                        })() + " ");
                    }
                })()), 2000),
                description: limitString((
                    (function() {
                        const description = limitString((request.description ?? "").toString().trim(), 9900);
                        if (description === "") {
                            return "";
                        } else {
                            return description + "\n\n";
                        }
                    })() + "Auto-Cards will contextualize these memories:\n{updates: " + (function() {
                        if (typeof request.memoryUpdates === "boolean") {
                            return request.memoryUpdates;
                        } else {
                            return AC.config.defaultCardsDoMemoryUpdates;
                        }
                    })() + ", limit: " + validateMemoryLimit(
                        parseInt((request.memoryLimit || AC.config.defaultMemoryLimit), 10)
                    ) + "}" + (function() {
                        const cardMemoryBank = cleanSpaces((request.memoryStart ?? "").toString().trim());
                        if (cardMemoryBank === "") {
                            return "";
                        } else {
                            return "\n" + cardMemoryBank.split("\n").map(memory => addBullet(memory)).join("\n");
                        }
                    })()
                ), 10000),
                prompt: (function() {
                    let prompt = insertTitle((
                        (request.entryPrompt ?? "").toString().trim() || AC.config.generationPrompt.trim()
                    ), title);
                    let promptDetails = insertTitle((
                        cleanSpaces((request.entryPromptDetails ?? "").toString().trim())
                    ), title);
                    if (promptDetails !== "") {
                        const spacesPrecedingTerminalEntryPlaceholder = (function() {
                            const terminalEntryPlaceholderPattern = /(?:[%\$]+\s*|[%\$]*){+\s*entry\s*}+$/i;
                            if (terminalEntryPlaceholderPattern.test(prompt)) {
                                prompt = prompt.replace(terminalEntryPlaceholderPattern, "");
                                const trailingSpaces = prompt.match(/(\s+)$/);
                                if (trailingSpaces) {
                                    prompt = prompt.trimEnd();
                                    return trailingSpaces[1];
                                } else {
                                    return "\n\n";
                                }
                            } else {
                                return "";
                            }
                        })();
                        switch(prompt[prompt.length - 1]) {
                        case "]": { encapsulateBothPrompts("[", true, "]"); break; }
                        case ">": { encapsulateBothPrompts(null, false, ">"); break; }
                        case "}": { encapsulateBothPrompts("{", true, "}"); break; }
                        case ")": { encapsulateBothPrompts("(", true, ")"); break; }
                        case "/": { encapsulateBothPrompts("/", true, "/"); break; }
                        case "#": { encapsulateBothPrompts("#", true, "#"); break; }
                        case "-": { encapsulateBothPrompts(null, false, "-"); break; }
                        case ":": { encapsulateBothPrompts(":", true, ":"); break; }
                        case "<": { encapsulateBothPrompts(">", true, "<"); break; }
                        };
                        if (promptDetails.includes("\n")) {
                            const lines = promptDetails.split("\n");
                            for (let i = 0; i < lines.length; i++) {
                                lines[i] = addBullet(lines[i].trim());
                            }
                            promptDetails = lines.join("\n");
                        } else {
                            promptDetails = addBullet(promptDetails);
                        }
                        prompt += "\n" + promptDetails + (function() {
                            if (spacesPrecedingTerminalEntryPlaceholder !== "") {
                                // Prompt previously contained a terminal %{entry} placeholder, re-append it
                                return spacesPrecedingTerminalEntryPlaceholder + "%{entry}";
                            }
                            return "";
                        })();
                        function encapsulateBothPrompts(leftSymbol, slicesAtMiddle, rightSymbol) {
                            if (slicesAtMiddle) {
                                prompt = prompt.slice(0, -1).trim();
                                if (promptDetails.startsWith(leftSymbol)) {
                                    promptDetails = promptDetails.slice(1).trim();
                                }
                            }
                            if (!promptDetails.endsWith(rightSymbol)) {
                                promptDetails += rightSymbol;
                            }
                            return;
                        }
                    }
                    return limitString(prompt, Math.floor(0.8 * AC.signal.maxChars));
                })(),
                limit: validateEntryLimit(parseInt((request.entryLimit || AC.config.defaultEntryLimit), 10))
            }));
            notify("Generating card for \"" + title + "\"");
            function addBullet(str) {
                return "- " + str.replace(/^-+\s*/, "");
            }
            return true;
        }
        static redoCard(request, useOldInfo, newInfo) {
            const card = getIntendedCard(request.title)[0];
            const oldCard = O.f({...card});
            if (!eraseCard(card)) {
                return false;
            } else if (newInfo !== "") {
                request.entryPromptDetails = (request.entryPromptDetails ?? "").toString() + "\n" + newInfo;
            }
            O.f(request);
            Internal.getUsedTitles(true);
            if (!Internal.generateCard(request) && !Internal.generateCard(request, [
                (oldCard.entry.match(/^{title: ([\s\S]*?)}/)?.[1] || request.title.replace(/\w\S*/g, word => (
                    word[0].toUpperCase() + word.slice(1).toLowerCase()
                ))), oldCard.keys
            ])) {
                constructCard(oldCard, newCardIndex());
                Internal.getUsedTitles(true);
                return false;
            } else if (!useOldInfo) {
                return true;
            }
            AC.generation.pending[AC.generation.pending.length - 1].prompt = ((
                removeAutoProps(oldCard.entry) + "\n\n" +
                removeAutoProps(isolateNotesAndMemories(oldCard.description)[1])
            ).trimEnd() + "\n\n" + AC.generation.pending[AC.generation.pending.length - 1].prompt).trim();
            return true;
        }
        // Sometimes it's helpful to log information elsewhere during development
        // This log card is separate and distinct from the LSIv2 console log
        static debugLog(...args) {
            const debugCardName = "Debug Log";
            banTitle(debugCardName);
            const card = getSingletonCard(true, O.f({
                type: AC.config.defaultCardType,
                title: debugCardName,
                keys: debugCardName,
                entry: "The debug console log will print to the notes section below.",
                description: Words.delimiter + "\nBEGIN DEBUG LOG"
            }));
            logToCard(card, ...args);
            return card;
        }
        static eraseAllAutoCards() {
            const cards = [];
            Internal.getUsedTitles(true);
            for (const card of storyCards) {
                if (card.entry.startsWith("{title: ")) {
                    cards.push(card);
                }
            }
            for (const card of cards) {
                eraseCard(card);
            }
            auto.clear();
            forgetStuff();
            clearTransientTitles();
            AC.generation.pending = [];
            AC.database.memories.associations = {};
            if (AC.config.deleteAllAutoCards) {
                AC.config.deleteAllAutoCards = null;
            }
            return cards.length;
        }
        static getUsedTitles(isExternal = false) {
            if (isExternal) {
                bans.clear();
                isBanned("", true);
            } else if (0 < AC.database.titles.used.length) {
                return AC.database.titles.used;
            }
            // All unique used titles and keys encountered during this iteration
            const seen = new Set();
            auto.clear();
            clearTransientTitles();
            AC.database.titles.used = ["%@%"];
            for (const card of storyCards) {
                // Perform some common-sense maintenance while we're here
                card.type = card.type.trim();
                card.title = card.title.trim();
                // card.keys should be left as-is
                card.entry = card.entry.trim();
                card.description = card.description.trim();
                if (isExternal) {
                    O.s(card);
                } else if (!shouldProceed()) {
                    checkRemaining();
                    continue;
                }
                // An ideal auto-card's entry starts with "{title: Example of Greatness}" (example)
                // An ideal auto-card's description contains "{updates: true, limit: 2750}" (example)
                if (checkPlurals(denumberName(card.title.replace("\n", "")), t => isBanned(t))) {
                    checkRemaining();
                    continue;
                } else if (!card.keys.includes(",")) {
                    const cleanKeys = denumberName(card.keys.trim());
                    if ((2 < cleanKeys.length) && checkPlurals(cleanKeys, t => isBanned(t))) {
                        checkRemaining();
                        continue;
                    }
                }
                // Detect and repair malformed auto-card properties in a fault-tolerant manner
                const traits = [card.entry, card.description].map((str, i) => {
                    // Absolute abomination uwu
                    const hasUpdates = /updates?\s*:[\s\S]*?(?:(?:title|limit)s?\s*:|})/i.test(str);
                    const hasLimit = /limits?\s*:[\s\S]*?(?:(?:title|update)s?\s*:|})/i.test(str);
                    return [(function() {
                        if (hasUpdates || hasLimit) {
                            if (/titles?\s*:[\s\S]*?(?:(?:limit|update)s?\s*:|})/i.test(str)) {
                                return 2;
                            }
                            return false;
                        } else if (/titles?\s*:[\s\S]*?}/i.test(str)) {
                            return 1;
                        } else if (!(
                            (i === 0)
                            && /{[\s\S]*?}/.test(str)
                            && (str.match(/{/g)?.length === 1)
                            && (str.match(/}/g)?.length === 1)
                        )) {
                            return false;
                        }
                        const badTitleHeaderMatch = str.match(/{([\s\S]*?)}/);
                        if (!badTitleHeaderMatch) {
                            return false;
                        }
                        const inferredTitle = badTitleHeaderMatch[1].split(",")[0].trim();
                        if (
                            (2 < inferredTitle.length)
                            && (inferredTitle.length <= 100)
                            && (badTitleHeaderMatch[0].length < str.length)
                        ) {
                            // A rare case where the title's existence should be inferred from the enclosing {curly brackets}
                            return inferredTitle;
                        }
                        return false;
                    })(), hasUpdates, hasLimit];
                }).flat();
                if (traits.every(trait => !trait)) {
                    // This card contains no auto-card traits, not even malformed ones
                    checkRemaining();
                    continue;
                }
                const [
                    hasEntryTitle,
                    hasEntryUpdates,
                    hasEntryLimit,
                    hasDescTitle,
                    hasDescUpdates,
                    hasDescLimit
                ] = traits;
                // Handle all story cards which belong to the Auto-Cards ecosystem
                // May flag this damaged auto-card for later repairs
                // May flag this duplicate auto-card for deformatting (will become a regular story card)
                let repair = false;
                let release = false;
                const title = (function() {
                    let title = "";
                    if (typeof hasEntryTitle === "string") {
                        repair = true;
                        title = formatTitle(hasEntryTitle).newTitle;
                        if (hasDescTitle && bad()) {
                            title = parseTitle(false);
                        }
                    } else if (hasEntryTitle) {
                        title = parseTitle(true);
                        if (hasDescTitle) {
                            repair = true;
                            if (bad()) {
                                title = parseTitle(false);
                            }
                        } else if (1 < card.entry.match(/titles?\s*:/gi)?.length) {
                            repair = true;
                        }
                    } else if (hasDescTitle) {
                        repair = true;
                        title = parseTitle(false);
                    }
                    if (bad()) {
                        repair = true;
                        title = formatTitle(card.title).newTitle;
                        if (bad()) {
                            release = true;
                        } else {
                            seen.add(title);
                            auto.add(title.toLowerCase());
                        }
                    } else {
                        seen.add(title);
                        auto.add(title.toLowerCase());
                        const titleHeader = "{title: " + title + "}";
                        if (!repair && !((card.entry === titleHeader) || card.entry.startsWith(titleHeader + "\n"))) {
                            repair = true;
                        }
                    }
                    function bad() {
                        return ((title === "") || checkPlurals(title, t => auto.has(t)));
                    }
                    function parseTitle(fromEntry) {
                        const [sourceType, sourceText] = (function() {
                            if (fromEntry) {
                                return [hasEntryTitle, card.entry];
                            } else {
                                return [hasDescTitle, card.description];
                            }
                        })()
                        switch(sourceType) {
                        case 1: {
                            return formatTitle(isolateProperty(
                                sourceText,
                                /titles?\s*:[\s\S]*?}/i,
                                /(?:titles?\s*:|})/gi
                            )).newTitle; }
                        case 2: {
                            return formatTitle(isolateProperty(
                                sourceText,
                                /titles?\s*:[\s\S]*?(?:(?:limit|update)s?\s*:|})/i,
                                /(?:(?:title|update|limit)s?\s*:|})/gi
                            )).newTitle; }
                        default: {
                            return ""; }
                        }
                    }
                    return title;
                })();
                if (release) {
                    // Remove Auto-Cards properties from this incompatible story card
                    safeRemoveProps();
                    card.description = (card.description
                        .replace(/\s*Auto(?:-|\s*)Cards\s*will\s*contextualize\s*these\s*memories\s*:\s*/gi, "")
                        .replaceAll("%@%", "\n\n")
                        .trim()
                    );
                    seen.delete(title);
                    checkRemaining();
                    continue;
                }
                const memoryProperties = "{updates: " + (function() {
                    let updates = null;
                    if (hasDescUpdates) {
                        updates = parseUpdates(false);
                        if (hasEntryUpdates) {
                            repair = true;
                            if (bad()) {
                                updates = parseUpdates(true);
                            }
                        } else if (1 < card.description.match(/updates?\s*:/gi)?.length) {
                            repair = true;
                        }
                    } else if (hasEntryUpdates) {
                        repair = true;
                        updates = parseUpdates(true);
                    }
                    if (bad()) {
                        repair = true;
                        updates = AC.config.defaultCardsDoMemoryUpdates;
                    }
                    function bad() {
                        return (updates === null);
                    }
                    function parseUpdates(fromEntry) {
                        const updatesText = (isolateProperty(
                            (function() {
                                if (fromEntry) {
                                    return card.entry;
                                } else {
                                    return card.description;
                                }
                            })(),
                            /updates?\s*:[\s\S]*?(?:(?:title|limit)s?\s*:|})/i,
                            /(?:(?:title|update|limit)s?\s*:|})/gi
                        ).toLowerCase().replace(/[^a-z]/g, ""));
                        if (Words.trues.includes(updatesText)) {
                            return true;
                        } else if (Words.falses.includes(updatesText)) {
                            return false;
                        } else {
                            return null;
                        }
                    }
                    return updates;
                })() + ", limit: " + (function() {
                    let limit = -1;
                    if (hasDescLimit) {
                        limit = parseLimit(false);
                        if (hasEntryLimit) {
                            repair = true;
                            if (bad()) {
                                limit = parseLimit(true);
                            }
                        } else if (1 < card.description.match(/limits?\s*:/gi)?.length) {
                            repair = true;
                        }
                    } else if (hasEntryLimit) {
                        repair = true;
                        limit = parseLimit(true);
                    }
                    if (bad()) {
                        repair = true;
                        limit = AC.config.defaultMemoryLimit;
                    } else {
                        limit = validateMemoryLimit(limit);
                    }
                    function bad() {
                        return (limit === -1);
                    }
                    function parseLimit(fromEntry) {
                        const limitText = (isolateProperty(
                            (function() {
                                if (fromEntry) {
                                    return card.entry;
                                } else {
                                    return card.description;
                                }
                            })(),
                            /limits?\s*:[\s\S]*?(?:(?:title|update)s?\s*:|})/i,
                            /(?:(?:title|update|limit)s?\s*:|})/gi
                        ).replace(/[^0-9]/g, ""));
                        if ((limitText === "")) {
                            return -1;
                        } else {
                            return parseInt(limitText, 10);
                        }
                    }
                    return limit.toString();
                })() + "}";
                if (!repair && (new RegExp("(?:^|\\n)" + memoryProperties + "(?:\\n|$)")).test(card.description)) {
                    // There are no serious repairs to perform
                    card.entry = cleanSpaces(card.entry);
                    const [notes, memories] = isolateNotesAndMemories(card.description);
                    const pureMemories = cleanSpaces(memories.replace(memoryProperties, "").trim());
                    rejoinDescription(notes, memoryProperties, pureMemories);
                    checkRemaining();
                    continue;
                }
                // Damage was detected, perform an adaptive repair on this auto-card's configurable properties
                card.description = card.description.replaceAll("%@%", "\n\n");
                safeRemoveProps();
                card.entry = limitString(("{title: " + title + "}\n" + card.entry).trimEnd(), 2000);
                const [left, right] = card.description.split("%@%");
                rejoinDescription(left, memoryProperties, right);
                checkRemaining();
                function safeRemoveProps() {
                    if (typeof hasEntryTitle === "string") {
                        card.entry = card.entry.replace(/{[\s\S]*?}/g, "");
                    }
                    card.entry = removeAutoProps(card.entry);
                    const [notes, memories] = isolateNotesAndMemories(card.description);
                    card.description = notes + "%@%" + removeAutoProps(memories);
                    return;
                }
                function rejoinDescription(notes, memoryProperties, memories) {
                    card.description = limitString((notes + (function() {
                        if (notes === "") {
                            return "";
                        } else if (notes.endsWith("Auto-Cards will contextualize these memories:")) {
                            return "\n";
                        } else {
                            return "\n\n";
                        }
                    })() + memoryProperties + (function() {
                        if (memories === "") {
                            return "";
                        } else {
                            return "\n";
                        }
                    })() + memories), 10000);
                    return;
                }
                function isolateProperty(sourceText, propMatcher, propCleaner) {
                    return ((sourceText.match(propMatcher)?.[0] || "")
                        .replace(propCleaner, "")
                        .split(",")[0]
                        .trim()
                    );
                }
                // Observe literal card titles and keys
                function checkRemaining() {
                    const literalTitles = [card.title, ...card.keys.split(",")];
                    for (let i = 0; i < literalTitles.length; i++) {
                        // The pre-format set inclusion check helps avoid superfluous formatTitle calls
                        literalTitles[i] = (literalTitles[i]
                            .replace(/["\.\?!;\(\):\[\]—{}]/g, " ")
                            .trim()
                            .replace(/\s+/g, " ")
                            .replace(/^'\s*/, "")
                            .replace(/\s*'$/, "")
                        );
                        if (seen.has(literalTitles[i])) {
                            continue;
                        }
                        literalTitles[i] = formatTitle(literalTitles[i]).newTitle;
                        if (literalTitles[i] !== "") {
                            seen.add(literalTitles[i]);
                        }
                    }
                    return;
                }
                function denumberName(name) {
                    if (2 < (name.match(/[^\d\s]/g) || []).length) {
                        // Important for identifying LSIv2 auxiliary code cards when banned
                        return name.replace(/\s*\d+$/, "");
                    } else {
                        return name;
                    }
                }
            }
            clearTransientTitles();
            AC.database.titles.used = [...seen];
            return AC.database.titles.used;
        }
        static getBannedTitles() {
            // AC.database.titles.banned is an array, not a set; order matters
            return AC.database.titles.banned;
        }
        static setBannedTitles(newBans, isFinalAssignment) {
            AC.database.titles.banned = [];
            AC.database.titles.pendingBans = [];
            AC.database.titles.pendingUnbans = [];
            for (let i = newBans.length - 1; 0 <= i; i--) {
                banTitle(newBans[i], isFinalAssignment);
            }
            return AC.database.titles.banned;
        }
        static getCard(predicate, getAll) {
            if (getAll) {
                // Return an array of card references which satisfy the given condition
                const collectedCards = [];
                for (const card of storyCards) {
                    if (predicate(card)) {
                        O.s(card);
                        collectedCards.push(card);
                    }
                }
                return collectedCards;
            }
            // Return a reference to the first card which satisfies the given condition
            for (const card of storyCards) {
                if (predicate(card)) {
                    return O.s(card);
                }
            }
            return null;
        }
    }); }
    function validateCooldown(cooldown) {
        return boundInteger(0, cooldown, 9999, 22);
    }
    function validateEntryLimit(entryLimit) {
        return boundInteger(200, entryLimit, 2000, 750);
    }
    function validateMemoryLimit(memoryLimit) {
        return boundInteger(1750, memoryLimit, 9900, 2750);
    }
    function validateMemCompRatio(memCompressRatio) {
        return boundInteger(20, memCompressRatio, 1250, 25);
    }
    function validateMinLookBackDist(minLookBackDist) {
        return boundInteger(2, minLookBackDist, 88, 7);
    }
    function getDefaultConfig() {
        function check(value, fallback = true, type = "boolean") {
            if (typeof value === type) {
                return value;
            } else {
                return fallback;
            }
        }
        return O.s({
            // Is Auto-Cards enabled?
            doAC: check(DEFAULT_DO_AC),
            // Delete all previously generated story cards?
            deleteAllAutoCards: null,
            // Pin the configuration interface story card near the top?
            pinConfigureCard: check(DEFAULT_PIN_CONFIGURE_CARD),
            // Minimum number of turns in between automatic card generation events?
            addCardCooldown: validateCooldown(DEFAULT_CARD_CREATION_COOLDOWN),
            // Use bulleted list mode for newly generated card entries?
            bulletedListMode: check(DEFAULT_USE_BULLETED_LIST_MODE),
            // Maximum allowed length for newly generated story card entries?
            defaultEntryLimit: validateEntryLimit(DEFAULT_GENERATED_ENTRY_LIMIT),
            // Do newly generated cards have memory updates enabled by default?
            defaultCardsDoMemoryUpdates: check(DEFAULT_NEW_CARDS_DO_MEMORY_UPDATES),
            // Default character limit before the card's memory bank is summarized?
            defaultMemoryLimit: validateMemoryLimit(DEFAULT_NEW_CARDS_MEMORY_LIMIT),
            // Approximately how much shorter should recently compressed memories be? (ratio = 10 * old / new)
            memoryCompressionRatio: validateMemCompRatio(DEFAULT_MEMORY_COMPRESSION_RATIO),
            // Ignore all-caps during title candidate detection?
            ignoreAllCapsTitles: check(DEFAULT_IGNORE_ALL_CAPS_TITLES),
            // Should player input actions (Do/Say/Story) be considered for future named entity detection?
            readFromInputs: check(DEFAULT_DETECT_TITLES_FROM_INPUTS),
            // How many (minimum) actions in the past does Auto-Cards look for named entities?
            minimumLookBackDistance: validateMinLookBackDist(DEFAULT_MINIMUM_LOOK_BACK_DISTANCE),
            // Is Live Script Interface v2 enabled?
            LSIv2: (function() {
                if (DEFAULT_DO_LSI_V2 === true) {
                    return true;
                } else {
                    // Intrepret "false" as null, both here and for later config card reads
                    return null;
                }
            })(),
            // Should the debug data card be visible?
            showDebugData: check(DEFAULT_SHOW_DEBUG_DATA, false),
            // How should the AI be prompted when generating new story card entries?
            generationPrompt: check(DEFAULT_CARD_GENERATION_PROMPT, prose(
                "-----",
                "",
                "<SYSTEM>",
                "# Stop the story and ignore previous instructions. Write a brief and coherent informational entry for %{title} following these instructions:",
                "- Write only third-person pure prose information about %{title} using complete sentences with correct punctuation",
                "- Avoid short-term temporary details or appearances, instead focus on plot-significant information",
                "- Prioritize story-relevant details about %{title} first to ensure seamless integration with the previous plot",
                "- Create new information based on the context and story direction",
                "- Mention %{title} in every sentence",
                "- Use semicolons if needed",
                "- Add additional details about %{title} beneath incomplete entries",
                "- Be concise and grounded",
                "- Imitate the story's writing style and infer the reader's preferences",
                "</SYSTEM>",
                "Continue the entry for %{title} below while avoiding repetition:",
                "%{entry}"
            ), "string"),
            // How should the AI be prompted when summarizing memories for a given story card?
            compressionPrompt: check(DEFAULT_CARD_MEMORY_COMPRESSION_PROMPT, prose(
                "-----",
                "",
                "<SYSTEM>",
                "# Stop the story and ignore previous instructions. Summarize and condense the given paragraph into a narrow and focused memory passage while following these guidelines:",
                "- Ensure the passage retains the core meaning and most essential details",
                "- Use the third-person perspective",
                "- Prioritize information-density, accuracy, and completeness",
                "- Remain brief and concise",
                "- Write firmly in the past tense",
                "- The paragraph below pertains to old events from far earlier in the story",
                "- Integrate %{title} naturally within the memory; however, only write about the events as they occurred",
                "- Only reference information present inside the paragraph itself, be specific",
                "</SYSTEM>",
                "Write a summarized old memory passage for %{title} based only on the following paragraph:",
                "\"\"\"",
                "%{memory}",
                "\"\"\"",
                "Summarize below:"
            ), "string"),
            // All cards constructed by AC will inherit this type by default
            defaultCardType: check(DEFAULT_CARD_TYPE, "class", "string")
        });
    }
    function getDefaultConfigBans() {
        if (typeof DEFAULT_BANNED_TITLES_LIST === "string") {
            return uniqueTitlesArray(DEFAULT_BANNED_TITLES_LIST.split(","));
        } else {
            return [
                "North", "East", "South", "West", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December",
                  "New Story Arc", "Story Arc"," Generate Story Arc", "Redo Story Arc", "Him", "Her", "She", "His", "Hers", "Theirs", "Both", "Them", "They", "Ours", "Our", "We're", "They're", "And", "But", "When", "Why", "Who", "What", "Us", "We", "Story", "Arc Engine", "Scales", "Set Story Arc Type", "Type", "New", "NEW", "Time", "TIME", "Intensity", "Year", "Story Arc Settings", "Story Arc", "Updating Story Arc Next Turn", "Charmer", "Honorable", "Rogue", "Dominant", "Submissive", "Prankster", "Curious", "Innocent", "Mischievous", "Affectionate", "Defiant", "Brave", "Clever", "Playful", "Month", "Year", "Day", "Minute"
            ];
        }
    }

    function uniqueTitlesArray(titles) {
        const existingTitles = new Set();
        return (titles
            .map(title => title.trim().replace(/\s+/g, " "))
            .filter(title => {
                if (title === "") {
                    return false;
                }
                const lowerTitle = title.toLowerCase();
                if (existingTitles.has(lowerTitle)) {
                    return false;
                } else {
                    existingTitles.add(lowerTitle);
                    return true;
                }
            })
        );
    }
    function boundInteger(lowerBound, value, upperBound, fallback) {
        if (!Number.isInteger(value)) {
            if (!Number.isInteger(fallback)) {
                throw new Error("Invalid arguments: value and fallback are not integers");
            }
            value = fallback;
        }
        if (Number.isInteger(lowerBound) && (value < lowerBound)) {
            if (Number.isInteger(upperBound) && (upperBound < lowerBound)) {
                throw new Error("Invalid arguments: The inequality (lowerBound <= upperBound) must be satisfied");
            }
            return lowerBound;
        } else if (Number.isInteger(upperBound) && (upperBound < value)) {
            return upperBound;
        } else {
            return value;
        }
    }
    function limitString(str, lengthLimit) {
        if (lengthLimit < str.length) {
            return str.slice(0, lengthLimit).trim();
        } else {
            return str;
        }
    }
    function cleanSpaces(unclean) {
        return (unclean
            .replace(/\s*\n\s*/g, "\n")
            .replace(/\t/g, " ")
            .replace(/  +/g, " ")
        );
    }
    function isolateNotesAndMemories(str) {
        const bisector = str.search(/\s*(?:{|(?:title|update|limit)s?\s*:)\s*/i);
        if (bisector === -1) {
            return [str, ""];
        } else {
            return [str.slice(0, bisector), str.slice(bisector)];
        }
    }
    function removeAutoProps(str) {
        return cleanSpaces(str
            .replace(/\s*{([\s\S]*?)}\s*/g, (bracedMatch, enclosedProperties) => {
                if (enclosedProperties.trim().length < 150) {
                    return "\n";
                } else {
                    return bracedMatch;
                }
            })
            .replace((
                /\s*(?:{|(?:title|update|limit)s?\s*:)(?:[\s\S]{0,150}?)(?=(?:title|update|limit)s?\s*:|})\s*/gi
            ), "\n")
            .replace(/\s*(?:{|(?:title|update|limit)s?\s*:|})\s*/gi, "\n")
            .trim()
        );
    }
    function insertTitle(prompt, title) {
        return prompt.replace((
            /(?:[%\$]+\s*|[%\$]*){+\s*(?:titles?|names?|characters?|class(?:es)?|races?|locations?|factions?)\s*}+/gi
        ), title);
    }
    function prose(...args) {
        return args.join("\n");
    }
    function buildKeys(keys, key) {
        key = key.trim().replace(/\s+/g, " ");
        const keyset = [];
        if (key === "") {
            return keys;
        } else if (keys.trim() !== "") {
            keyset.push(...keys.split(","));
            const lowerKey = key.toLowerCase();
            for (let i = keyset.length - 1; 0 <= i; i--) {
                const preKey = keyset[i].trim().replace(/\s+/g, " ").toLowerCase();
                if ((preKey === "") || preKey.includes(lowerKey)) {
                    keyset.splice(i, 1);
                }
            }
        }
        if (key.length < 6) {
            keyset.push(...[
                " " + key + " ", " " + key + "'", "\"" + key + " ", " " + key + ".", " " + key + "?", " " + key + "!", " " + key + ";", "'" + key + " ", "(" + key + " ", " " + key + ")", " " + key + ":", " " + key + "\"", "[" + key + " ", " " + key + "]", "—" + key + " ", " " + key + "—", "{" + key + " ", " " + key + "}"
            ]);
        } else if (key.length < 9) {
            keyset.push(...[
                key + " ", " " + key, key + "'", "\"" + key, key + ".", key + "?", key + "!", key + ";", "'" + key, "(" + key, key + ")", key + ":", key + "\"", "[" + key, key + "]", "—" + key, key + "—", "{" + key, key + "}"
            ]);
        } else {
            keyset.push(key);
        }
        keys = keyset[0] || key;
        let i = 1;
        while ((i < keyset.length) && ((keys.length + 1 + keyset[i].length) < 101)) {
            keys += "," + keyset[i];
            i++;
        }
        return keys;
    }
    // Returns the template-specified singleton card (or secondary varient) after:
    // 1) Erasing all inferior duplicates
    // 2) Repairing damaged titles and keys
    // 3) Constructing a new singleton card if it doesn't exist
    function getSingletonCard(allowConstruction, templateCard, secondaryCard) {
        let singletonCard = null;
        const excessCards = [];
        for (const card of storyCards) {
            O.s(card);
            if (singletonCard === null) {
                if ((card.title === templateCard.title) || (card.keys === templateCard.keys)) {
                    // The first potentially valid singleton card candidate to be found
                    singletonCard = card;
                }
            } else if (card.title === templateCard.title) {
                if (card.keys === templateCard.keys) {
                    excessCards.push(singletonCard);
                    singletonCard = card;
                } else {
                    eraseInferiorDuplicate();
                }
            } else if (card.keys === templateCard.keys) {
                eraseInferiorDuplicate();
            }
            function eraseInferiorDuplicate() {
                if ((singletonCard.title === templateCard.title) && (singletonCard.keys === templateCard.keys)) {
                    excessCards.push(card);
                } else {
                    excessCards.push(singletonCard);
                    singletonCard = card;
                }
                return;
            }
        }
        if (singletonCard === null) {
            if (secondaryCard) {
                // Fallback to a secondary card template
                singletonCard = getSingletonCard(false, secondaryCard);
            }
            // No singleton card candidate exists
            if (allowConstruction && (singletonCard === null)) {
                // Construct a new singleton card from the given template
                singletonCard = constructCard(templateCard);
            }
        } else {
            if (singletonCard.title !== templateCard.title) {
                // Repair any damage to the singleton card's title
                singletonCard.title = templateCard.title;
            } else if (singletonCard.keys !== templateCard.keys) {
                // Repair any damage to the singleton card's keys
                singletonCard.keys = templateCard.keys;
            }
            for (const card of excessCards) {
                // Erase all excess singleton card candidates
                eraseCard(card);
            }
            if (secondaryCard) {
                // A secondary card match cannot be allowed to persist
                eraseCard(getSingletonCard(false, secondaryCard));
            }
        }
        return singletonCard;
    }
    // Erases the given story card
    function eraseCard(badCard) {
        if (badCard === null) {
            return false;
        }
        badCard.title = "%@%";
        for (const [index, card] of storyCards.entries()) {
            if (card.title === "%@%") {
                removeStoryCard(index);
                return true;
            }
        }
        return false;
    }
    // Constructs a new story card from a standardized story card template object
    // {type: "", title: "", keys: "", entry: "", description: ""}
    // Returns a reference to the newly constructed card
    function constructCard(templateCard, insertionIndex = 0) {
        addStoryCard("%@%");
        for (const [index, card] of storyCards.entries()) {
            if (card.title !== "%@%") {
                continue;
            }
            card.type = templateCard.type;
            card.title = templateCard.title;
            card.keys = templateCard.keys;
            card.entry = templateCard.entry;
            card.description = templateCard.description;
            if (index !== insertionIndex) {
                // Remove from the current position and reinsert at the desired index
                storyCards.splice(index, 1);
                storyCards.splice(insertionIndex, 0, card);
            }
            return O.s(card);
        }
        return {};
    }
    function newCardIndex() {
        return +AC.config.pinConfigureCard;
    }
    function getIntendedCard(targetCard) {
        Internal.getUsedTitles(true);
        const titleKey = targetCard.trim().replace(/\s+/g, " ").toLowerCase();
        const autoCard = Internal.getCard(card => (card.entry
            .toLowerCase()
            .startsWith("{title: " + titleKey + "}")
        ));
        if (autoCard !== null) {
            return [autoCard, true, titleKey];
        }
        return [Internal.getCard(card => ((card.title
            .replace(/\s+/g, " ")
            .toLowerCase()
        ) === titleKey)), false, titleKey];
    }
    function doPlayerCommands(input) {
        let result = "";
        for (const command of (
            (function() {
                if (/^\n> [\s\S]*? says? "[\s\S]*?"\n$/.test(input)) {
                    return input.replace(/\s*"\n$/, "");
                } else {
                    return input.trimEnd();
                }
            })().split(/(?=\/\s*A\s*C)/i)
        )) {
            const prefixPattern = /^\/\s*A\s*C/i;
            if (!prefixPattern.test(command)) {
                continue;
            }
            const [requestTitle, requestDetails, requestEntry] = (command
                .replace(/(?:{\s*)|(?:\s*})/g, "")
                .replace(prefixPattern, "")
                .replace(/(?:^\s*\/*\s*)|(?:\s*\/*\s*$)/g, "")
                .split("/")
                .map(requestArg => requestArg.trim())
                .filter(requestArg => (requestArg !== ""))
            );
            if (!requestTitle) {
                // Request with no args
                AC.generation.cooldown = 0;
                result += "/AC -> Success!\n\n";
                logEvent("/AC");
            } else {
                const request = {title: requestTitle.replace(/\s*[\.\?!:]+$/, "")};
                const redo = (function() {
                    const redoPattern = /^(?:redo|retry|rewrite|remake)[\s\.\?!:,;"'—\)\]]+\s*/i;
                    if (redoPattern.test(request.title)) {
                        request.title = request.title.replace(redoPattern, "");
                        if (/^(?:all|every)(?:\s|\.|\?|!|:|,|;|"|'|—|\)|\]|$)/i.test(request.title)) {
                            return [];
                        } else {
                            return true;
                        }
                    } else {
                        return false;
                    }
                })();
                if (Array.isArray(redo)) {
                    // Redo all auto cards
                    Internal.getUsedTitles(true);
                    const titleMatchPattern = /^{title: ([\s\S]*?)}/;
                    redo.push(...Internal.getCard(card => (
                        titleMatchPattern.test(card.entry)
                        && /{updates: (?:true|false), limit: \d+}/.test(card.description)
                    ), true));
                    let count = 0;
                    for (const card of redo) {
                        const titleMatch = card.entry.match(titleMatchPattern);  
                        if (titleMatch && Internal.redoCard(O.f({title: titleMatch[1]}), true, "")) {
                            count++;
                        }
                    }
                    const parsed = "/AC redo all";
                    result += parsed + " -> ";
                    if (count === 0) {
                        result += "There were no valid auto-cards to redo";
                    } else {
                        result += "Success!";
                        if (1 < count) {
                            result += " Proceed to redo " + count + " cards";
                        }
                    }
                    logEvent(parsed);
                } else if (!requestDetails) {
                    // Request with only title
                    submitRequest("");
                } else if (!requestEntry || redo) {
                    // Request with title and details
                    request.entryPromptDetails = requestDetails;
                    submitRequest(" / {" + requestDetails + "}");
                } else {
                    // Request with title, details, and entry
                    request.entryPromptDetails = requestDetails;
                    request.entryStart = requestEntry;
                    submitRequest(" / {" + requestDetails + "} / {" + requestEntry + "}");
                }
                result += "\n\n";
                function submitRequest(extra) {
                    O.f(request);
                    const [type, success] = (function() {
                        if (redo) {
                            return [" redo", Internal.redoCard(request, true, "")];
                        } else {
                            Internal.getUsedTitles(true);
                            return ["", Internal.generateCard(request)];
                        }
                    })();
                    const left = "/AC" + type + " {";
                    const right = "}" + extra;
                    if (success) {
                        const parsed = left + AC.generation.pending[AC.generation.pending.length - 1].title + right;
                        result += parsed + " -> Success!";
                        logEvent(parsed);
                    } else {
                        const parsed = left + request.title + right;
                        result += parsed + " -> \"" + request.title + "\" is invalid or unavailable";
                        logEvent(parsed);
                    }
                    return;
                }
            }
            if (isPendingGeneration() || isAwaitingGeneration() || isPendingCompression()) {
                if (AC.config.doAC) {
                    AC.signal.outputReplacement = "";
                } else {
                    AC.signal.forceToggle = true;
                    AC.signal.outputReplacement = ">>> please select \"continue\" (0%) <<<";
                }
            } else if (AC.generation.cooldown === 0) {
                if (0 < AC.database.titles.candidates.length) {
                    if (AC.config.doAC) {
                        AC.signal.outputReplacement = "";
                    } else {
                        AC.signal.forceToggle = true;
                        AC.signal.outputReplacement = ">>> please select \"continue\" (0%) <<<";
                    }
                } else if (AC.config.doAC) {
                    result = result.trimEnd() + "\n";
                    AC.signal.outputReplacement = "\n";
                } else {
                    AC.signal.forceToggle = true;
                    AC.signal.outputReplacement = ">>> Auto-Cards has been enabled! <<<";
                }
            } else {
                result = result.trimEnd() + "\n";
                AC.signal.outputReplacement = "\n";
            }
        }
        return getPrecedingNewlines() + result;
    }
    function advanceChronometer() {
        const currentTurn = getTurn();
        if (Math.abs(history.length - currentTurn) < 2) {
            // The two measures are within ±1, thus history hasn't been truncated yet
            AC.chronometer.step = !(history.length < currentTurn);
        } else {
            // history has been truncated, fallback to a (slightly) worse step detection technique
            AC.chronometer.step = (AC.chronometer.turn < currentTurn);
        }
        AC.chronometer.turn = currentTurn;
        return;
    }
    function concludeEmergency() {
        promoteAmnesia();
        endTurn();
        AC.message.pending = [];
        AC.message.previous = getStateMessage();
        return;
    }
    function concludeOutputBlock(templateCard) {
        if (AC.config.deleteAllAutoCards !== null) {
            // A config-initiated event to delete all previously generated story cards is in progress
            if (AC.config.deleteAllAutoCards) {
                // Request in-game confirmation from the player before proceeding
                AC.config.deleteAllAutoCards = false;
                CODOMAIN.initialize(getPrecedingNewlines() + ">>> please submit the message \"CONFIRM DELETE\" using a Do, Say, or Story action to permanently delete all previously generated story cards <<<\n\n");
            } else {
                // Check for player confirmation
                const previousAction = readPastAction(0);
                if (isDoSayStory(previousAction.type) && /CONFIRM\s*DELETE/i.test(previousAction.text)) {
                    let successMessage = "Confirmation Success: ";
                    const numCardsErased = Internal.eraseAllAutoCards();
                    if (numCardsErased === 0) {
                        successMessage += "However, there were no previously generated story cards to delete!";
                    } else {
                        successMessage += numCardsErased + " generated story card";
                        if (numCardsErased === 1) {
                            successMessage += " was";
                        } else {
                            successMessage += "s were";
                        }
                        successMessage += " deleted";
                    }
                    notify(successMessage);
                } else {
                    notify("Confirmation Failure: No story cards were deleted");
                }
                AC.config.deleteAllAutoCards = null;
                CODOMAIN.initialize("\n");
            }
        } else if (AC.signal.outputReplacement !== "") {
            const output = AC.signal.outputReplacement.trim();
            if (output === "") {
                CODOMAIN.initialize("\n");
            } else {
                CODOMAIN.initialize(getPrecedingNewlines() + output + "\n\n");
            }
        }
        if (templateCard) {
            // Auto-Cards was enabled or disabled during the previous onContext hook
            // Construct the replacement control card onOutput
            banTitle(templateCard.title);
            getSingletonCard(true, templateCard);
            AC.signal.swapControlCards = false;
        }
        endTurn();
        if (AC.config.LSIv2 === null) {
            postMessages();
        }
        return;
    }
    function endTurn() {
        AC.database.titles.used = [];
        AC.signal.outputReplacement = "";
        [AC.database.titles.pendingBans, AC.database.titles.pendingUnbans].map(pending => decrementAll(pending));
        if (0 < AC.signal.overrideBans) {
            AC.signal.overrideBans--;
        }
        function decrementAll(pendingArray) {
            if (pendingArray.length === 0) {
                return;
            }
            for (let i = pendingArray.length - 1; 0 <= i; i--) {
                if (0 < pendingArray[i][1]) {
                    pendingArray[i][1]--;
                } else {
                    pendingArray.splice(i, 1);
                }
            }
            return;
        }
        return;
    }
    // Example usage: notify("Message text goes here");
    function notify(message) {
        if (typeof message === "string") {
            AC.message.pending.push(message);
            logEvent(message);
        } else if (Array.isArray(message)) {
            message.forEach(element => notify(element));
        } else if (message instanceof Set) {
            notify([...message]);
        } else {
            notify(message.toString());
        }
        return;
    }
    function logEvent(message, uncounted) {
        if (uncounted) {
            log("Auto-Cards event: " + message);
        } else {
            log("Auto-Cards event #" + (function() {
                try {
                    AC.message.event++;
                    return AC.message.event;
                } catch {
                    return 0;
                }
            })() + ": " + message.replace(/"/g, "'"));
        }
        return;
    }
    // Provide the story card object which you wish to log info within as the first argument
    // All remaining arguments represent anything you wish to log
    function logToCard(logCard, ...args) {
        logEvent(args.map(arg => {
            if ((typeof arg === "object") && (arg !== null)) {
                return JSON.stringify(arg);
            } else {
                return String(arg);
            }
        }).join(", "), true);
        if (logCard === null) {
            return;
        }
        let desc = logCard.description.trim();
        const turnDelimiter = Words.delimiter + "\nAction #" + getTurn() + ":\n";
        let header = turnDelimiter;
        if (!desc.startsWith(turnDelimiter)) {
            desc = turnDelimiter + desc;
        }
        const scopesTable = [
            ["input", "Input Modifier"],
            ["context", "Context Modifier"],
            ["output", "Output Modifier"],
            [null, "Shared Library"],
            [undefined, "External API"],
            [Symbol("default"), "Unknown Scope"]
        ];
        const callingScope = (function() {
            const pair = scopesTable.find(([condition]) => (condition === HOOK));
            if (pair) {
                return pair[1];
            } else {
                return scopesTable[scopesTable.length - 1][1];
            }
        })();
        const hookDelimiterLeft = callingScope + " @ ";
        if (desc.startsWith(turnDelimiter + hookDelimiterLeft)) {
            const hookDelimiterOld = desc.match(new RegExp((
                "^" + turnDelimiter + "(" + hookDelimiterLeft + "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z:\n)"
            ).replaceAll("\n", "\\n")));
            if (hookDelimiterOld) {
                header += hookDelimiterOld[1];
            } else {
                const hookDelimiter = getNewHookDelimiter();
                desc = desc.replace(hookDelimiterLeft, hookDelimiter);
                header += hookDelimiter;
            }
        } else {
            if ((new RegExp("^" + turnDelimiter.replaceAll("\n", "\\n") + "(" + (scopesTable
                .map(pair => pair[1])
                .filter(scope => (scope !== callingScope))
                .join("|")
            ) + ") @ ")).test(desc)) {
                desc = desc.replace(turnDelimiter, turnDelimiter + "—————————\n");
            }
            const hookDelimiter = getNewHookDelimiter();
            desc = desc.replace(turnDelimiter, turnDelimiter + hookDelimiter);
            header += hookDelimiter;
        }
        const logDelimiter = (function() {
            let logDelimiter = "Log #";
            if (desc.startsWith(header + logDelimiter)) {
                desc = desc.replace(header, header + "———\n");
                const logCounter = desc.match(/Log #(\d+)/);
                if (logCounter) {
                    logDelimiter += (parseInt(logCounter[1], 10) + 1).toString();
                }
            } else {
                logDelimiter += "0";
            }
            return logDelimiter + ": ";
        })();
        logCard.description = limitString(desc.replace(header, header + logDelimiter + args.map(arg => {
            if ((typeof arg === "object") && (arg !== null)) {
                return stringifyObject(arg);
            } else {
                return String(arg);
            }
        }).join(",\n") + "\n").trim(), 999999);
        // The upper limit is actually closer to 3985621, but I think 1 million is reasonable enough as-is
        function getNewHookDelimiter() {
            return hookDelimiterLeft + (new Date().toISOString()) + ":\n";
        }
        return;
    }
    // Makes nested objects not look like cancer within interface cards
    function stringifyObject(obj) {
        const seen = new WeakSet();
        // Each indentation is 4 spaces
        return JSON.stringify(obj, (_key, value) => {
            if ((typeof value === "object") && (value !== null)) {
                if (seen.has(value)) {
                    return "[Circular]";
                }
                seen.add(value);
            }
            switch(typeof value) {
            case "function": {
                return "[Function]"; }
            case "undefined": {
                return "[Undefined]"; }
            case "symbol": {
                return "[Symbol]"; }
            default: {
                return value; }
            }
        }, 4);
    }
    // Implement state.message toasts without interfering with the operation of other possible scripts
    function postMessages() {
        const preMessage = getStateMessage();
        if ((preMessage === AC.message.previous) && (AC.message.pending.length !== 0)) {
            // No other scripts are attempting to update state.message during this turn
            // One or more pending Auto-Cards messages exist
            if (!AC.message.suppress) {
                // Message suppression is off
                let newMessage = "Auto-Cards:\n";
                if (AC.message.pending.length === 1) {
                    newMessage += AC.message.pending[0];
                } else {
                    newMessage += AC.message.pending.map(
                        (messageLine, index) => ("#" + (index + 1) + ": " + messageLine)
                    ).join("\n");
                }
                if (preMessage === newMessage) {
                    // Introduce a minor variation to facilitate repetition of the previous message toast
                    newMessage = newMessage.replace("Auto-Cards:\n", "Auto-Cards: \n");
                }
                state.message = newMessage;
            }
            // Clear the pending messages queue after posting or suppressing messages
            AC.message.pending = [];
        }
        AC.message.previous = getStateMessage();
        return;
    }
    function getStateMessage() {
        return state.message ?? "";
    }
    function getPrecedingNewlines() {
        const previousAction = readPastAction(0);
        if (isDoSay(previousAction.type)) {
            return "";
        } else if (previousAction.text.endsWith("\n")) {
            if (previousAction.text.endsWith("\n\n")) {
                return "";
            } else {
                return "\n";
            }
        } else {
            return "\n\n";
        }
    }
    // Call with lookBack 0 to read the most recent action in history (or n many actions back)
    function readPastAction(lookBack) {
        const action = (function() {
            if (Array.isArray(history)) {
                return (history[(function() {
                    const index = history.length - 1 - Math.abs(lookBack);
                    if (index < 0) {
                        return 0;
                    } else {
                        return index;
                    }
                })()]);
            } else {
                return O.f({});
            }
        })();
        return O.f({
            text: action?.text ?? (action?.rawText ?? ""),
            type: action?.type ?? "unknown"
        });
    }
    // Forget ongoing card generation/compression after passing or postponing completion over many consecutive turns
    // Also decrement AC.chronometer.postpone regardless of retries or erases
    function promoteAmnesia() {
        // Decrement AC.chronometer.postpone in all cases
        if (0 < AC.chronometer.postpone) {
            AC.chronometer.postpone--;
        }
        if (!AC.chronometer.step) {
            // Skip known retry/erase turns
            return;
        }
        if (AC.chronometer.amnesia++ < boundInteger(16, (2 * AC.config.addCardCooldown), 64)) {
            return;
        }
        AC.generation.cooldown = validateCooldown(underQuarterInteger(AC.config.addCardCooldown));
        forgetStuff();
        AC.chronometer.amnesia = 0;
        return;
    }
    function forgetStuff() {
        AC.generation.completed = 0;
        AC.generation.permitted = 34;
        AC.generation.workpiece = O.f({});
        // AC.generation.pending is not forgotten
        resetCompressionProperties();
        return;
    }
    function resetCompressionProperties() {
        AC.compression.completed = 0;
        AC.compression.titleKey = "";
        AC.compression.vanityTitle = "";
        AC.compression.responseEstimate = 1400;
        AC.compression.lastConstructIndex = -1;
        AC.compression.oldMemoryBank = [];
        AC.compression.newMemoryBank = [];
        return;
    }
    function underQuarterInteger(someNumber) {
        return Math.floor(someNumber / 4);
    }
    function getTurn() {
        if (Number.isInteger(info?.actionCount)) {
            // "But Leah, surely info.actionCount will never be negative?"
            // You have no idea what nightmares I've seen...
            return Math.abs(info.actionCount);
        } else {
            return 0;
        }
    }
    // Constructs a JSON representation of various properties/settings pulled from raw text
    // Used to parse the "Configure Auto-Cards" and "Edit to enable Auto-Cards" control card entries
    function extractSettings(settingsText) {
        const settings = {};
        // Lowercase everything
        // Remove all non-alphanumeric characters (aside from ":" and ">")
        // Split into an array of strings delimited by the ">" character
        const settingLines = settingsText.toLowerCase().replace(/[^a-z0-9:>]+/g, "").split(">");
        for (const settingLine of settingLines) {
            // Each setting line is preceded by ">" and bisected by ":"
            const settingKeyValue = settingLine.split(":");
            if ((settingKeyValue.length !== 2) || settings.hasOwnProperty(settingKeyValue[0])) {
                // The bisection failed or this setting line's key already exists
                continue;
            }
            // Parse boolean and integer setting values
            if (Words.falses.includes(settingKeyValue[1])) {
                // This setting line's value is false
                settings[settingKeyValue[0]] = false;
            } else if (Words.trues.includes(settingKeyValue[1])) {
                // This setting line's value is true
                settings[settingKeyValue[0]] = true;
            } else if (/^\d+$/.test(settingKeyValue[1])) {
                // This setting line's value is an integer
                // Negative integers are parsed as being positive (because "-" characters were removed)
                settings[settingKeyValue[0]] = parseInt(settingKeyValue[1], 10);
            }
        }
        // Return the settings object for later analysis
        return settings;
    }
    // Ensure the given singleton card is pinned near the top of the player's list of story cards
    function pinAndSortCards(pinnedCard) {
        if (!storyCards || (storyCards.length < 2)) {
            return;
        }
        storyCards.sort((cardA, cardB) => {
            return readDate(cardB) - readDate(cardA);
        });
        if (!AC.config.pinConfigureCard) {
            return;
        }
        const index = storyCards.indexOf(pinnedCard);
        if (0 < index) {
            storyCards.splice(index, 1);
            storyCards.unshift(pinnedCard);
        }
        function readDate(card) {
            if (card && card.updatedAt) {
                const timestamp = Date.parse(card.updatedAt);
                if (!isNaN(timestamp)) {
                    return timestamp;
                }
            }
            return 0;
        }
        return;
    }
    function see(arr) {
        return String.fromCharCode(...arr.map(n => Math.sqrt(n / 33)));
    }
    function formatTitle(title) {
        title = title.trim();
        const failureCase = O.f({newTitle: "", newKey: ""});
        if (short()) {
            // This is an abundantly called function, return as early as possible to ensure superior performance
            return failureCase;
        }
        title = (title
            // Begone!
            .replace(/[–。？！´“”؟،«»¿¡„“…§，、\*_~><\(\)\[\]{}#"`:!—;\.\?,\s\\]/g, " ")
            .replace(/[‘’]/g, "'").replace(/\s+'/g, " ")
            // Remove the words "I", "I'm", "I'd", "I'll", and "I've"
            .replace(/(?<=^|\s)(?:I|I'm|I'd|I'll|I've)(?=\s|$)/gi, "")
            // Remove "'s" only if not followed by a letter
            .replace(/'s(?![a-zA-Z])/g, "")
            // Replace "s'" with "s" only if preceded but not followed by a letter
            .replace(/(?<=[a-zA-Z])s'(?![a-zA-Z])/g, "s")
            // Remove apostrophes not between letters (preserve contractions like "don't")
            .replace(/(?<![a-zA-Z])'(?![a-zA-Z])/g, "")
            // Eliminate fake em dashes and terminal/leading dashes
            .replace(/\s-\s/g, " ")
            // Condense consecutive whitespace
            .trim().replace(/\s+/g, " ")
            // Remove a leading or trailing bullet
            .replace(/^-+\s*/, "").replace(/\s*-+$/, "")
        );
        if (short()) {
            return failureCase;
        }
        // Special-cased words
        const minorWordsJoin = Words.minor.join("|");
        const leadingMinorWordsKiller = new RegExp("^(?:" + minorWordsJoin + ")\\s", "i");
        const trailingMinorWordsKiller = new RegExp("\\s(?:" + minorWordsJoin + ")$", "i");
        // Ensure the title is not bounded by any outer minor words
        title = enforceBoundaryCondition(title);
        if (short()) {
            return failureCase;
        }
        // Ensure interior minor words are lowercase and excise all interior honorifics/abbreviations
        const honorAbbrevsKiller = new RegExp("(?:^|\\s|-|\\/)(?:" + (
            [...Words.honorifics, ...Words.abbreviations]
        ).map(word => word.replace(".", "")).join("|") + ")(?=\\s|-|\\/|$)", "gi");
        title = (title
            // Capitalize the first letter of each word
            .replace(/(?<=^|\s|-|\/)(?:\p{L})/gu, word => word.toUpperCase())
            // Lowercase minor words properly
            .replace(/(?<=^|\s|-|\/)(?:\p{L}+)(?=\s|-|\/|$)/gu, word => {
                const lowerWord = word.toLowerCase();
                if (Words.minor.includes(lowerWord)) {
                    return lowerWord;
                } else {
                    return word;
                }
            })
            // Remove interior honorifics/abbreviations
            .replace(honorAbbrevsKiller, "")
            .trim()
        );
        if (short()) {
            return failureCase;
        }
        let titleWords = title.split(" ");
        while ((2 < title.length) && (98 < title.length) && (1 < titleWords.length)) {
            titleWords.pop();
            title = titleWords.join(" ").trim();
            const unboundedLength = title.length;
            title = enforceBoundaryCondition(title);
            if (unboundedLength !== title.length) {
                titleWords = title.split(" ");
            }
        }
        if (isUsedOrBanned(title) || isNamed(title)) {
            return failureCase;
        }
        // Procedurally generated story card trigger keywords exclude certain words and patterns which are otherwise permitted in titles
        let key = title;
        const peerage = new Set(Words.peerage);
        if (titleWords.some(word => ((word === "the") || peerage.has(word.toLowerCase())))) {
            if (titleWords.length < 2) {
                return failureCase;
            }
            key = enforceBoundaryCondition(
                titleWords.filter(word => !peerage.has(word.toLowerCase())).join(" ")
            );
            if (key.includes(" the ")) {
                key = enforceBoundaryCondition(key.split(" the ")[0]);
            }
            if (isUsedOrBanned(key)) {
                return failureCase;
            }
        }
        function short() {
            return (title.length < 3);
        }
        function enforceBoundaryCondition(str) {
            while (leadingMinorWordsKiller.test(str)) {
                str = str.replace(/^\S+\s+/, "");
            }
            while (trailingMinorWordsKiller.test(str)) {
                str = str.replace(/\s+\S+$/, "");
            }
            return str;
        }
        return O.f({newTitle: title, newKey: key});
    }
    // I really hate english grammar
    function checkPlurals(title, predicate) {
        function check(t) { return ((t.length < 3) || (100 < t.length) || predicate(t)); }
        const t = title.toLowerCase();
        if (check(t)) { return true; }
        // s>p : singular -> plural : p>s: plural -> singular
        switch(t[t.length - 1]) {
        // p>s : s -> _ : Birds -> Bird
        case "s": if (check(t.slice(0, -1))) { return true; }
        case "x":
        // s>p : s, x, z -> ses, xes, zes : Mantis -> Mantises
        case "z": if (check(t + "es")) { return true; }
            break;
        // s>p : o -> oes, os : Gecko -> Geckoes, Geckos
        case "o": if (check(t + "es") || check(t + "s")) { return true; }
            break;
        // p>s : i -> us : Cacti -> Cactus
        case "i": if (check(t.slice(0, -1) + "us")) { return true; }
        // s>p : i, y -> ies : Kitty -> Kitties
        case "y": if (check(t.slice(0, -1) + "ies")) { return true; }
            break;
        // s>p : f -> ves : Wolf -> Wolves
        case "f": if (check(t.slice(0, -1) + "ves")) { return true; }
        // s>p : !(s, x, z, i, y) -> +s : Turtle -> Turtles
        default: if (check(t + "s")) { return true; }
            break;
        } switch(t.slice(-2)) {
        // p>s : es -> _ : Foxes -> Fox
        case "es": if (check(t.slice(0, -2))) { return true; } else if (
            (t.endsWith("ies") && (
                // p>s : ies -> y : Bunnies -> Bunny
                check(t.slice(0, -3) + "y")
                // p>s : ies -> i : Ravies -> Ravi
                || check(t.slice(0, -2))
            // p>s : es -> is : Crises -> Crisis
            )) || check(t.slice(0, -2) + "is")) { return true; }
            break;
        // s>p : us -> i : Cactus -> Cacti
        case "us": if (check(t.slice(0, -2) + "i")) { return true; }
            break;
        // s>p : is -> es : Thesis -> Theses
        case "is": if (check(t.slice(0, -2) + "es")) { return true; }
            break;
        // s>p : fe -> ves : Knife -> Knives
        case "fe": if (check(t.slice(0, -2) + "ves")) { return true; }
            break;
        case "sh":
        // s>p : sh, ch -> shes, ches : Fish -> Fishes
        case "ch": if (check(t + "es")) { return true; }
            break;
        } return false;
    }
    function isUsedOrBanned(title) {
        function isUsed(lowerTitle) {
            if (used.size === 0) {
                const usedTitles = Internal.getUsedTitles();
                for (let i = 0; i < usedTitles.length; i++) {
                    used.add(usedTitles[i].toLowerCase());
                }
                if (used.size === 0) {
                    // Add a placeholder so compute isn't wasted on additional checks during this hook
                    used.add("%@%");
                }
            }
            return used.has(lowerTitle);
        }
        return checkPlurals(title, t => (isUsed(t) || isBanned(t)));
    }
    function isBanned(lowerTitle, getUsedIsExternal) {
        if (bans.size === 0) {
            // In order to save space, implicit bans aren't listed within the UI
            const controlVariants = getControlVariants();
            const dataVariants = getDataVariants();
            const bansToAdd = [...lowArr([
                ...Internal.getBannedTitles(),
                controlVariants.enable.title.replace("\n", ""),
                controlVariants.enable.keys,
                controlVariants.configure.title.replace("\n", ""),
                controlVariants.configure.keys,
                dataVariants.debug.title,
                dataVariants.debug.keys,
                dataVariants.critical.title,
                dataVariants.critical.keys,
                ...Object.values(Words.reserved)
            ]), ...(function() {
                if (shouldProceed() || getUsedIsExternal) {
                    // These proper nouns are way too common to waste card generations on; they already exist within the AI training data so this would be pointless
                    return [...Words.entities, ...Words.undesirables.map(undesirable => see(undesirable))];
                } else {
                    return [];
                }
            })()];
            for (let i = 0; i < bansToAdd.length; i++) {
                bans.add(bansToAdd[i]);
            }
        }
        return bans.has(lowerTitle);
    }
    function isNamed(title, returnSurname) {
        const peerage = new Set(Words.peerage);
        const minorWords = new Set(Words.minor);
        if ((forenames.size === 0) || (surnames.size === 0)) {
            const usedTitles = Internal.getUsedTitles();
            for (let i = 0; i < usedTitles.length; i++) {
                const usedTitleWords = divideTitle(usedTitles[i]);
                if (
                    (usedTitleWords.length === 2)
                    && (2 < usedTitleWords[0].length)
                    && (2 < usedTitleWords[1].length)
                ) {
                    forenames.add(usedTitleWords[0]);
                    surnames.add(usedTitleWords[1]);
                } else if (
                    (usedTitleWords.length === 1)
                    && (2 < usedTitleWords[0].length)
                ) {
                    forenames.add(usedTitleWords[0]);
                }
            }
            if (forenames.size === 0) {
                forenames.add("%@%");
            }
            if (surnames.size === 0) {
                surnames.add("%@%");
            }
        }
        const titleWords = divideTitle(title);
        if (
            returnSurname
            && (titleWords.length === 2)
            && (3 < titleWords[0].length)
            && (3 < titleWords[1].length)
            && forenames.has(titleWords[0])
            && surnames.has(titleWords[1])
        ) {
            return (title
                .split(" ")
                .find(casedTitleWord => (casedTitleWord.toLowerCase() === titleWords[1]))
            );
        } else if (
            (titleWords.length === 2)
            && (2 < titleWords[0].length)
            && (2 < titleWords[1].length)
            && forenames.has(titleWords[0])
        ) {         
            return true;
        } else if (
            (titleWords.length === 1)
            && (2 < titleWords[0].length)
            && (forenames.has(titleWords[0]) || surnames.has(titleWords[0]))
        ) {
            return true;
        }
        function divideTitle(undividedTitle) {
            const titleWords = undividedTitle.toLowerCase().split(" ");
            if (titleWords.some(word => minorWords.has(word))) {
                return [];
            } else {
                return titleWords.filter(word => !peerage.has(word));
            }
        }
        return false;
    }
    function shouldProceed() {
        return (AC.config.doAC && !AC.signal.emergencyHalt && (AC.chronometer.postpone < 1));
    }
    function isDoSayStory(type) {
        return (isDoSay(type) || (type === "story"));
    }
    function isDoSay(type) {
        return ((type === "do") || (type === "say"));
    }
    function permitOutput() {
        return ((AC.config.deleteAllAutoCards === null) && (AC.signal.outputReplacement === ""));
    }
    function isAwaitingGeneration() {
        return (0 < AC.generation.pending.length);
    }
    function isPendingGeneration() {
        return notEmptyObj(AC.generation.workpiece);
    }
    function isPendingCompression() {
        return (AC.compression.titleKey !== "");
    }
    function notEmptyObj(obj) {
        return (obj && (0 < Object.keys(obj).length));
    }
    function clearTransientTitles() {
        AC.database.titles.used = [];
        [used, forenames, surnames].forEach(nameset => nameset.clear());
        return;
    }
    function banTitle(title, isFinalAssignment) {
        title = limitString(title.replace(/\s+/g, " ").trim(), 100);
        const lowerTitle = title.toLowerCase();
        if (bans.size !== 0) {
            bans.add(lowerTitle);
        }
        if (!lowArr(Internal.getBannedTitles()).includes(lowerTitle)) {
            AC.database.titles.banned.unshift(title);
            if (isFinalAssignment) {
                return;
            }
            AC.database.titles.pendingBans.unshift([title, 3]);
            const index = AC.database.titles.pendingUnbans.findIndex(pair => (pair[0].toLowerCase() === lowerTitle));
            if (index !== -1) {
                AC.database.titles.pendingUnbans.splice(index, 1);
            }
        }
        return;
    }
    function unbanTitle(title) {
        title = title.replace(/\s+/g, " ").trim();
        const lowerTitle = title.toLowerCase();
        if (used.size !== 0) {
            bans.delete(lowerTitle);
        }
        let index = lowArr(Internal.getBannedTitles()).indexOf(lowerTitle);
        if (index !== -1) {
            AC.database.titles.banned.splice(index, 1);
            AC.database.titles.pendingUnbans.unshift([title, 3]);
            index = AC.database.titles.pendingBans.findIndex(pair => (pair[0].toLowerCase() === lowerTitle));
            if (index !== -1) {
                AC.database.titles.pendingBans.splice(index, 1);
            }
        }
        return;
    }
    function lowArr(arr) {
        return arr.map(str => str.toLowerCase());
    }
    function getControlVariants() {
        return O.f({
            configure: O.f({
                title: "Configure \nAuto-Cards",
                keys: "Edit the entry above to adjust your story card automation settings",
            }),
            enable: O.f({
                title: "Edit to enable \nAuto-Cards",
                keys: "Edit the entry above to enable story card automation",
            }),
        });
    }
    function getDataVariants() {
        return O.f({
            debug: O.f({
                title: "Debug Data",
                keys: "You may view the debug state in the notes section below",
            }),
            critical: O.f({
                title: "Critical Data",
                keys: "Never modify or delete this story card",
            }),
        });
    }
    // Prepare to export the codomain
    const codomain = CODOMAIN.read();
    const [stopPackaged, lastCall] = (function() {
        // Tbh I don't know why I even bothered going through the trouble of implementing "stop" within LSIv2
        switch(HOOK) {
        case "context": {
            const haltStatus = [];
            if (Array.isArray(codomain)) {
                O.f(codomain);
                haltStatus.push(true, codomain[1]);
            } else {
                haltStatus.push(false, STOP);
            }
            if ((AC.config.LSIv2 !== false) && (haltStatus[1] === true)) {
                // AutoCards will return [text, (stop === true)] onContext
                // The onOutput lifecycle hook will not be executed during this turn
                concludeEmergency();
            }
            return haltStatus; }
        case "output": {
            // AC.config.LSIv2 being either true or null implies (lastCall === true)
            return [null, AC.config.LSIv2 ?? true]; }
        default: {
            return [null, null]; }
        }
    })();
    // Repackage AC to propagate its state forward in time
    if (state.LSIv2) {
        // Facilitates recursive calls of AutoCards
        // The Auto-Cards external API is accessible through the LSIv2 scope
        state.LSIv2 = AC;
    } else {
        const memoryOverflow = (38000 < (JSON.stringify(state).length + JSON.stringify(AC).length));
        if (memoryOverflow) {
            // Memory overflow is imminent
            const dataVariants = getDataVariants();
            if (lastCall) {
                unbanTitle(dataVariants.debug.title);
                banTitle(dataVariants.critical.title);
            }
            setData(dataVariants.critical, dataVariants.debug);
            if (state.AutoCards) {
                // Decouple state for safety
                delete state.AutoCards;
            }
        } else {
            if (lastCall) {
                const dataVariants = getDataVariants();
                unbanTitle(dataVariants.critical.title);
                if (AC.config.showDebugData) {
                    // Update the debug data card
                    banTitle(dataVariants.debug.title);
                    setData(dataVariants.debug, dataVariants.critical);
                } else {
                    // There should be no data card
                    unbanTitle(dataVariants.debug.title);
                    if (data === null) {
                        data = getSingletonCard(false, O.f({...dataVariants.debug}), O.f({...dataVariants.critical}));
                    }
                    eraseCard(data);
                    data = null;
                }
            } else if (AC.config.showDebugData && (HOOK === undefined)) {
                const dataVariants = getDataVariants();
                setData(dataVariants.debug, dataVariants.critical);
            }
            // Save a backup image to state
            state.AutoCards = AC;
        }
        function setData(primaryVariant, secondaryVariant) {
            const dataCardTemplate = O.f({
                type: AC.config.defaultCardType,
                title: primaryVariant.title,
                keys: primaryVariant.keys,
                entry: (function() {
                    const mutualEntry = (
                        "If you encounter an Auto-Cards bug or otherwise wish to help me improve this script by sharing your configs and game data, please send me the notes text found below. You may ping me @LewdLeah through the official AI Dungeon Discord server. Please ensure the content you share is appropriate for the server, otherwise DM me instead. 😌"
                    );
                    if (memoryOverflow) {
                        return (
                            "Seeing this means Auto-Cards detected an imminent memory overflow event. But fear not! As an emergency fallback, the full state of Auto-Cards' data has been serialized and written to the notes section below. This text will be deserialized during each lifecycle hook, therefore it's absolutely imperative that you avoid editing this story card!"
                        ) + (function() {
                            if (AC.config.showDebugData) {
                                return "\n\n" + mutualEntry;
                            } else {
                                return "";
                            }
                        })();
                    } else {
                        return (
                            "This story card displays the full serialized state of Auto-Cards. To remove this card, simply set the \"log debug data\" setting to false within your \"Configure\" card. "
                        ) + mutualEntry;
                    }
                })(),
                description: JSON.stringify(AC)
            });
            if (data === null) {
                data = getSingletonCard(true, dataCardTemplate, O.f({...secondaryVariant}));
            }
            for (const propertyName of ["title", "keys", "entry", "description"]) {
                if (data[propertyName] !== dataCardTemplate[propertyName]) {
                    data[propertyName] = dataCardTemplate[propertyName];
                }
            }
            const index = storyCards.indexOf(data);
            if ((index !== -1) && (index !== (storyCards.length - 1))) {
                // Ensure the data card is always at the bottom of the story cards list
                storyCards.splice(index, 1);
                storyCards.push(data);
            }
            return;
        }
    }
    // This is the only return point within the parent scope of AutoCards
    if (stopPackaged === false) {
        return [codomain, STOP];
    } else {
        return codomain;
    }
} AutoCards(null); function isolateLSIv2(code, log, text, stop) { const console = Object.freeze({log}); try { eval(code); return [null, text, stop]; } catch (error) { return [error, text, stop]; } }

// TAS Library Script

// TRUE AUTOMATIC STATS (TAS) SCRIPT by Yi1i1i

// Credits
// jackoneill2443 - Idea for input flavor text to show stat results
// BinKompliziert - Idea for Capitalization weighting for skill learning
// LewdLeah - General Scripting Knowledge
//

// This function runs the library hook
onLibrary_TAS();

// LIBRARY HOOK
function onLibrary_TAS() {
  // Initialize variables
  if (state.startScript == undefined) {
    // Script is naturally unlocked
    state.startScript = true;
  }
  if (state.turnCount == undefined) {
    state.turnCount = 0;
  }
  if (state.inputCount == undefined) {
    state.inputCount = 0;
  }
  if (state.outputCount == undefined) {
    state.outputCount = 0;
  }
  if (state.msgHolder == undefined) {
    state.msgHolder = "";
  }
  if (state.playerList == undefined) {
    state.playerList = [];
  }
  if (state.deadPlrs == undefined) {
    state.deadPlrs = [];
  }
  if (state.invCheckText == undefined) {
    state.invCheckText = "";
  }
  if (state.strgCheckText == undefined) {
    state.strgCheckText = "";
  }
  if (state.askEnergyCost == undefined) {
    state.askEnergyCost = {};
  }
  if (state.injectStatsToContext == undefined) {
    state.injectStatsToContext = true;
  }
  if (state.lvlRewardSkillFlag == undefined) {
    state.lvlRewardSkillFlag = {};
  }
  if (state.oldLvlHolder == undefined) {
    state.oldLvlHolder = {};
  }

  log("state.startScript: " + state.startScript);

  createIfNoSettingsSC();
  retrieveSettingsFromSC();
  storeSettingsToSC();

  defaultPlrCreation();

  updateDeadPlrs();
}

// INPUT HOOK
function onInput_TAS(text) {
  // Detect and execute script unlock or lock
  text = scriptSwitch_TAS(text);

  text = helpCommandInput_TAS(text);

  if (state.startScript == true && info.actionCount >= 0) {
    state.inputCount += 1;
    log("state.inputCount: " + state.inputCount);

    text = addPlrCmdInput(text);
    text = removePlrCmdInput(text);
    text = listPlrCmdInput(text);

    // Create story cards if none and updates codebase for player edits at start of hook 
    createIfNoStatSC();
    retrieveStatsFromSC();

    createIfNoModifierSC();
    retrieveModifiersFromSC();

    createIfNoInvSC();
    retrieveInvFromSC();

    createIfNoTalentSC();
    retrieveTalentsFromSC();

    createIfNoSkillSC();
    retrieveSkillsFromSC();

    createIfNoCurrSC();

    text = detectStorageCallActions(text);

    text = detectStoreInv(text);

    text = detectGiving(text);

    text = detectAttack(text);

    text = detectDodge(text);

    text = detectScout(text);

    text = detectDefend(text);

    text = detectExercise(text);

    text = detectResting(text);

    text = detectConsuming(text);

    text = upgradePlayerSkills(text);

    text = upgradePlayerTalents(text);

    text = talentLearningProcess(text);

    text = warnPlayerHealth(text);

    text = rewardSkillForLevelUp(text);

  }//end of main

  return text;
}

// CONTEXT HOOK
function onContext_TAS(text) {
  if (state.startScript == true && info.actionCount >= 0) {

    text = feedPlrDataToContext(text);

    text = feedInvToContext(text);

    text = feedStrgToContext(text);

    text = removeAngleText(text);

    //log(text);

  }//end of main

  return text;
}

// OUTPUT HOOK
function onOutput_TAS(text) {
  text = helpCommandOutput_TAS(text);

  if (state.startScript == true && info.actionCount >= 0) {
    state.outputCount += 1;
    log("state.outputCount: " + state.outputCount);

    // Create story cards if none and updates codebase for player edits at start of hook 
    createIfNoStatSC();
    retrieveStatsFromSC();

    createIfNoModifierSC();
    retrieveModifiersFromSC()

    createIfNoInvSC();
    retrieveInvFromSC();

    createIfNoTalentSC();
    retrieveTalentsFromSC();

    createIfNoSkillSC();
    retrieveSkillsFromSC();

    createIfNoCurrSC();

    // Output functions
    playerNaturalRegen();
    text = detectHurt(text);
    storeStatsToSC();

    text = getNewTalentEP(text);
    storeTalentsToSC();

    storeSkillsToSC();

    storeInvToSC();

    storeModifiersToSC();

    // Message Handler
    state.message = state.msgHolder;
    state.msgHolder = "";

    turnCounter();
  }//end of main

  return text;
}

/////////////////////////////////////////////////////////////////////////////////////

youWords = ["you", "You", "I"];

selfWords = ["me", "my", "myself", "mine", "your", "yourself", "yours", "us", "our", "ours", "ourselves"
];

castWords = [
  "activate", "amplify", "bind", "blast", "boost", "burst", "cast", "casting", "channel", "charge", "channeling", "command", "commanding", "conjure",
  "create", "creating", "detonate", "enchant", "enchanting", "evoke", "explode",
  "expel", "exude", "flare", "flow", "form", "gather", "gathering", "glow", "harness", "hex", "ignite", "infuse", "invoke", "invoking", "launch", "manifest", "project", "projecting", "pulse", "perform", "quicken", "release", "shape", "shift", "summon", "summoning", "transform", "transforming", "transmute", "trigger", "unbind", "unleash"
];

talentWords = [
  // Combat / Stealth
  "ambush", "argue", "bluff", "confuse", "counterfeit", "deceive", "defend", "disarm", "extinguish",
  "intimidate", "jam", "lockpick", "neutralize", "pierce", "scare", "snipe", "sneak", "snare", "spy", "steal", "shoot", "shooting",

  // Crafting / Construction
  "assemble", "barter", "bind", "boobytrap", "brew", "brewmaster", "build", "boil", "butcher", "camber", "camouflage", "carve", "cook",
  "channel", "chisel", "clean", "compose", "concoct", "craft", "debug", "decrypt", "decipher", "distill", "dismantle", "fry",
  "engineer", "engrave", "fabricate", "fasten", "filter", "fletch", "forge", "frame", "glaze", "grind", "harness",
  "identify", "imitate", "inlay", "inscribe", "insulate", "invert", "knit", "launder", "leverage", "liquefy", "mark",
  "mason", "mend", "mix", "mold", "muffle", "optimize", "patch", "polish", "pressurize", "prime", "process", "program",
  "purify", "quench", "reconstruct", "recycle", "refine", "reinforce", "remix", "repair", "reverse", "rivet", "salvage",
  "scribe", "seal", "sealant", "sharpen", "simulate", "sketch", "smelt", "smith", "smudge", "stabilize", "synchronize",
  "tailor", "temper", "tie", "tinker", "treat", "trace", "transmute", "trap", "tune", "upcycle", "vacuum", "vent",
  "wash", "weave", "weld", "weld-seal", "whittle",

  // Exploration / Movement
  "balance", "climb", "drive", "eavesdrop", "empathize", "explore", "fish", "fly", "forage", "gauge", "harvest",
  "hunt", "intercept", "levitate", "map", "mine", "navigate", "operate", "orchestrate", "override", "ride", "scavenge", "search",
  "secure", "stow", "sustain", "tag", "track", "transfer", "traverse", "use", "wield", "wrangle",

  // Social / Mental
  "appraise", "arbitrate", "communicate", "claim", "convince", "coordinate", "describe", "diagnose", "empathize",
  "evaluate", "gesture", "justify", "mediate", "memorize", "overhear", "perceive", "persuade", "present", "procure",
  "reveal", "soothe", "simulate", "scribe", "verify",

  // Technical / Scientific
  "calculate", "debug", "decrypt", "diagnose", "engineer", "fabricate", "filter", "invert", "jam", "leverage", "liquefy", "map",
  "optimize", "orchestrate", "patch", "process", "program", "purify", "quench", "reconstruct", "recycle", "refine",
  "reinforce", "remix", "repair", "reverse", "salvage", "sealant", "simulate", "synchronize", "tag", "tinker",
  "transmute", "upcycle", "vacuum", "vent", "weld", "weld-seal",
];

learnWords = [
  "learn", "learning", "practice", "practicing", "spend time", "study", "studying", "train", "training", "read", "reading", "focus", "find", "research", "researching"
];

equipWords = [
  "acquire", "add", "collect", "equip", "gather", "grab", "hold", "keep", "loot", "obtain", "pick", "put", "receive", "retrieve", "stash", "snatch", "store", "take", "toss", "wear"
];

invWords = [
  "bag", "backpack", "body", "case", "chest", "collection", "container", "crates", "equipment", "hands", "hand", "holder", "holdings", "inventory", "items", "legs", "loot", "pack", "pocket", "pouch", "rucksack", "sack", "satchel", "storage", "supplies", "tote"
];

const itemGainPhrases = [
  "It enters your possession.",
  "It holds there.",
  "You now have it.",
  "It's now yours.",
  "It sits tight in your inventory.",
  "It sits securely in your inventory.",
  "It lays among your belongings.",
  "It becomes part of your inventory.",
  "It now belongs to you.",
  "It is now part of your belongings."
];

giveWords = ["deliver", "fork", "gift", "give", "hand", "pay", "sell", "toss"];

numWords = [
  "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
  "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
  "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen",
  "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety",
  "hundred", "thousand", "million", "billion", "trillion"
];

titleWords = ["mr", "mrs", "ms", "dr", "prof", "captain", "sir", "lady", "officer", "detective", "colonel", "general", "lieutenant", "president", "governor", "mayor", "minister", "ambassador", "director", "agent", "coach", "principal", "judge", "dean", "sister", "brother", "father", "mother", "daughter", "son", "king", "queen", "prince", "princess", "professor"];

stopWords = [
  // Pronouns
  "I", "me", "my", "myself", "we", "our", "ours", "ourselves",
  "you", "your", "yours", "yourself", "yourselves",
  "he", "him", "his", "himself", "she", "her", "hers", "herself",
  "it", "its", "itself", "they", "them", "their", "theirs", "themselves",

  // Question Words
  "what", "which", "who", "whom", "whose", "when", "where", "why", "how",

  // Auxiliary & Modal Verbs
  "am", "is", "are", "was", "were", "be", "been", "being",
  "have", "has", "had", "having",
  "do", "does", "did", "doing",
  "can", "could", "will", "would", "shall", "should", "must", "might", "may",

  // Negatives
  "not", "no", "nor", "never", "none", "nothing", "nowhere", "neither",
  "isn't", "aren't", "wasn't", "weren't", "hasn't", "haven't", "hadn't",
  "doesn't", "don't", "didn't", "won't", "wouldn't", "shan't", "shouldn't",
  "can't", "cannot", "couldn't", "mightn't", "mustn't", "needn't",

  // Conjunctions & Prepositions
  "and", "but", "or", "because", "as", "until", "while",
  "of", "at", "by", "for", "with", "about", "against",
  "between", "into", "through", "during", "before", "after",
  "above", "below", "to", "from", "up", "down", "in", "out",
  "on", "off", "over", "under", "onto", "upon", "around",

  // Articles & Determiners
  "a", "an", "the", "this", "that", "these", "those",
  "some", "any", "each", "every", "either", "neither",
  "such", "own", "other", "another", "both", "all", "several", "many", "most", "few", "since",

  // Time-Related Words
  "again", "further", "then", "once", "already", "soon", "later", "finally", "next",

  // Place Words
  "here", "there", "everywhere", "somewhere", "anywhere", "nowhere",

  // Degree & Quantifier Words
  "very", "too", "just", "only", "more", "less", "than", "enough", "almost",
  "rather", "quite", "really", "such",

  // Common Verbs & Adverbs
  "try", "trying", "tries", "take", "takes", "taking",
  "look", "looks", "looking",
  "seem", "seems", "seemed", "appears", "appeared",
  "go", "goes", "going", "gone",
  "come", "comes", "coming",
  "get", "gets", "getting", "got", "gotten",
  "make", "makes", "making", "made",
  "say", "says", "saying", "said", "heard",
  "know", "knows", "knew", "stopping", "stops", "becomes",

  // Game-Specific Terms
  "skill", "talent", "ability", "executes", "existing",
  "consumes mana", "consumes energy", "successfully",
  "suddenly", "predictably", "efficiently", "cast"
];

healingWords = [
  "heal", "recover", "restore", "regenerate", "revitalize",
  "rejuvenate", "mend", "cure", "bandage", "apply", "inject", "swallow", "absorb", "patch", "treat", "soothe"
];

consumeWords = [
  "drink", "eat", "consume", "inject", "swallow", "absorb", "devour", "ingest", "chew", "bite", "sip", "gulp"
];

// Light healing items (basic healing items)
lightHealWords = [
  "bandage", "herb", "potion", "water", "minor", "salve", "ointment", "icepack", "rinse", "snack", "cooked", "cook", "cooking", "tiny"
];

// Moderate healing items (more effective healing items)
moderateHealWords = ["healing", "elixir", "tincture", "small", "bandage", "magic", "oil", "food", "meal", "breakfast", "lunch", "dinner", "delicious"
];

// Strong healing items (stronger healing items for larger wounds)
strongHealWords = ["large", "larger", "strong", "big", "scroll", "balm", "alcohol", "cream"
];

// Intense healing items (used for serious injuries or magical healing)
greatHealWords = ["superior", "life elixir", "antibacterial", "vitality", "greater", "great", "rare"
];

// Powerful healing items (used for critical injuries or to restore near full health)
powerfulHealWords = ["immortality", "crystal", "revival", "divine", "surgery", "enchanted", "powerful", "extremely", "extreme", "mystical", "legendary"
];

dialoguePhrases = ["You say", "You tell", "You add", "You ask", "You reply", "You state", "You note", "You claim", "You remark", "You mutter", "You insist", "You whisper", "You mention", "You declare", "You respond", "You warn", "You said", "You see", "You hear"];

realizePhrases = ["It becomes apparent", "It becomes clear that", "It clicks that", "You start to realize", "You come to realize", "You come to understand", "You feel that", "You grasp the fact that", "You notice", "You realize", "You recognize that", "You see that", "It dawns that", "You realize in reality, "];

notEnoughPhrases = [
  "You don't have enough [Stat] for [Thing].",
  "Your [Stat] falls short for [Thing].",
  "You try, but your [Stat] isn't quite enough for [Thing].",
  "You feel your [Stat] falter before [Thing].",
  "There's not enough [Stat] in you to handle [Thing].",
  "Your [Stat] gives out before [Thing] can take shape.",
  "You strain, but lack the [Stat] needed for [Thing].",
  "Attempting [Thing] drains your limited [Stat].",
  "You reach for [Thing], but your [Stat] can't follow.",
  "[Thing] demands more [Stat] than you currently hold.",
  "Your [Stat] fizzles out when attempting [Thing].",
  "You push toward [Thing], but your [Stat] says no.",
  "You realize [Thing] is just beyond your [Stat]'s reach.",
  "The moment calls for [Thing], but your [Stat] isn't there.",
  "You spend effort for [Thing], but your [Stat] slips away.",
  "Not enough [Stat] courses through you for [Thing].",
  "You hesitate — lacking the [Stat] for [Thing].",
  "You falter, [Stat] insufficient to fuel [Thing].",
  "There's a gap between your [Stat] and what [Thing] needs.",
  "A flicker of [Thing] exerts itself, but your [Stat] can’t sustain it."
];

attackWords = ["attack", "ambush", "bash", "batter", "bite", "bludgeon", "chop", "claw", "cleave", "club", "crack", "crush", "flail", "fling", "gouge", "hack", "impale", "jab", "kick", "lunge", "maul", "pound", "pummel", "pierce", "punch", "ram", "rend", "shred", "slash", "slam", "slice", "smash", "stab", "strike", "swipe", "swing", "smack", "thrust", "whack", "wreck"];

const attackTier1 = [
  "A hesitant impact leaves a soft but clear mark.",
  "A clumsy strike stirs the air noticeably.",
  "The blow lands with a hint of effect.",
  "A weak connection is made, just enough to be felt.",
  "The strike glances off, carrying some force.",
  "A light tap echoes with a gentle thud.",
  "A slight poke leaves a subtle but real impression.",
  "The hit brushes past, leaving a small trace.",
  "A hopeful flail finds its mark with modest impact.",
  "The effort shows, with a bit more strength than before.",
  "The movement is quick but still leaves a clear trace.",
  "A faint energy pulses from the impact point.",
  "The jab lingers briefly, not fading so fast.",
  "The warning registers, causing slight unease.",
  "A flicker of contact draws a small reaction.",
  "The strike carries more weight, hinting at threat.",
  "A hesitant impact barely registers.",
  "A clumsy strike barely disturbs the air.",
  "The blow lands with uncertain effect.",
  "A weak connection is made, barely felt.",
  "The strike glances off without much force.",
  "A light tap echoes faintly.",
  "A slight poke leaves a minor impression.",
  "The hit brushes past with little consequence.",
  "A hopeful flail reaches its mark, barely.",
  "The effort is noticeable but lacks strength.",
  "The movement is rushed, leaving a faint trace.",
  "An energy sighs away from the impact point.",
  "The jab seems unsure, fading quickly.",
  "A minor tremble follows the effort.",
  "The strike is more suggestion than threat.",
  "An unsteady hit makes barely a difference."
];

const attackTier2 = [
  "A decent impact settles on the target.",
  "A steady thud marks the connection.",
  "The strike finds its place without fuss.",
  "The hit pushes slightly against the defense.",
  "A clean contact echoes calmly.",
  "The jab lands with clear but modest effect.",
  "The impact is steady, leaving a small dent.",
  "The blow connects and holds its ground.",
  "A practiced move leaves a noticeable mark.",
  "The force carries a measured weight.",
  "The strike resonates with steady rhythm.",
  "A slight shift follows the connection.",
  "The weapon's touch is firm but not harsh.",
  "A forward push accompanies the hit.",
  "A quiet grunt follows the impact.",
  "The movement holds just enough power.",
  "The warning slightly registers with the target.",
  "A flicker of contact is acknowledged.",
  "The strike carries more intention than threat.",
  "The hit lands but lacks full follow-through.",
  "A mild force nudges the opponent.",
  "Contact is made, but leaves little impression."
];

const attackTier3 = [
  "A confident strike unsettles the target.",
  "The blow cuts through with purpose.",
  "A sharp impact causes a momentary stagger.",
  "The hit lands cleanly and with intent.",
  "A practiced motion sends ripples through the defense.",
  "Swift contact disrupts the opponent's stance.",
  "The blow presses through with steady force.",
  "Momentum drives the impact deeper.",
  "The movement feels well-rehearsed and sure.",
  "The strike resonates like a controlled pulse.",
  "Adjustments mid-motion still deliver the blow.",
  "The hit causes the target to hesitate.",
  "A message is conveyed through the impact.",
  "The rhythm of the strike flows naturally.",
  "The strike hints at growing skill.",
  "Precision underlies the connection.",
  "The effort is steady, if not sharp.",
  "A push more than a strike, but effective.",
  "Contact is solid, though not overwhelming."
];

const attackTier4 = [
  "A firm impact leaves a visible mark.",
  "The strike breaks through the guard.",
  "The target reels from the force.",
  "Momentum flows like water into steel.",
  "A heavy thud echoes with weight.",
  "The blow cuts a clean arc through defense.",
  "The hit lands fully on a weak point.",
  "The momentum drives the strike home.",
  "The stance holds firm beneath the impact.",
  "The strike lands with quiet certainty.",
  "A jolt runs through the opponent's posture.",
  "The blow locks into its intended angle.",
  "The hit ends any further resistance.",
  "Respect is earned with that connection.",
  "Control is evident in the impact.",
  "The strike carries the weight of experience.",
  "The motion is not flawless, but firm.",
  "A noticeable hit, though less than perfect.",
  "The force strikes true but lacks flourish."
];

const attackTier5 = [
  "The blow drives the target back noticeably.",
  "Force behind the hit disrupts balance.",
  "The air shifts sharply with the impact.",
  "Focused strength punishes the defense.",
  "The swing finds an opening wide enough to exploit.",
  "The sound of impact warns nearby foes.",
  "A disciplined strike lands with solid force.",
  "Momentum disrupts the opponent's rhythm.",
  "Hesitation breaks under the weight of the hit.",
  "The strike cuts through doubt and hesitation.",
  "Movement flows like water through resistance.",
  "The impact carries practiced momentum.",
  "The target lurches in response.",
  "The blow speaks of determination and strength.",
  "The hit unsettles with quiet authority.",
  "The connection leaves no room for recovery.",
  "The swing is effective, if not clean.",
  "Pressure builds behind the hit, just enough.",
  "Strength surges, though briefly delayed."
];

const attackTier6 = [
  "A forceful blow lands with sharp clarity.",
  "Resistance is sliced cleanly away.",
  "The motion flashes with practiced precision.",
  "The target is knocked back with graceful power.",
  "The strike lands like a measured command.",
  "Momentum flows with disciplined grace.",
  "The hit hums with controlled violence.",
  "A clean impact sends a ripple through the target.",
  "The movement cuts through defenses smoothly.",
  "Even gravity seems to respect the strike.",
  "The opponent braces, but the hit connects.",
  "A gasp escapes those watching the impact.",
  "The weapon's motion carries unyielding intent.",
  "The blow lands like a falling star’s certainty.",
  "The strike leaves a lasting impression.",
  "Momentum and precision unite in the hit.",
  "The delivery wavers slightly, but recovers.",
  "Control dips, yet the hit lands well.",
  "A moment's imbalance doesn't stop the strike."
];

const attackTier7 = [
  "Precision and power combine in the strike.",
  "Momentum fuels a decisive impact.",
  "The guard shudders under a sharp cut.",
  "A rhythmic force pulses through the blow.",
  "The hit arrives like the first drop of a storm.",
  "The enemy stumbles back in surprise.",
  "The weapon moves as if guided by instinct.",
  "Motion and violence merge seamlessly.",
  "The strike lands just ahead of expectation.",
  "The attack flows like a dancer’s movement.",
  "The air vibrates with the blow’s precision.",
  "Time seems to pause briefly at impact.",
  "Breath catches before the force lands.",
  "The connection speaks of practiced skill.",
  "The strike lands as if anticipated.",
  "Art and pain intertwine in the hit.",
  "One step falters, but the hit stays true.",
  "Sharp, but not quite flawless.",
  "Timing slips slightly, yet power holds."
];

const attackTier8 = [
  "The strike arrives almost unseen.",
  "The motion feels part of a larger force.",
  "Focused chaos drives the impact.",
  "The target barely perceives the blow.",
  "The hit rings out across the battlefield.",
  "Time itself seems to slow around the strike.",
  "Stance collapses beneath crashing force.",
  "The attack lands with quiet inevitability.",
  "Sound trails behind the motion.",
  "Movement weaves between magic and steel.",
  "The hit flows like a living gust.",
  "Shadows linger after the strike.",
  "Air warps where the blow lands.",
  "Presence alone seems to deliver the hit.",
  "A glint of light precedes impact.",
  "Pain wraps itself around the connection.",
  "The blur fades slightly before impact.",
  "Precision stutters but the strike connects.",
  "A pulse of force overcomes a shaky start."
];

const attackTier9 = [
  "The strike becomes a force of pure intent.",
  "The air parts before the hit.",
  "Expectations shatter along with defense.",
  "The blow thunders with deadly direction.",
  "Motion adjusts without losing force.",
  "Defense collapses under sheer will.",
  "Sound trails behind the impact.",
  "The target reacts too late to avoid it.",
  "A flash marks the turning point.",
  "The hit lands like fate fulfilled.",
  "Mastery speaks through the strike.",
  "Guard dissolves into suggestion.",
  "Recovery is denied by the blow.",
  "The world narrows to the weapon’s path.",
  "Space itself seems torn apart.",
  "The strike is a final verdict.",
  "Power is held, though briefly misaligned.",
  "Speed falters for a breath, but recovers.",
  "The hit stumbles, then erupts with force."
];

const attackTier10 = [
  "The strike carries the full weight of your being.",
  "This blow could close a chapter.",
  "Reality flickers with the swing's speed.",
  "The hit cuts like a blade from legend.",
  "Every atom agrees on the force delivered.",
  "Air and enemy alike are displaced.",
  "Belief itself feels cleaved by the strike.",
  "Possibility crumbles beneath the blow.",
  "Stillness splits like a whispered verdict.",
  "The swing feels like an ending.",
  "Muscle and myth combine in the hit.",
  "Air recoils from the passage of force.",
  "This is no mere strike — it’s judgment.",
  "History is written in the motion.",
  "Silence reigns before, awe after.",
  "The battlefield feels smaller in its wake.",
  "A ripple of imperfection rides a perfect blow.",
  "The strike trembles — then erupts.",
  "A final moment of doubt precedes a storm."
];

const atkSpdTier1 = [
  "A hesitant shuffle barely stirs the air",
  "Your movement feels a bit sluggish",
  "A slow step carries little urgency",
  "A slow shuffle signals your move",
  "You move with gentle hesitation",
  "Your movement barely stirs the air",
  "A careful step precedes the strike",
  "The motion is tentative, almost cautious",
  "You move with measured calm",
  "Your approach is soft and unhurried",
  "A subtle adjustment hints at your intent",
  "Your action unfolds with quiet restraint",
  "The speed feels easy, almost lazy"
];

const atkSpdTier2 = [
  "Your step drags slightly behind your intent",
  "A mild hesitation delays your movement",
  "Your pace feels a touch uneven",
  "Your step quickens slightly",
  "A light breeze follows your motion",
  "You move with steady purpose",
  "A deliberate pace guides your action",
  "The flow is smooth but unassuming",
  "Your movement has quiet determination",
  "You prepare with a mild surge of energy",
  "The motion gains a bit of momentum",
  "You advance with modest speed",
  "Your actions become more assured"
];

const atkSpdTier3 = [
  "Your motion starts a bit slow but builds",
  "The first step lacks some confidence",
  "You move with cautious energy",
  "Your movement picks up pace",
  "The air shifts around your motion",
  "You flow with balanced energy",
  "A sharper rhythm marks your steps",
  "You move with clear intent",
  "Your speed adds weight to your presence",
  "The motion feels precise and ready",
  "You approach with a confident glide",
  "Your steps echo mild assurance",
  "The pace feels natural and focused"
];

const atkSpdTier4 = [
  "Your momentum hesitates for a moment",
  "Your pace is a touch uneven",
  "The motion lingers before picking up",
  "Your motion cuts through the air",
  "A brisk rhythm underlies your move",
  "You advance with crisp clarity",
  "The flow hums with growing energy",
  "Your steps land with noticeable speed",
  "Your movement sharpens, gains focus",
  "A quickened pulse marks your action",
  "You press forward with steady force",
  "Your motion brims with readiness",
  "You move with clear, controlled speed"
];

const atkSpdTier5 = [
  "Your movement carries a mild drag",
  "A slight wobble marks your step",
  "Your pace wavers before steadying",
  "Your speed commands attention",
  "The air ripples from your motion",
  "You move with crisp determination",
  "A vibrant energy fuels your pace",
  "Your steps fall with bold intent",
  "The motion is sharp and precise",
  "Your presence quickens markedly",
  "You push forward with clear momentum",
  "Your movement holds assured power",
  "The speed carries a steady edge"
];

const atkSpdTier6 = [
  "Your stride starts hesitant, then sharpens",
  "The pace momentarily slips before firming",
  "Your motion hesitates then flows",
  "Your motion flows like a sharp breeze",
  "You cut through space with grace",
  "Your steps ring with confident speed",
  "A focused energy drives your movement",
  "You advance with quick, measured force",
  "Your speed is keen and effective",
  "The flow carries purposeful rhythm",
  "You move like a sharpened blade",
  "Your pace is lively and exact",
  "Your motion is a clear signal of intent"
];

const atkSpdTier7 = [
  "Your burst slows slightly before surging",
  "A slight stumble before regaining speed",
  "The motion briefly falters but continues",
  "Your speed feels like a quick gust",
  "You strike the air with sharp precision",
  "Your movement blends speed and grace",
  "The motion crackles with kinetic energy",
  "You advance like a sudden breeze",
  "Your steps flash with clear intent",
  "Your flow carries dynamic force",
  "You push forward with swift confidence",
  "The pace hums with controlled power",
  "Your motion cuts cleanly through space"
];

const atkSpdTier8 = [
  "Your motion blurs, then slows briefly",
  "A flicker of hesitation passes",
  "The strike stutters before cutting through",
  "Your motion blurs briefly in the air",
  "A swift current follows your steps",
  "You move with lightning-quick focus",
  "The air buzzes at your approach",
  "You press forward with striking velocity",
  "Your movement slices sharply",
  "The rhythm of your steps commands space",
  "You glide forward with fierce intent",
  "Your speed hints at latent power",
  "Your motion is a sudden, clear force"
];

const atkSpdTier9 = [
  "Your quickness wavers just before impact",
  "A momentary slack in your pace",
  "The strike pauses briefly, then strikes true",
  "You flash forward with sharp precision",
  "The air parts sharply before you",
  "Your steps echo with rapid intent",
  "You move like a sudden gust of wind",
  "Your motion strikes with clear force",
  "The pace is fierce but controlled",
  "Your speed carries focused energy",
  "You push through space with crisp power",
  "The rhythm of your steps is electric",
  "Your movement demands attention"
];

const atkSpdTier10 = [
  "Your motion falters, then rockets forward",
  "A brief hesitation in the storm of your strike",
  "The speed ebbs, then surges with force",
  "Your motion is a streak of clarity",
  "You slice through space with perfect timing",
  "The air crackles as you move",
  "Your steps thunder with swift authority",
  "You strike with unstoppable speed",
  "Your movement is a force of nature",
  "You blur through the moment, precise and fierce",
  "The pace is relentless and exact",
  "Your speed commands the battlefield",
  "You move with the certainty of a storm"
];

const spdTier1 = [
  "You moved with hesitation.",
  "Your pace was unhurried.",
  "You reacted a bit late.",
  "Your steps were cautious.",
  "You lagged slightly behind.",
  "Your movement was mild.",
  "You shuffled along.",
  "You stayed near the edge of action.",
  "You moved, but not urgently.",
  "You followed a slow pace.",
  "You almost missed the moment.",
  "You caught yourself just in time.",
  "You moved late—but not too late.",
  "You stumbled, but kept going."
];

const spdTier2 = [
  "You responded at a decent pace.",
  "You kept steady footing.",
  "You moved in time with the flow.",
  "Your reaction was acceptable.",
  "You stayed alert but not rushed.",
  "You acted without delay.",
  "Your motion was timely.",
  "You took a firm step forward.",
  "You held your ground and advanced.",
  "You moved as needed.",
  "You wavered, but followed through.",
  "You hesitated, then acted fast enough.",
  "You nearly lagged but recovered.",
  "You were a beat behind, but stayed effective."
];

const spdTier3 = [
  "You stepped in smoothly.",
  "You navigated with focus.",
  "Your pace matched the moment.",
  "You moved with intention.",
  "You dodged with calm control.",
  "You adjusted fluidly.",
  "You kept up with ease.",
  "You slipped past at the right moment.",
  "You moved when it mattered.",
  "You engaged without delay.",
  "You flinched first, then found flow.",
  "You nearly lost the beat, but recovered.",
  "You hesitated mid-step but regained your rhythm.",
  "You reacted just shy of perfect timing."
];

const spdTier4 = [
  "You shifted before it hit.",
  "You sidestepped without thinking.",
  "You stepped into a better position.",
  "Your reflex was sharp.",
  "You moved with natural readiness.",
  "You flowed around the threat.",
  "You anticipated the motion.",
  "You edged ahead.",
  "You slipped out of reach.",
  "You kept your momentum.",
  "You nearly lost your footing but held course.",
  "You stumbled into a better position.",
  "Your motion faltered—barely—but held.",
  "You made the move just in time."
];

const spdTier5 = [
  "You intercepted with swift control.",
  "You adjusted in mid-move.",
  "You reacted just in time.",
  "You slipped through a narrow gap.",
  "Your motion was barely seen.",
  "You read the moment instantly.",
  "You darted into advantage.",
  "You accelerated through the gap.",
  "You breezed past the pressure.",
  "You moved ahead of time.",
  "You clipped the edge but made it through.",
  "You misread slightly, but recovered fast.",
  "You almost lost balance in motion.",
  "You got through—but only just."
];

const spdTier6 = [
  "You moved before the signal.",
  "You faded out of reach.",
  "Your steps blurred slightly.",
  "You interrupted the moment.",
  "You vanished between thoughts.",
  "You moved in the in-between.",
  "You bent around timing.",
  "You surged through a blink.",
  "You crossed the line unseen.",
  "You glided without friction.",
  "You flickered once, then regained form.",
  "You lost track for a beat—then vanished.",
  "You barely avoided being seen.",
  "You left a tremor behind your slip."
];

const spdTier7 = [
  "You broke formation with grace.",
  "You accelerated without effort.",
  "Your response came before need.",
  "You slipped around consequence.",
  "You were gone before it mattered.",
  "You slid past their intent.",
  "You darted without windup.",
  "You opened space where there was none.",
  "You broke timing subtly.",
  "You disappeared and returned.",
  "You felt resistance—but outpaced it.",
  "You nearly got caught in flow.",
  "You reappeared a breath too soon.",
  "You paused for a flicker—then moved again."
];

const spdTier8 = [
  "You arrived where no path existed.",
  "Your pace disrupted expectation.",
  "You moved in silence between moments.",
  "You broke through reaction time.",
  "You created a gap with motion alone.",
  "You turned presence into motion.",
  "You operated ahead of awareness.",
  "You passed through anticipation.",
  "You lapped the moment itself.",
  "You escaped momentum's reach.",
  "You faltered slightly before vanishing.",
  "Your blur returned with a wobble.",
  "You nearly collided with time—but twisted free.",
  "A brief hesitation almost caught you."
];

const spdTier9 = [
  "You moved through the margin of possibility.",
  "You were felt but not seen.",
  "You skipped the buildup and acted.",
  "You merged instinct with motion.",
  "You danced outside rhythm.",
  "You ignored delay entirely.",
  "You left reactions behind.",
  "You passed thought by.",
  "You slipped through stillness.",
  "You left only a trace.",
  "You shimmered oddly before stabilizing.",
  "You nearly brushed against reaction.",
  "You arrived a sliver too early.",
  "You flickered—almost noticed."
];

const spdTier10 = [
  "You existed only between actions.",
  "You distorted the sense of time.",
  "You were presence without motion.",
  "You shaped space with pace.",
  "You eluded reality’s steps.",
  "You moved while the world paused.",
  "You blurred into position.",
  "You reacted before intention formed.",
  "You bypassed delay like a breath.",
  "You became the echo of speed.",
  "Reality briefly rejected your step—then bent.",
  "You trembled at the edge of being seen.",
  "You flickered out—then fully vanished.",
  "You slipped—but impossibly corrected mid-vanish."
];

dodgeWords = [
  // Running
  "run", "running", "sprint", "sprinting", "dash", "dashing", "jog", "jogging",
  "rush", "rushing", "flee", "fleeing",
  "hurry", "hurrying", "escape", "escaping", "scurry", "scurrying",

  // Dodging
  "dodge", "dodging", "sidestep", "sidestepping", "evade", "evading", "ducking", "swerve", "swerving", "weave", "weaving",
  "avoid", "avoiding", "jump", "jumping", "leap", "leaping", "skid", "skidding",

  // Retreating
  "retreat", "retreating", "withdraw", "withdrawing", "fall back", "falling back", "back away", "backing away",
];

luckyPhrases = [
  "a bit of good fortune",
  "a slight stroke of luck",
  "a touch of serendipity",
  "a minor lucky break",
  "a tad more fortunate",
  "a little extra luck",
  "a slight favor of fate",
  "luck's gentle nudge",
  "a small lucky charm at play",
  "a modest turn of fortune",
  "a hint of providence",
  "just enough luck to matter",
  "luck by a hair",
  "a whisper of good fortune",
  "some luck"
];

graspPhrases = [
  "You clutch",
  "You seize",
  "You take hold of",
  "You latch onto",
  "You clasp",
  "You catch hold of",
  "You cling to",
  "You grasp"
];

healthFeelsHalfway = ["your health feels average", "your health is at a mid-point", "your health feels balanced", "you're in fair health", "your health is in the middle", "your health is at an even keel", "your health feels stable but moderate", "you're halfway to full strength", "your health is neither strong nor weak", "your health is moderate", "you're at half strength", "your health stands at the halfway mark", "your vitality is halfway depleted", "you're in a neutral state of health", "your health is balanced at half", "you're halfway from full vigor", "your health is split right down the middle", "you're not in great shape, but not at rock bottom", "your body feels neither strong nor weak, just halfway there", "you're at the middle of your strength"]

healthVeryLow = ["your health is hanging by a few threads", "your vitality is on the brink of collapse", "you're hanging on by a thread", "your health is barely holding together", "your body feels like it's on its last leg", "you're one step away from falling", "your strength is nearly depleted", "you're hanging in there by sheer will", "you're on the edge of total exhaustion", "your health is almost gone, just a breath away from falling", "you're teetering on the edge of unconsciousness", "your body is at its breaking point", "you're seconds away from complete collapse", "your health is almost a memory"];

healthDeathArray = [
  "the world slows as your life ends, and everything goes dark.",
  "time seems to freeze as your life slips away, leaving you in the void of death.",
  "everything blurs as your life gives out, and you fade into nothing.",
  "the world spins around you as your body gives in, you have died.",
  "everything goes silent as you collaspe and die.",
  "the world grows distant as your health drains, and death takes you.",
  "your vision dims and the world around you disappears as death claims you.",
  "the air grows heavy, and with one final breath, you fade from existence.",
  "the ground fades beneath you as your body finally succumbs to death.",
  "the world keeps turning as you fall into the abyss of your own demise.",
  "your body gives way, and with a final breath, death embraces you.",
  "the world fades into stillness, and with it, your life slips away.",
  "your final moments pass as you embrace death.",
  "you surrender to death as your health has fallen to zero."
];

halfEnergyArray = [
  "you feel drained, like only half of your energy remains.",
  "your energy is running half of what it should be.",
  "you feel a bit sluggish, with just half the energy you normally have.",
  "your vitality feels halved, leaving you feeling sluggish.",
  "you must be running on a hungry stomach, since you feel like you have half your usual energy.",
  "you feel like you've only got half the energy left to keep going.",
  "your energy reserves are half spent, making everything feel slightly more difficult.",
  "you are craving a nap and its affecting you.",
  "you're craving an energy drink considering you're half spent",
  "you feel half as lively.",
  "your body feels like it has half energy left.",
  "you feel halfway exhausted and could use a meal."
];

exhaustedArray = [
  "you feel almost drained.",
  "your energy is nearly depleted.",
  "you feel close to utterly spent.",
  "you feel almost completely wiped out.",
  "you feel like you can't go on any longer.",
  "your body is fatigued, every movement is a struggle.",
  "you feel utterly exhausted, as if you've run out of fuel.",
  "your energy is an inch away from being used up.",
  "you're so tired, every muscle aches.",
  "you feel like you're at the end of your rope and need rest."
];

fullExhaustionArray = [
  "you vomit from exhaustion.",
  "your stamina gives away and you fall down.",
  "a massive cramp floods your tired body.",
  "you feel your heart beating too fast from exhaustion.",
  "you black out from tiredness for a second.",
  "you get an enormous headache from your lack of energy.",
  "you feel if you push your body again, you will probably collapse from exhaustion.",
  "your vision blurs and a ringing fills your ears from sheer fatigue.",
  "your hands tremble uncontrollably from energy depletion.",
  "your knees hit the ground as your body refuses to move forward.",
  "you sway on your feet, dangerously close to fainting.",
  "you drop what you're holding, your grip gone with exhaustion.",
  "a wave of nausea rolls through you, your body screaming for rest.",
  "your muscles spasm randomly, stretched far past their limit.",
  "your mind fogs over, making it hard to think straight.",
  "your heart skips a beat, jolting you with weakness.",
  "a loud ringing drowns out the world as your system begins to shut down.",
  "you stumble forward, unsure whether you’re even awake anymore.",
  "you hear your own heartbeat pounding in your skull, heavy and strained."
];

enterWords = ["crawl", "drift", "enter", "fall", "get", "go", "head", "lay", "lie down", "make", "move", "nap", "prepare", "proceed", "slip", "sleep", "settle", "sink", "snuggle", "step", "surrender", "take", "turn in", "transition"];

restingWords = ["catnap", "doze", "hibernate", "nap", "relax", "rest", "sleep", "slumber", "asleep"];

lightRestWords = ["brief", "fleeting", "minor", "momentary", "passing", "quick", "relax", "short", "small", "tiny", "transient", "breath", "breathe", "breathing"];

moderateRestWords = ["catnap", "doze", "light sleep", "nap", "power nap", "repose", "rest", "siesta", "snooze"];

fullRestWords = ["deep", "deeply", "hibernation", "hibernate", "long", "prolonged", "rejuvenating", "sleep", "slumber", "sound", "uninterrupted"];

bodyParts = [
  // Standard humanoid body parts
  "adam's apple", "abdomen", "achilles tendon", "ankle", "arm", "arteries", "back", "biceps", "bladder", "buttocks", "body",
  "calf", "cheek", "chest", "chin", "collarbone", "deltoid", "diaphragm", "ear", "elbow", "esophagus",
  "eyebrow", "eyelid", "face", "fingers", "foot", "flesh", "forearm", "forehead", "gums", "gut", "groin", "hamstring",
  "hand", "head", "heart", "heel", "hip", "intestines", "jaw", "kidney", "knee", "knuckles", "leg",
  "lips", "liver", "lungs", "lung", "lower back", "nape", "neck", "nose", "palm", "pancreas", "pelvis",
  "quadriceps", "ribs", "scapula", "shin", "shinbone", "shoulder", "side", "skull", "solar plexus",
  "spine", "spleen", "stomach", "sternum", "tailbone", "teeth", "temple", "thigh", "throat", "thumb",
  "toes", "triceps", "upper back", "veins", "waist", "wrist", "wound", "windpipe",

  // Fantasy/Sci-Fi Races
  "antlers", "barb", "beak", "carapace", "chitin", "claw", "crest", "eye stalk", "fang", "feathers",
  "fin", "frill", "gill", "horn", "hoof", "mandible", "membrane", "proboscis", "scales", "shell",
  "snout", "spikes", "stinger", "talon", "tail", "thorax", "trunk", "tusk", "whiskers", "wing"
];

classSkillParts = {
  mage: [
    "Anchor", "Arcane", "Ash", "Astral", "Barrier", "Bind", "Blast", "Blink",
    "Blinding", "Bolt", "Burst", "Black", "Ball", "Chain", "Celestial", "Chilling", "Cosmic", "Crackle", "Crystal",
    "Dim", "Drift", "Drizzle", "Echo", "Ember", "Enchanted", "Ether", "Field",
    "Flick", "Flicker", "Flame", "Fire", "Frost", "Gale", "Glacier", "Grip",
    "Inferno", "Ice", "Jolt", "Leash", "Lightning", "Lucid", "Lunar", "Mana",
    "Mark", "Mist", "Mystic", "Nova", "Orb", "Phantom", "Portal", "Protect", "Pulse",
    "Pyro", "Rainbow", "Radiant", "Red", "Ray", "Ring", "Runic", "Rush", "Seal", "Searing",
    "Shadow", "Shift", "Shield", "Shock", "Shifting", "Sigil", "Silent", "Skip",
    "Slash", "Smoke", "Snap", "Soul", "Spark", "Spectral", "Spirit", "Star",
    "Static", "Step", "Storm", "Strike", "Subdue", "Surge", "Tap", "Temporal",
    "Tide", "Trap", "Ultra", "Ultimate", "Void", "Ward", "Wave", "Whisper", "Wind", "Zone", "Zephyr"
  ],


  healer: [
    "Aid", "Alleviation", "Aura", "Balm", "Blessed", "Blessing", "Cleansing",
    "Cure", "Divine", "Drizzle", "Embrace", "First", "Flow", "Gentle", "Glow",
    "Graceful", "Guardian", "Hallow", "Heal", "Healing", "Holy", "Hope",
    "Light", "Lifeforce", "Mend", "Mercy", "Minor", "Protect", "Pulse",
    "Purify", "Recovery", "Refresh", "Rejuvenate", "Renew", "Restore",
    "Revitalize", "Sanctuary", "Serene", "Shield", "Soothing", "Spark",
    "Spirit", "Surge", "Touch", "Tranquil", "Vital", "Vitality", "Veil", "Whisper"
  ],

  swordsman: [
    "Attack", "Balanced", "Bash", "Blade", "Blow", "Break", "Charge", "Cleave",
    "Combo", "Counter", "Crushing", "Cut", "Dash", "Defensive", "Draw", "Focus",
    "Fury", "Guard", "Heavy", "Leg", "Lunge", "Parry", "Piercing", "Power",
    "Quick", "Rising", "Roll", "Shield", "Slash", "Spin", "Stance", "Steady",
    "Step", "Strike", "Strike", "Sweep", "Swing", "Sword", "Thrust", "Whirlwind",
    "Wide", "One", "Two", "Three", "Four"
  ],

  priest: [
    "Aura", "Barrier", "Blessed", "Blessing", "Breath", "Circle", "Cleansing",
    "Divine", "Embrace", "Faith", "Faithful", "Grace", "Graceful", "Hands",
    "Heal", "Healing", "Hope", "Intervention", "Light", "Luminous", "Mend",
    "Prayer", "Protection", "Radiance", "Radiant", "Renewal", "Renewing",
    "Resurgence", "Sanctify", "Sanctuary", "Serenity", "Shield", "Soulbind",
    "Spirit", "Spiritual", "Strike", "Touch", "Wave", "Ward", "Whisper",
    "Wings"
  ],

  tank: [
    "Absorption", "Aggro", "Anchor", "Bash", "Bastion", "Battle", "Block",
    "Body", "Break", "Charge", "Challenge", "Counter", "Crippling", "Cry",
    "Defensive", "Deflect", "Enduring", "Flesh", "Focus", "Fortify", "Fortitude",
    "Guard", "Guardian", "Hammer", "Hold", "Impact", "Iron", "Line", "Momentum",
    "Protection", "Protective", "Reckless", "Revenge", "Roar", "Shield", "Slam",
    "Stabilizing", "Stance", "Strike", "Sturdy", "Sustain", "Taunt", "Threaten",
    "Toughened", "Unbreakable", "Unshakable", "Unyielding", "Wall", "Ward", "Will"
  ],

  paladin: [
    "Aura", "Avenging", "Barrier", "Beacon", "Blessed", "Blessing", "Blow",
    "Cleansing", "Courage", "Crusader", "Defense", "Divine", "Embrace", "Faith",
    "Faithful", "Flame", "Grace", "Hammer", "Hands", "Heal", "Healing", "Holy",
    "Infusion", "Intervention", "Judgment", "Lay", "Light", "Might",
    "Protection", "Radiance", "Radiant", "Retribution", "Righteous", "Sacred",
    "Seal", "Shield", "Smite", "Spirit", "Strike", "Touch", "Valor", "Ward",
    "Wrath"
  ],

  hero: [
    "Agility", "Arcane", "Aura", "Battle", "Beast", "Bind", "Blinding", "Blast",
    "Boost", "Breath", "Burst", "Charge", "Clap", "Cleansing", "Cloak", "Cry",
    "Dash", "Defensive", "Dragon", "Elemental", "Familiar", "Fireball", "Fist",
    "Flash", "Flare", "Force", "Fury", "Gravity", "Guard", "Heroic", "Haste", "Heal",
    "Healing", "Ice", "Invisibility", "Jump", "Leap", "Leech", "Light", "Mana",
    "Magnetic", "Might", "Poison", "Power", "Protection", "Pull", "Push",
    "Quick", "Rallying", "Roar", "Shield", "Slash", "Smash", "Speed", "Spirit",
    "Spike", "Sprint", "Step", "Stone", "Strike", "Summon", "Thunder", "Touch",
    "Walk", "Ward", "Wave", "Wind", "Wings"
  ],

  assassin: [
    "Ambush", "Blade", "Blink", "Choke", "Cloak", "Cripple", "Cut", "Dash", "Dagger",
    "Death", "Drift", "Escape", "Fang", "Fade", "Feint", "Flick", "Gloom", "Lacerate",
    "Mark", "Night", "Poison", "Pounce", "Quick", "Rush", "Shade", "Shadow", "Shiv",
    "Silent", "Slash", "Slip", "Smoke", "Snare", "Sneak", "Speed", "Spine", "Spin",
    "Stab", "Step", "Strike", "Trip", "Twist", "Veil", "Venom", "Vanish", "Wound"
  ],

  archer: [
    "Aim", "Arrow", "Blast", "Blink", "Bolt", "Burst", "Camouflage", "Charge", "Dash",
    "Draw", "Eagle", "Feather", "Flare", "Focus", "Gale", "Glide", "Hit", "Leap",
    "Mark", "Momentum", "Multi", "Nock", "Pierce", "Pin", "Quick", "Quiver", "Rain",
    "Rapid", "Recurve", "Release", "Ricochet", "Rush", "Snipe", "Speed", "Strike",
    "Volley", "Wind", "Wing", "Zoom"
  ],

  alchemist: [
    "Acid", "Amber", "Aether", "Arc", "Brew", "Burst", "Catalyst", "Cauldron", "Charge",
    "Compound", "Concoction", "Corrode", "Crackle", "Dust", "Elixir", "Essence", "Extract",
    "Fume", "Flask", "Fusion", "Gas", "Glow", "Ignite", "Infuse", "Mix", "Mist",
    "Mixture", "Potion", "Reagent", "Resin", "Smoke", "Solution", "Spark", "Spill",
    "Splash", "Spore", "Steam", "Tincture", "Toxin", "Transmute", "Vapor", "Vial", "Volatile"
  ],

  reincarnate: [
    "Ancestral", "Awakening", "Beyond", "Binding", "Bloom", "Call", "Cycle", "Departed", "Echo",
    "Ember", "Essence", "Fade", "Flicker", "Flow", "Ghost", "Grave", "Life", "Light",
    "Memory", "Phoenix", "Rebirth", "Recall", "Reform", "Reflesh", "Renew", "Reshape", "Resoul",
    "Revive", "Rise", "Rift", "Return", "Shimmer", "Soul", "Spirit", "Trace", "Transcend",
    "Undying", "Vestige", "Whisper"
  ],

  summoner: [
    "Arc", "Avatar", "Beast", "Bind", "Bond", "Call", "Channel", "Conduit", "Construct",
    "Doppel", "Echo", "Elemental", "Entity", "Familiar", "Fiend", "Form", "Gate", "Ghoul",
    "Golem", "Guard", "Manifest", "Phantom", "Portal", "Projection", "Servant", "Shade", "Shadow",
    "Sigil", "Simulacrum", "Spirit", "Spawn", "Specter", "Summon", "Totem", "Trace", "Twin", "Wisp"
  ],

  necromancer: [
    "Abyss", "Bind", "Black", "Blood", "Bone", "Chant", "Corrupt", "Curse", "Dark", "Decay",
    "Defile", "Doom", "Dread", "Echo", "Ghast", "Ghoul", "Grave", "Grim", "Haunt", "Hex",
    "Hollow", "Husk", "Lich", "Mark", "Mire", "Mourn", "Necro", "Oblivion", "Plague", "Raise",
    "Reap", "Rot", "Ruin", "Sever", "Shade", "Shadow", "Shroud", "Sinister", "Skull", "Soul",
    "Specter", "Spine", "Spirit", "Torment", "Undead", "Unholy", "Vessel", "Wither", "Wraith"
  ],

  fighter: [
    "Bash", "Blow", "Break", "Brute", "Charge", "Clash", "Combo", "Counter", "Crack", "Crash",
    "Crush", "Drive", "Fist", "Flurry", "Focus", "Force", "Hammer", "Hook", "Jab", "Lunge",
    "Momentum", "Overwhelm", "Pummel", "Push", "Rage", "Rampage", "Rip", "Rush", "Shatter",
    "Shock", "Shove", "Smash", "Snap", "Strike", "Stun", "Sweep", "Swing", "Thrust", "Uppercut",
    "Vault", "Vigor", "Warcry", "Wild", "Wreck"
  ],
  warrior: [
    "Armor", "Bash", "Blade", "Block", "Brave", "Break", "Charge", "Clash", "Cleave", "Crush",
    "Fury", "Grit", "Guard", "Lunge", "Push", "Rampart", "Roar", "Rush", "Shield", "Shout",
    "Slash", "Stance", "Steel", "Strike", "Swing", "Thrust"
  ],

  berserker: [
    "Bite", "Blast", "Blow", "Blood", "Brawl", "Break", "Brute", "Charge", "Crush", "Frenzy",
    "Fury", "Howl", "Madness", "Maul", "Rampage", "Rage", "Rip", "Roar", "Rush", "Savage",
    "Smash", "Strike", "Tear", "Thrash", "Unleash", "Wild"
  ],

  bard: [
    "Ballad", "Cadence", "Chime", "Charm", "Chorus", "Duet", "Echo", "Harmony", "Hymn", "Inspire",
    "Lute", "Melody", "Note", "Refrain", "Resonance", "Serenade", "Song", "Sound", "Strum",
    "Tune", "Verse", "Vibe", "Voice", "Whistle"
  ],

  gunfighter: [
    "Aim", "Bang", "Banger", "Barrel", "Blast", "Bullet", "Burst", "Chamber", "Click", "Fire", "Flash",
    "Jolt", "Mark", "Rapid", "Reload", "Ricochet", "Scope", "Shell", "Shot", "Sight", "Snap",
    "Spray", "Target", "Tactical", "Trigger"
  ],

  thief: [
    "Backstab", "Blind", "Cloak", "Cut", "Dagger", "Dart", "Escape", "Feint", "Hook", "Hide",
    "Lurk", "Pick", "Poison", "Shadow", "Silence", "Slip", "Snatch", "Sneak", "Steal", "Step",
    "Strike", "Swipe", "Trap", "Trip", "Vanish"
  ],

  monk: [
    "Balance", "Breath", "Center", "Chi", "Discipline", "Focus", "Flow", "Form", "Grace", "Guard",
    "Harmony", "Kick", "Meditate", "Motion", "Palm", "Parry", "Path", "Push", "Sense", "Spirit",
    "Step", "Stillness", "Strike", "Wave", "Will"
  ],

  barbarian: [
    "Bash", "Bellow", "Blow", "Break", "Brute", "Crash", "Crack", "Frenzy", "Fury", "Howl",
    "Rampage", "Rage", "Rip", "Roar", "Rush", "Slam", "Smash", "Stomp", "Strike", "Swing",
    "Tear", "Trample", "Wreck", "Wild", "Shatter"
  ],

  ranger: [
    "Aim", "Arrow", "Bow", "Camouflage", "Dash", "Eagle", "Edge", "Feather", "Flare", "Focus",
    "Hide", "Hawk", "Leap", "Mark", "Pull", "Rapid", "Scout", "Shot", "Snare", "Step",
    "Strike", "Track", "Trail", "Trap", "Wind"
  ],

  wizard: [
    "Arcane", "Beam", "Bind", "Blast", "Bolt", "Burn", "Cast", "Channel", "Essence", "Fire",
    "Flash", "Flicker", "Focus", "Mana", "Mystic", "Ray", "Scroll", "Shield", "Spark", "Spell",
    "Storm", "Surge", "Vortex", "Ward", "Wave"
  ],

  sorcerer: [
    "Arcana", "Blast", "Burst", "Chaos", "Charm", "Curse", "Energy", "Flicker", "Flow", "Focus",
    "Glow", "Hex", "Ignite", "Inferno", "Mystic", "Nova", "Power", "Pulse", "Rune", "Sear",
    "Scorch", "Sigil", "Spell", "Storm", "Whirl"
  ],

  shaman: [
    "Aura", "Balance", "Call", "Chant", "Crack", "Drum", "Earth", "Echo", "Flame", "Nature",
    "Pulse", "Rain", "Ritual", "Root", "Shiver", "Sky", "Snap", "Spirit", "Stone", "Storm",
    "Thunder", "Totem", "Vision", "Wave", "Wind"
  ],

  rogue: [
    "Ambush", "Back", "Cloak", "Cut", "Dagger", "Dart", "Dash", "Feign", "Flick", "Hook",
    "Jab", "Lurk", "Mark", "Poison", "Shadow", "Silence", "Sneak", "Stab", "Step", "Strike",
    "Swipe", "Trip", "Trick", "Twist", "Vanish"
  ],

  druid: [
    "Bark", "Bloom", "Branch", "Call", "Cycle", "Fang", "Feral", "Flora", "Grow", "Harmony",
    "Howl", "Leaf", "Moon", "Nature", "Pulse", "Rain", "Root", "Seed", "Shape", "Shroud",
    "Spirit", "Spore", "Sun", "Thorn", "Wild"
  ]
};

const upgradeTier1 = [
  "Bright", "Formed", "Gentle", "Greater", "Light",
  "Modest", "Quiet", "Rare", "Raw", "Shaped", "Spirited",
  "Swift", "Tested", "Trial", "Tuned", "Warmed", "Wild"
];

const upgradeTier2 = [
  "Amplified", "Angled", "Balanced", "Bouncy", "Bright", "Calculated", "Clear",
  "Controlled", "Crisp", "Dark", "Double", "Efficient", "Enhanced", "Firm",
  "Frosted", "Honed", "Improved", "Keen", "Measured", "Polished",
  "Precise", "Refined", "Sharpened", "Settled", "Stable", "Steady"
];

const upgradeTier3 = [
  "Awakened", "Blessed", "Black", "Blue", "Brisk", "Charged", "Crystalled",
  "Empowered", "Energetic", "Evolved", "Fortified", "Glassy", "Ignited",
  "Infused", "Purple", "Quickened", "Reactive", "Red", "Resonant", "Sharp",
  "Stirring", "Swift", "Triple", "Vibrant", "Violet", "Welled", "Zapped"
];

const upgradeTier4 = [
  "Aurora", "Arc-lit", "Blazing", "Crackling", "Cursed", "Echoing", "Emberlit",
  "Fiery", "Flamelaced", "Ghostflame", "Groundbreaking", "Howling",
  "Impeccable", "Infernal", "Mystic", "Quad", "Rainbow", "Shocking",
  "Smoldering", "Spellburned", "Stormlit", "Twilight", "Warding",
  "Wildborn"
];

const upgradeTier5 = [
  "Arcane", "Astral", "Celestial", "Chronoscarred", "Divine",
  "Ethereal", "Glimmering", "Godly", "Godsent", "Heavenlit",
  "Impossible", "Insane", "Legendary", "Luminous", "Mythforged",
  "Omnipotent", "Omniscient", "Perfect", "Quintuple", "Radiant", "Runebound",
  "Starwoven", "Temporal", "Transcendent", "Vengeful", "Voidtouched"
];

const intensityTier = [
  "Newbie level",
  "Novice level",
  "Rookie level",
  "Student level",
  "Intermediate level",
  "Skilled level",
  "Talented level",
  "Seasoned level",
  "Proficient level",
  'Experienced level',
  'Advanced level',
  'Senior level',
  'Expert level',
  'Ultra level',
  'Legendary level',
  'Godly level'
];

const capacityTier = [
  "Empty",
  "Nearly Empty",
  "Quarter Full",
  "One Thirds Full",
  "Slightly Below Half",
  "Half",
  "Slightly Above Half",
  "Three Quarters Full",
  "Mostly Full",
  "Nearly Full",
  "Full"
];

const skillPower1 = [
  "[Skill], amateurish.",
  "[Skill], tentative and raw.",
  "[Skill] flickers in.",
  "A soft hum of [Skill] stirs and buzzes.",
  "You fumble slightly as [Skill] begins to form.",
  "[Skill] shly whispers through the air.",
  "You exude some inexperience with [Skill].",
  "A cute display of [Skill] executes.",
  "You manage to cast your [Skill].",
  "'[Skill], let's try this!'",
  "Your mana violently exudes as you bet your experience on [Skill].",
  "Your mana surges, fueled by hope for [Skill].",
  "Like a student of magic, your [Skill] executes.",
  "A steady show magic unfolds as [Skill] is casted.",
  "A cautious burst of magic announces your [Skill] skill."
];

const skillPower2 = [
  "You manage a quiet execution of [Skill].",
  "[Skill] winds from your fingertips.",
  "The atmosphere around you shifts in response to your [Skill].",
  "The air around you shifts subtly as [Skill] activates.",
  "[Skill] activates.",
  "Your [Skill] moves with purpose and grace.",
  "You call on [Skill], and it obeys.",
  "Your display of [Skill] arrives.",
  "Your [Skill] responds to your aura.",
  "You wield [Skill] with growing assurance.",
  "The power of [Skill] resonates calmly around you.",
  "You watch your skill [Skill] execute."
];

const skillPower3 = [
  "You perform [Skill] with steady control.",
  "[Skill] manifests with focus and clarity.",
  "There’s balance in your motion as [Skill] takes shape.",
  "You cast [Skill] like a practiced movement.",
  "The air listens as your [Skill] begins to exert.",
  "Your [Skill] shows practice.",
  "The flow of [Skill] feels reliable and calm.",
  "[Skill] appears with ease and intention.",
  "You hesitate slightly, but [Skill] still forms.",
  "[Skill] emerges with some effort.",
  "You begin to shape [Skill], slowly finding your rhythm."
];

const skillPower4 = [
  "[Skill] flows from you with growing strength.",
  "You shape [Skill] with visible intent.",
  "A steady pulse of [Skill] radiates outward.",
  "[Skill] stretches from your hands, confident and sure.",
  "Your presence deepens as [Skill] gathers momentum.",
  "[Skill] begins to answer your deeper will.",
  "Your hands move with purpose as [Skill] grows.",
  "You steady yourself as [Skill] begins to surge.",
  "A touch of control helps bring [Skill] into focus.",
  "[Skill] begins to form, guided by mild focus.",
  "You call forth [Skill] with some concentration."
];

const skillPower5 = [
  "Your [Skill] cuts through the moment with precision.",
  "You command [Skill] like a seasoned wielder.",
  "[Skill] echoes through the space with purpose.",
  "The energy of [Skill] answers your call instantly.",
  "You strike the air with [Skill], crisp and controlled.",
  "Your [Skill] shows diligence.",
  "[Skill] weaves into the moment with clarity.",
  "You place [Skill] with practiced poise.",
  "[Skill] arrives a little delayed but steady.",
  "Your posture slips slightly as [Skill] ignites.",
  "[Skill] builds slower than usual but holds form."
];

const skillPower6 = [
  "[Skill] bursts forward with confident energy.",
  "You unleash [Skill] with clear focus and strength.",
  "[Skill] rushes from you, drawing attention.",
  "The air crackles as your [Skill] expands outward.",
  "You drive [Skill] forward like a rolling wave.",
  "You propel [Skill] with unwavering purpose.",
  "[Skill] ripples outward with firm resolve.",
  "You steady your stance as [Skill] builds pressure.",
  "[Skill] sparks briefly before catching stride.",
  "A slight delay precedes your release of [Skill].",
  "Your grip tightens as [Skill] begins to respond."
];

const skillPower7 = [
  "[Skill] tears through the moment like thunder.",
  "You channel [Skill] with explosive force.",
  "Your [Skill] roars out, wild yet honed.",
  "The air begins to quivers under your [Skill]’s advance.",
  "A storm of [Skill] arcs from your stance.",
  "You shape [Skill] like a crashing tide.",
  "[Skill] erupts with raw, controlled fury.",
  "[Skill] briefly stutters before finding its power.",
  "You summon [Skill] with effort, then let it surge.",
  "[Skill] starts less violently, but ramps up quickly.",
  "A sharp breath helps you anchor your [Skill]."
];

const skillPower8 = [
  "Your [Skill] lights the scene with brilliance.",
  "[Skill] surges like a tidal force through your hands.",
  "You bend the battlefield with the strength of your [Skill].",
  "Light fractures and reforms around your [Skill].",
  "Everything shifts to accommodate your [Skill]’s presence.",
  "[Skill] pulses with undeniable clarity.",
  "You channel [Skill] with a sense of destiny.",
  "Some strain precedes your full release of [Skill].",
  "You feel [Skill] climb before unleashing.",
  "The brilliance of [Skill] dims briefly before growing.",
  "It takes a moment, but [Skill] aligns with your will."
];

const skillPower9 = [
  "[Skill] blazes with overwhelming intensity.",
  "You become a beacon of [Skill], feared and admired.",
  "[Skill] reverberates like an anthem through space.",
  "You wield [Skill] like a blade of pure will.",
  "Even time seems to hesitate at your display of [Skill].",
  "[Skill] radiates from you like a final warning.",
  "The sheer volume of [Skill] overwhelms the moment.",
  "Your [Skill] flares, briefly uneven, then locks into place.",
  "You struggle slightly, but [Skill] dominates nonetheless.",
  "An edge of chaos tempers your display of [Skill].",
  "[Skill] takes a moment to stabilize before blazing."
];

const skillPower10 = [
  "[Skill] erupts with grandeur.",
  "You are the epicenter of myth, and [Skill] is your signature.",
  "The world bends as [Skill] pours from your soul.",
  "[Skill] transcends power—it becomes legend in motion.",
  "You don’t use [Skill]; you **are** [Skill], made manifest.",
  "Your sage mastery of [Skill] speaks for itself.",
  "[Skill] reshapes the moment like a sovereign decree.",
  "You command [Skill] as if born to it.",
  "A flicker of effort breaks through before [Skill] takes a strong hold.",
  "There’s a crack in your flow, but [Skill] still greatly triumphs.",
  "Your form falters—but [Skill] holds, vast and imposing."
];

const harnessSkill = [
  "You attempt to harness your [Skill] skill.",
  "You attempt a quickened execution of [Skill].",
  "You attempt to shortcut cast [Skill].",
  "Your shortened incantation of [Skill] attempts to execute.",
  "You try to quick cast [Skill].",
  "You focus intently to channel [Skill] rapidly.",
  "You speed up your [Skill] casting.",
  "You hasten your gestures, trying to control [Skill].",
  "You push your limits to harness [Skill] faster.",
  "Your quickened [Skill] flickers in.",
  "You grasp at the edge of your [Skill], trying to unleash it swiftly.",
  "Your hurried words shape your [Skill] skill.",
  "You risk a rapid cast of [Skill], hoping to avoid misfire.",
  "You rush your concentration, testing the speed of [Skill].",
  "You force [Skill] into a quicker form, with successful execution."
];

const talentPower1 = [
  "Your inexperience with [Talent] is a bewilderment to all.",
  "You kind of fumble with your [Talent].",
  "Your [Talent] attempt is a bit clumsy and awkward, barely making the mark.",
  "You somewhat struggle with [Talent].",
  "You scratch the surface of [Talent], barely making it work.",
  "Your attempt at [Talent] seems improvised and shaky.",
  "You poke around with [Talent].",
  "Your nerves show a bit in your [Talent].",
  "Your [Talent] produces something...",
  "You try to apply [Talent], hoping something works.",
  "It appears your [Talent]... exists. ",
  "You try your hand at [Talent], but it comes a bit crude.",
  "Some experience shows with your [Talent].",
  "Your [Talent] is novice."
];

const talentPower2 = [
  "Your [Talent] gets the job done—just barely.",
  "You manage to use [Talent] with shaky hands.",
  "Your [Talent] shows promise, though not much polish.",
  "You produce something functional with your [Talent].",
  "There's a glimmer of competence in your [Talent].",
  "Your [Talent] isn't impressive, but it works.",
  "You apply [Talent] with a touch of uncertainty.",
  "Your [Talent] results in something usable, if unimpressive.",
  "You lean on your [Talent], and it holds... for now.",
  "You wobble through [Talent] but reach the end.",
  "Your [Talent] just about meets expectations.",
  "You coax [Talent] into doing what you need, barely."
];

const talentPower3 = [
  "You use your [Talent] with growing control.",
  "There’s a steady rhythm to your [Talent].",
  "You manage [Talent] with noticeable improvement.",
  "You bring out a solid result through your [Talent].",
  "Your [Talent] begins to feel more natural.",
  "You apply [Talent] with basic but visible skill.",
  "You focus, and your [Talent] meets the task.",
  "Your [Talent] produces something respectable.",
  "You get the hang of [Talent], bit by bit.",
  "Your [Talent] speaks of effort and growing experience.",
  "You’re beginning to trust your [Talent] more.",
  "Your [Talent] shows good instinct, even if rough."
];

const talentPower4 = [
  "Your [Talent] is almost average.",
  "You apply [Talent] with practiced ease.",
  "Your [Talent] yields a capable result.",
  "You control your [Talent] with steady hands.",
  "There’s some confidence in the way you wield [Talent].",
  "You navigate the task through [Talent] with some experience.",
  "You focus on precision, and your [Talent] follows.",
  "Your [Talent] comes across as mid.",
  "Your [Talent] comes across as confident, if a bit stiff.",
  "You deliver results through [Talent] that start to feel deliberate.",
  "The [Talent] process is steady, if not yet graceful.",
  "Your [Talent] shows some finesse."
];

const talentPower5 = [
  "You channel your [Talent] with average power and direction.",
  "Your [Talent] comes through with some clarity.",
  "You make good use of [Talent].",
  "Your [Talent] delivers an average impression.",
  "There’s energy and structure in your [Talent].",
  "You tackle the task head-on with your [Talent].",
  "Your [Talent] delivers results that others would notice.",
  "You take confident action using [Talent].",
  "Your [Talent] flares briefly but effectively.",
  "You pour focus into [Talent] and it answers.",
  "You guide [Talent] with confidence, despite a few bumps.",
  "Your [Talent] hits its mark, though a bit loud about it."
];

const talentPower6 = [
  "You execute your [Talent] with precision and force.",
  "Your [Talent] flows with sharp clarity.",
  "You apply [Talent] like a skilled artisan.",
  "There’s a snap to your [Talent]—clean and confident.",
  "You make quick, decisive use of your [Talent].",
  "Your [Talent] carves through the problem efficiently.",
  "You press forward, and your [Talent] follows like muscle memory.",
  "Your [Talent] is polished, but still evolving.",
  "You stumble briefly, but your [Talent] picks up fast.",
  "You almost rush [Talent], but maintain control.",
  "Your [Talent] flares brightly, then settles into rhythm.",
  "There’s fire in your [Talent], even with small missteps."
];

const talentPower7 = [
  "You finesse the task beautifully with your [Talent].",
  "Your [Talent] operates with natural grace.",
  "You show clear mastery in how you use [Talent].",
  "Your [Talent] brings about results with flair.",
  "The rhythm of your [Talent] is captivating.",
  "You perform with an elegance only [Talent] can bring.",
  "Your [Talent] shines with practiced power.",
  "Every move with [Talent] feels smooth and strong.",
  "You impress without trying—your [Talent] speaks for itself.",
  "There’s minor flourish in your [Talent], but it feels earned."
];

const talentPower8 = [
  "You make art out of your [Talent].",
  "Your [Talent] is nearly flawless and refined.",
  "You manipulate the task with pure [Talent].",
  "There’s fluid, expert rhythm in your [Talent].",
  "Your [Talent] guides the task like second nature.",
  "You don't hesitate—your [Talent] dances forward.",
  "Your [Talent] brings stunning results with minimal effort.",
  "Every detail is accounted for in your [Talent].",
  "Even your pauses in [Talent] seem intentional.",
  "Your [Talent] could teach others just by observation."
];

const talentPower9 = [
  "Your [Talent] dominates the task with masterful grace.",
  "The world bends to the motion of your [Talent].",
  "You handle the process like a legend of [Talent].",
  "Nothing escapes your control—your [Talent] is commanding.",
  "You move with the calm certainty of [Talent] mastery.",
  "The power of [Talent] seems embedded in your being.",
  "Your [Talent] feels woven into your identity.",
  "You don’t perform [Talent]—you embody it.",
  "Each motion in your [Talent] is precise and absolute.",
  "You bring about near-perfection through [Talent]."
];

const talentPower10 = [
  "You shape reality with your [Talent].",
  "The world watches in awe of your [Talent].",
  "Your [Talent] is myth in motion.",
  "You transcend the task through your [Talent].",
  "Your [Talent] radiates timeless mastery.",
  "Every action is divine—pure [Talent] at its peak.",
  "You work miracles with your [Talent].",
  "Legends will remember this moment of [Talent].",
  "The essence of [Talent] flows through you fully.",
  "You perform [Talent] with power that defies understanding."
];

const scoutWords = [
  "analyze", "assess", "calculate", "decipher", "examine", "inspect", "investigate", "listen",
  "look around", "looks around", "observe", "scan", "scope out", "scout", "survey", "track", "take in"
];

const detail1 = [
  "You didn't notice much.",
  "Nothing stands out.",
  "It all seems normal to your untrained mind.",
  "You can only see the basics, but that's about it.",
  "Your glance passes over everything without meaning.",
  "There's little your eyes can make sense of.",
  "The area feels vague and indistinct.",
  "You are lost on whatever might be here.",
  "You wish you studied more.",
  "Your brain is foggy.",
  "Your eyes are sharp but your mind isn't.",
  "You rack your puny mind only to make out some small details."
];

const detail2 = [
  "You notice a few obvious features.",
  "There’s not much that catches your eye.",
  "You spot one or two things of interest.",
  "Your attention grazes the surface.",
  "Your mind snags briefly on something out of place.",
  "You register something small but can’t quite define it.",
  "You sense the bare outlines of activity.",
  "You catch a glimpse, but it fades before it’s clear.",
  "You thank the heavens that you can at least make out a detail or two."
];

const detail3 = [
  "You pick up on a few small details.",
  "Something feels off, but you're not sure what.",
  "You catch glimpses of subtle patterns.",
  "There’s more here than meets the eye.",
  "Your eyes trace uneven paths in the environment.",
  "A sound or motion almost makes sense to you.",
  "You feel the tug of something unspoken.",
  "Hints of order tease your awareness.",
  "You embrace some naivety in your surveying skills."
];

const detail4 = [
  "You notice patterns others might miss.",
  "Your thoughts linger on a few specific details.",
  "You recognize some purposeful arrangements.",
  "You catch onto a few underlying cues.",
  "Objects seem placed with intent, not randomness.",
  "You notice odd alignments that suggest deeper function.",
  "A faint mark draws your gaze, meaningful or not.",
  "You detect symmetry hidden beneath the clutter.",
  "Your mind sparks with some tiny clues."
];

const detail5 = [
  "You discern useful clues.",
  "Your mind starts connecting dots.",
  "You get a sense of structure in your surroundings.",
  "You begin to grasp the bigger picture.",
  "Faint impressions resolve into hints of narrative.",
  "There’s rhythm in the way things are spaced.",
  "Your mind fills in the blanks naturally.",
  "Disparate parts start to form a whole."
];

const detail6 = [
  "You quickly spot key elements of the scene.",
  "You see layers of meaning others overlook.",
  "Your perception filters noise from signal.",
  "You identify important features with ease.",
  "The scene unfolds before you like a planned arrangement.",
  "Each item seems to tell part of a greater story.",
  "You detect movement where others would miss stillness.",
  "Details leap out like words in a book."
];

const detail7 = [
  "You understand the implications of what you see.",
  "Your insight draws out subtle truths.",
  "You recognize hidden patterns and meanings.",
  "Nothing escapes your notice.",
  "Even the silence has structure to your ears.",
  "You sense motive behind seemingly random choices.",
  "Your thoughts flow with the shape of the space.",
  "You interpret the stillness as something waiting to act."
];

const detail8 = [
  "Your mind pieces together invisible threads.",
  "You interpret the scene with clarity and speed.",
  "Even faint traces yield meaningful conclusions.",
  "Your intuition and logic work in perfect sync.",
  "You sense memory lingering in corners and echoes.",
  "Mundane details crystallize into valuable insights.",
  "You perceive intent beneath design and behavior.",
  "Your mind stitches everything together instantly."
];

const detail9 = [
  "You analyze your surroundings with surgical precision.",
  "You intuit layers of complexity with ease.",
  "Every detail seems to speak to you.",
  "You comprehend not just the what, but the why.",
  "Your thoughts dissect the space like a scholar with diagrams.",
  "Even stillness suggests history to you.",
  "You distinguish illusion from function with ease.",
  "Your awareness stretches beyond what is visible."
];

const detail10 = [
  "You perceive truths hidden from ordinary minds.",
  "The full scope of the environment opens itself to you.",
  "You see behind appearances to the reality beneath.",
  "Your awareness feels nearly omniscient.",
  "You interpret the moment as though reading fate itself.",
  "Every shadow, scent, and silence is meaningful.",
  "You perceive time’s passage through dust and echoes.",
  "The world reveals its secrets before you even ask.",
  "Your eyes locks into every single detail.",
  "Your extreme intelligence aids you."
];

const defendTiers = {
  tier1: [ // Feeble Block
    "Your guard is unsteady.",
    "You put up a shaky block.",
    "You try to block, barely holding form.",
    "You manage a weak defensive stance.",
    "Your hands rise, but lack conviction.",
    "You form a block out of desperation.",
    "Your defense is uncertain at best.",
    "Your body flinches through the block.",
    "You brace clumsily.",
    "You throw up a rushed guard."
  ],

  tier2: [ // Basic Block
    "You brace yourself with effort.",
    "Your block is simple but reliable.",
    "You hold your ground with caution.",
    "A modest guard takes form.",
    "You manage a basic defensive posture.",
    "Your stance holds — barely.",
    "You plant your feet and raise your arms.",
    "Your block is enough, just enough.",
    "Your defense is serviceable.",
    "You position yourself with hesitation."
  ],

  tier3: [ // Trained Block
    "You raise a firm guard.",
    "Your stance is practiced and steady.",
    "You block with discipline.",
    "Your defense forms without hesitation.",
    "Your posture is controlled and alert.",
    "You enter a well-taught stance.",
    "Your block snaps into position with intent.",
    "You guard efficiently and without panic.",
    "You adopt the proper form on instinct.",
    "You hold the line with experience."
  ],

  tier4: [ // Solid Block
    "Your block is sturdy and resolute.",
    "You form a reliable defense.",
    "You meet the moment with focus.",
    "Your guard locks into place.",
    "You set a solid foundation.",
    "Your posture is unwavering.",
    "You ground yourself and brace well.",
    "Your stance resists all shake.",
    "You block with obvious competence.",
    "Your guard holds with confidence."
  ],

  tier5: [ // Hardened Block
    "Your guard feels forged from iron.",
    "You set your stance like a shield wall.",
    "You block with unwavering strength.",
    "Your defense is precise and heavy.",
    "Your guard snaps into place with weight.",
    "You brace with the presence of a veteran.",
    "You absorb tension into your form.",
    "Your body channels pure resistance.",
    "You root into the earth with resolve.",
    "Your block speaks of hard-won training."
  ],

  tier6: [ // Powerful Block
    "Your block lands with force.",
    "You drive your stance into the ground.",
    "Your guard echoes with authority.",
    "You form a wall of trained strength.",
    "You brace like a seasoned warrior.",
    "You command space with your defense.",
    "Your limbs move with purposeful strength.",
    "Your guard channels power.",
    "You hold like reinforced steel.",
    "Your stance thunders with tension."
  ],

  tier7: [ // Commanding Block
    "Your guard commands respect.",
    "You block with supreme control.",
    "Your defense flows with purpose.",
    "Your stance carries dominance.",
    "You impose your will through your guard.",
    "You guide your energy into immovable form.",
    "You embody discipline in your block.",
    "You anticipate and adjust mid-stance.",
    "Your body and focus are one.",
    "Your block crushes hesitation."
  ],

  tier8: [ // Unyielding Block
    "Your stance becomes immovable.",
    "You block like a fortress.",
    "Your guard is absolute.",
    "You become a bastion of defense.",
    "Your form is locked in perfect balance.",
    "You radiate defensive mastery.",
    "Your block does not budge an inch.",
    "You are the wall others fear to face.",
    "Your presence alone is a blockade.",
    "You shield yourself without effort."
  ],

  tier9: [ // Transcendent Block
    "Your block feels beyond mortal training.",
    "You flow into a seamless defense.",
    "Your stance carries divine timing.",
    "Your presence alone halts momentum.",
    "Your block exists in pure form.",
    "You move as if choreographed by the cosmos.",
    "You meet force with eternal calm.",
    "Your block hums with flawless rhythm.",
    "You are in perfect sync with intent.",
    "You become the idea of stillness."
  ],

  tier10: [ // Eternal Block
    "You become the concept of defense itself.",
    "Your guard echoes through time.",
    "Your block defines unbreakable.",
    "You manifest perfect stillness.",
    "Your stance is eternal and unassailable.",
    "You are the immovable object made manifest.",
    "No motion escapes your attention.",
    "You block before the threat even arrives.",
    "You defy entropy through still form.",
    "You are defense incarnate."
  ]
};

const defendWords = ["brace", "braced stance", "brace up", "block", "defend", "defensive posture", "fortify", "guard up", "harden", "hold firm", "hold ground", "parry", "protect", "raise shield", "ready guard", "resist", "shield", "stand firm", "steady stance", "turtle up"];

const exerciseWords = ["curls", "bicep curls", "bicycle crunches", "bench press", "burpees", "butt kicks", "calf raises", "chin ups", "crunches", "deadlifts", "dumbbell flys", "glute bridges", "hammer curls", "high knees", "jump squats", "jumping jacks", "kettlebell swings", "leg raises", "lunges", "mountain climbers", "planks", "pull ups", "pullup", "pullups", "pull up", "push ups", "pushups", "push up", "pushup", "shoulder press", "side planks", "sit ups", "skaters", "squats", "step-ups", "tricep dips", "wall sits"];

doWords = ["do", "does"];

exerciseResultPhrases = [
  "You successfully complete [num] reps.",
  "You pull off [num] reps.",
  "You handle [num] reps.",
  "You power through [num] reps.",
  "You had enough energy for [num] reps."
]

const pluralizableWords = ["cling", "climb", "clutch", "carry", "connect", "cut", "disrupt", "drive", "echo", "feel", "flow", "follow", "grasp", "hold", "handles", "harness", "hum", "knock", "latch", "land", "leave", "manage", "make", "move", "need", "open", "press", "pull", "push", "put", "reach", "recoil", "resonate", "ring", "rush", "settle", "shift", "struggle", "shimmer", "shudder", "slice", "speak", "seize", "split", "start", "stumble", "surge", "try", "take", "tremble", "vibrate", "walk", "weave", "wrap", "write"];

const skillAcquisitionPhrases = [
  "In a flash of clarity, you acquire the skill(s) [Skill] as you level up.",
  "The pieces fall into place — you gain the skill(s) [Skill] as you level up.",
  "A sudden realization strikes — the skill(s) [Skill] become yours as you level up.",
  "Instinct takes over, and you grasp the skill(s) [Skill] as you level up.",
  "Through focus and will, you acquire [Skill] as you level up.",
  "The world slows, and [Skill] becomes second nature as you level up.",
  "Connections form in your mind — you now know [Skill] as you level up.",
  "A spark of understanding ignites — [Skill] is learned as you level up.",
  "Without thinking, your mind moves, acquiring [Skill] as you level up.",
  "The path ahead is clearer — [Skill] joins your arsenal as you level up.",
  "In the quiet between heartbeats, [Skill] settles into you as you level up.",
  "A subtle shift within tells you: [Skill] is yours as you level up.",
  "Your mind sharpens, and [Skill] takes root as you level up.",
  "The lesson clicks — you now wield [Skill] as you level up.",
  "Thoughts and experiences have meshed together, [Skill] becomes yours as you level up."
];


/////////////////////////////////////////////////////////////////////////////////////
/// TAS STANDARD FUNCTIONS

// Check for lock or unlock script command from input and execute
function scriptSwitch_TAS(text) {
  if (state.startScript == false) {
    if (text.includes("/start")) {
      state.startScript = true;
      text = "\n<< 🔓 TAS Script Unlocked! >>";
    }
  }

  if (state.startScript == true) {
    if (text.includes("/end")) {
      state.startScript = false;
      text = "\n<< 🔒 TAS Script Locked! >>"
    }
  }

  return text;
}

//detect /help and display help
function helpCommandInput_TAS(text) {
  if (text.includes("/help stats")) {
    state.commandCenter_TAS =
      `
    <<
    📊 Player Stats Guide

    - 📥 Type Player Stats in the Story Cards to view your current stats.
    - 🔄 Stats auto-update based on natural player input and AI output.
    - ✏️ Player Stats story card editing format: STAT: x/maxX.
    - 🗒️ All stat change logs are located in their story card notes.

    🧠 Gameplay Mechanics

    - ❤️ Health and 🔵 Mana regenerate every turn.
    - ⚡ Energy decreases every turn.
    - ⚠️ Low Health or Energy leads to consequences.
    - 🖤 Running out of energy results in ~10% health reduction every turn.
    - 📈 Stats gain points when used. Points scale exponentially lower as your stats increase.
    - 🎓 When a stat is maxed, points overflow to your EXP pool for leveling up instead.
    - 🆙 Leveling up increases all max stats.

    📐 Scaling & Calculations

    - 🧠 Mana scales with INTL.
    - 🛡️ X DEF = X/2 % damage reduction. DEF above 100 reduces damage by an extra 0.01% per 10 points.
    - 🍀 Each point in LCK gives a 1% chance of a lucky boost.
    >>
    `

    return " ";
  }
  else if (text.includes("/help talents")) {
    state.commandCenter_TAS =
      `
    <<
    🎯 Talent System Guide

    - 🧠 Talents represent your character's aptitudes (e.g., Cooking, Lockpicking, Fishing).
    - ⚡ Talents require energy points (EP) to use.
    - ✨ Casting a talent transforms it into a skill, which uses mana (MP) instead.
    - 🔎 Talent Use Format: "You [talentWord] [talent name]."
    - 📝 Talents story card editing format: "Talent Name (Lvl) (Ep) (Optional Key1, Key2, etc.)".
    - 🗝️ Create custom triggers for talent usage by adding keys to the talent.
    - ✨ Using talents grant INTL points.
    - 📈 Level up talents by using them.
    - 💥 +10 Talent Level -> Greater Talent Power
     - 🧪 Talents upgrade every 10 levels (up to level 50), which changes their name and reduces their EP cost by 5%.

    - 📚 Learn a talent by studying it and using its name repeatedly over a few turns. Ex: You [learn word] Fireball.
    - 🔤 Capitalize the talent's first letters to learn it faster.
    - 🎓 Learning talents grants INTL points.
    >>
    `

    return " ";
  }
  else if (text.includes("/help skills")) {
    state.commandCenter_TAS =
      `
    <<
    🎯 Skills System Guide


    - 🪄 Skills require mana points (MP) to use.
    - 🔎 Skill Cast Format: "You [cast word] [skill name]."
    - 🔄 Casting a talent transforms it into a skill.
    - 📝 Skills story card editing format: "Skill Name (Lvl) (Mp)".
    - 📈 Level up skills by using them.
    - 🧪 Skills upgrade every 10 levels (up to level 50), which changes their name and reduces their MP cost by 5%.
    - 💥 +10 Skill Level -> Greater Skill Power
    - ✨ Using skills grant ATK and INTL points.
    - 🛡️ Starting skills depend on your class.
    - ➰ Delete Skill story card to reroll starting skills.
    - 🆕 New skill is rewarded for every 5 levels.
    >>
    `

    return " ";
  }

  else if (text.includes("/help inventory")) {
    state.commandCenter_TAS =
      `
  <<
  🎒 Inventory Help

  - Edit your inventory in the story card using the format: "Item Name (Amt)".

  - Item Storing Format: "You [store words]... [amt] [item name]... [inventory words]." Ex: "You put 2 apples into your bag."
  - Item Giving Format: "You [give words] [amt] [item]." Ex: "You give 1 apple."

  >>
  `

    return " ";
  }
  else if (text.includes("/help actions")) {
    state.commandCenter_TAS =
      `
    <<
    ⚔️ Action System Help

    - Avoid vague language. Example: "You slice it" (slice with what?).

    - Actions can harness across talents, skills, and item usage.
    - Actions failure is handled by the AI and costs mana and energy.

    - Rest to recover HP, MP, and EP:
    - Recovery results vary depending on the your resting intensity. Ex: Napping, light sleep, deep sleep.
    - Resting Format: "You [enter words] [sleep words]."

    - Use consumables to recover HP and EP.
    - Consuming Format: "You [consume words] [consumable]."

    - Use skills/talents on yourself to heal. Format: "You [heal word] [yourself] [skill/talent]."
    - Heal amount = 25% INTL + (2 * Skill/Talent Lvl)

    - Attack Format: "You [attackWords]"
    - +10 ATK & SPD → stronger and faster attacks
    - Attacking grants ATK and SPD points.

    - Dodging Format: "You [dodgeWords]"
    - +10 SPD → faster actions, better dodging
    - Dodging grants SPD points.

    - Scouting Format: "You [scout words]."
    - +10 INTL → greater detail when scouting.
    - Scouting grants INTL points.

    - Defend Format: "You [defend words]."
    - +10 DEF → greater defense when blocking.
    - Defending grants DEF points.

    - Exercise Format: "You [doWords] [num of reps] [exerciseWords]"
    - Exercising consumes ~10 EP, grants ATK, DEF, SPD, and maxEP per rep.

    >>
    `

    return " ";
  }
  else if (text.includes("/help keywords")) {
    state.commandCenter_TAS =
      `
    <<
    🔎 talentWords:\n${talentWords}
    🔎 learnWords:\n${learnWords}
    🔎 castWords:\n${castWords}
    🔎 equipWords:\n${equipWords}
    🔎 invWords:\n${invWords}
    🔎 giveWords:\n${giveWords}
    🔎 attackWords:\n${attackWords}
    🔎 dodgeWords:\n${dodgeWords}
    🔎 consumeWords:\n${consumeWords}
    🔎 enterWords:\n${enterWords}
    🔎 restingWords:\n${restingWords}
    🔎 scoutWords:\n${scoutWords}
    🔎 defendWords:\n${defendWords}
    🔎 healingWords:\n${healingWords}
    🔎 exerciseWords:\n${exerciseWords}
    >>
    `

    return " ";
  }
  else if (text.includes("/help multiplayer")) {
    state.commandCenter_TAS =
      `
    <<
    🧑‍🤝‍🧑 Multiplayer Help

    - /add "PlayerName" etc... — enable multiplayer by adding a player. You must use quotation marks around the name.
    - /remove "PlayerName" etc... — remove a player. You must use quotation marks around the name.
    - /playerlist — list of all players stored

    - Edit the AI, AIN, and AN to support writing in third person mode.
    - Enable third person mode in settings.
    - Click the AID icon and ensure all players enter their character name to replace 'You' with their respective names.
    >>
    `

    return " ";
  }
  else if (text.includes("/help modifiers")) {
    state.commandCenter_TAS =
      `
    <<
    🍷 Player Modifiers

    - Modifiers depend on your race.
    - Modifier percentage is multiplied and added to your starting stats, exp, regeneration, damage, etc..
    - Change your race in the Player Stats sc and delete the Modifiers sc to change your starting Modifiers.

    >>
    `

    return " ";
  }
  else if (text.includes("/help")) {
    state.commandCenter_TAS =
      `
    <<
    TRUE AUTO STATS RPG SCRIPT BY Yi1i1i
    🛠️ Script Commands

    - /start — Starts the script
    - /end — Stops the script
    - /help stats — Stat mechanics and usage
    - /help modifiers — Race modifier info  
    - /help talents — Talent mechanics and learning
    - /help skills — Skill casting and upgrades
    - /help inventory — Storing and managing items
    - /help actions — Combat, healing, resting, and usage behaviors
    - /help keywords — Command triggers
    - /help multiplayer — commands and advice for multiplayer/partying
    >>
    `

    return " ";
  }

  return text;
}

function helpCommandOutput_TAS(text) {
  if (state.commandCenter_TAS) {
    text = state.commandCenter_TAS;
  }
  delete state.commandCenter_TAS
  return text;
}

// Increment turn counter at end of onOutput
function turnCounter() {
  state.turnCount += 1;
  log("state.turnCount: " + state.turnCount);
}

// Remove script texts to clean AI context
function removeAngleText(text) {
  return text.replace(/<<[\s\S]*?>>/g, '');
}

// Function to capitalize first letter of a string
function capitalizeFirst(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

// Function to return all indices of one target in array (plural insensitive)
function indicesOf(arr, target) {
  indices = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === target || arr[i] === `${target}s` || arr[i] === `${target}es` || arr[i] === `${target.slice(0, target.length - 1)}ies`) {
      // Found the word, store its index
      indices.push(i);
    }
  }

  if (indices.length == 0) {
    return null;
  }
  else {
    return indices; //arr
  }

}

// With a words arr and arr of targets, get indices for each target from word arr and return indices in an arr
function indicesOfTargets(wordsArr, targetWordsArr) {
  allTargetsIndicesArr = [];

  // Loop through each target word and store their indices from words arr in an array
  targetWordsArr.forEach(word => {
    // unused target words return null so filter them out of index holder
    if (indicesOf(wordsArr, word)) {
      //indicesOf returns an array, alltargetindices becomes an array of arrays so concat them
      allTargetsIndicesArr = allTargetsIndicesArr.concat(indicesOf(wordsArr, word));
      allTargetsIndicesArr.sort((a, b) => a - b);
    }
  });

  //if no indices found return null
  if (allTargetsIndicesArr.length <= 0) {
    return null;
  }

  return allTargetsIndicesArr;
}

//Input a string and remove punctuation
function removeSpecificPunctuation(str) {
  return str.replace(/[.><,!?;:"()\-\n]/g, " ");
}

//Return true or false for first letter capitalized
function isFirstLetterCapitalized(word) {
  if (!word) return false;  // Return false for empty string
  return word.charAt(0) === word.charAt(0).toUpperCase();
}

function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function randomFloat(min, max) {
  return Math.random() * (max - min) + min;
}

// Check for targets in text and split text string if there are. Replace all target words with first target word if simplify is true
function findTargetsThenSplit(text, targetWordsArr, simplifyFlag) {
  if (text == null) return [];

  yesSplit = false

  // Remove punctuation from string to standardize text processing
  cleanText = removeSpecificPunctuation(text);

  // loop through target words and check if text has target
  targetWordsArr.forEach(target => {
    targetRegex = new RegExp(`\\b(${target}(?:s|es)?)\\b`, "gi");

    // If text has target, set yessplit true
    if (targetRegex.test(cleanText)) {
      // Optional replace large target words with first target word
      if (simplifyFlag === true && target.split(" ").length > 1) {
        cleanText = cleanText.replace(targetRegex, targetWordsArr[0]);
      }

      yesSplit = true;
    }

    // Check plural case for words that end in y
    if (target.endsWith("y") && !/[aeiou]y$/i.test(target)) {
      targetRegex = new RegExp(`\\b(${target.slice(0, target.length - 1)}ies)\\b`, "gi");

      // If text has target, set yessplit true
      if (targetRegex.test(cleanText)) {
        // Optional replace large target words with first target word
        if (simplifyFlag === true && target.split(" ").length > 1) {
          cleanText = cleanText.replace(targetRegex, targetWordsArr[0]);
        }

        yesSplit = true;
      }
    }

  });
  //log("cleanText postregex: " + cleanText);
  //log("yesSplit: " + yesSplit);

  // Split text if target was found
  if (yesSplit) {
    return cleanText.split(/\s+/).filter(word => word.trim() !== "");
  }
  else {
    return [];
  }

}

// Given an arr of targets and a string, clean text and check if string has a target
function cleanStringCheckForTargets(targetWordsArr, text) {
  if (text == null) { return false };

  text = text.toLowerCase();
  let cleanText = removeSpecificPunctuation(text);
  //log(cleanText);

  // Loop through target words
  for (let target of targetWordsArr) {
    let targetRegex = new RegExp(`\\b${target}\\b`, "gi");
    //log(target);

    // Check if target is found in the text
    if (targetRegex.test(cleanText)) {
      return true; // Immediately return true if a match is found
    }
  }

  return false; // Return false if no matches are found
}

function separateByPlr(text) {
  const sentences = text.match(/[^.?!]+(?:[.?!]|$)/g)?.map(s => s.trim()) || [];
  const plrs = {};
  let currentPlr = null;


  // Initialize player lists
  state.playerList.forEach(name => {
    plrs[name] = [];
  });

  sentences.forEach(sentence => {
    found = false;

    // Detect if sentence includes a player's name (as a full word)
    state.playerList.forEach(name => {
      const regex = new RegExp(`\\b${name}\\b`, 'i'); // case-insensitive full word match
      if (regex.test(sentence)) {
        currentPlr = name;
        found = true;
      }
    });

    // You represents the first player.
    youWords.forEach(youWord => {
      const regex = new RegExp(`\\b${youWord}\\b`, 'i');
      if (regex.test(sentence)) {
        currentPlr = state.playerList[0];
        found = true;
      }
    });

    // Assign sentence to player
    if (currentPlr) {
      plrs[currentPlr].push(" " + sentence);
    }
  });

  return plrs;
}


// Given a words arr, checks if there is a "you" a num specificed before target indicesarr
function checkYouBeforeIndicesArr(plr, wordsArr, indicesArr, numWordsBefore) {
  //loop through array of target indices
  for (i = 0; i < indicesArr.length; i++) {
    //get the current target index
    currentIndex = indicesArr[i];

    // Store words from current target index up to specified indices before them without going out of bounds into a holder
    let prevWordsHolder = wordsArr.slice(Math.max(0, currentIndex - numWordsBefore), currentIndex);

    // Check in holder containing words before current target index if it has "you"
    if (onePlayerFlagger()) {
      if (prevWordsHolder.some(word => youWords.includes(word))) {
        return true;
      }
    }
    else {
      // If player name exists in any of the previous words, return true
      if (prevWordsHolder.some(word => word.toLowerCase() === plr.toLowerCase())) {
        return true;
      }
      // Player 1 can check for you as well
      if (plr == state.playerList[0] && prevWordsHolder.some(word => youWords.includes(word))) {
        return true;
      }
    }
  }

  return false;
}

//Given a words arr, checks if there is a "and" a num specificed before target indicesarr
function checkAndBeforeIndicesArr(wordsArr, indicesArr, numWordsBefore) {
  //loop through array of target indices
  for (i = 0; i < indicesArr.length; i++) {
    //get the current target index
    currentIndex = indicesArr[i];

    // Store words from current target index up to specified indices before them without going out of bounds into a holder
    let prevWordsHolder = wordsArr.slice(Math.max(0, currentIndex - numWordsBefore), currentIndex);

    //Check in holder containing words before current target index if it has "and"
    if (prevWordsHolder.includes("and")) {
      return true;
    }
  }

  return false;
}

// Check if any guest is distance after any home, and push weight into weightarr if true
function isAfterIndex(guestIndices, homeIndices, minDis, maxDis, weightIfTrue, arrOfWeights) {
  if (guestIndices && homeIndices) {
    guestIndices.forEach((g, index) => {
      homeIndices.forEach((h, index2) => {
        // Check if the guest element is after the home element within the given distance
        if (g - h <= maxDis && g - h >= minDis) {
          arrOfWeights[index] += weightIfTrue;
        }
      });
    });
  }
}

// Check if any guest is distance before any home, and push weight into weightarr if true
function isBeforeIndex(guestIndices, homeIndices, minDis, maxDis, weightIfTrue, weightArr) {
  if (guestIndices && homeIndices) {
    guestIndices.forEach((g, index) => {
      homeIndices.forEach((h, index2) => {
        // Check if the guest element is before the home element within the given distance
        if (g - h >= -maxDis && g - h <= -minDis) {
          weightArr[index] += weightIfTrue;
        }
      });
    });
  }
}

// Get closest number before an index from an arr
function findClosestNumberBefore(arr, index) {
  for (let i = index - 1; i >= 0; i--) {
    const match = arr[i].match(/(\d+(\.\d+)?)/); // match integer or decimal
    if (match) {
      return Number(match[1]);
    }
  }
  return null; // no number found before index
}

function wordsToNumber(text) {
  const smallNumbers = {
    "zero": 0, "one": 1, "two": 2, "three": 3, "four": 4, "five": 5,
    "six": 6, "seven": 7, "eight": 8, "nine": 9, "ten": 10,
    "eleven": 11, "twelve": 12, "thirteen": 13, "fourteen": 14,
    "fifteen": 15, "sixteen": 16, "seventeen": 17, "eighteen": 18, "nineteen": 19
  };

  const tens = {
    "twenty": 20, "thirty": 30, "forty": 40, "fifty": 50,
    "sixty": 60, "seventy": 70, "eighty": 80, "ninety": 90
  };

  const multipliers = {
    "hundred": 100,
    "thousand": 1000,
    "million": 1000000,
    "billion": 1000000000
  };

  // Match possible number phrases like "two hundred and twenty-five"
  const numberWordsRegex = new RegExp(
    '\\b(?:(?:zero|one|two|three|four|five|six|seven|eight|nine|ten|' +
    'eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|' +
    'twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|' +
    'hundred|thousand|million|billion|[-])+\\s*)+\\b',
    'gi'
  );

  // Process a number phrase like "one hundred twenty three"
  function parseNumberPhrase(phrase) {
    const words = phrase.toLowerCase().replace(/-/g, ' ').split(/\s+/);
    let total = 0, current = 0;

    for (let word of words) {
      if (smallNumbers[word] != null) {
        current += smallNumbers[word];
      } else if (tens[word] != null) {
        current += tens[word];
      } else if (word === "hundred") {
        current *= 100;
      } else if (multipliers[word]) {
        current *= multipliers[word];
        total += current;
        current = 0;
      }
    }


    return total + current + " ";

  }

  // Replace all matching phrases with numeric values
  return text.replace(numberWordsRegex, match => {
    return parseNumberPhrase(match);
  });
}

function getDigitIndices(wordsArray) {
  const digitIndices = [];

  for (let i = 0; i < wordsArray.length; i++) {
    if (/^\d+$/.test(wordsArray[i])) {
      digitIndices.push(i);
    }
  }

  return digitIndices;
}

//Function to get plr race from pe
function getPlrRacePE() {
  //Get PE text
 let plotEssentials = state.memory.context.toLowerCase();

  // Default race to human
 let race = "human";

  //Get plr race from PE
  raceNames.forEach(name => {
    if (plotEssentials.includes(name.toLowerCase() + " race")) {
      race = name.toLowerCase();
    }
  });

  // Remove spaces in race name
  race = race.replace(/\s+/g, '');

  return race;
}

function getPlrClassPE() {
  const plotEssentials = state.memory.context.toLowerCase();

  // Get player class from plot essentials
  const regex = /(\w+)\s+class/i;
  const match = plotEssentials.match(regex);

  classString = "mage";
  if (match) {
    classString = match[1];
  }

  return classString;
}

// This function returns the index of a string in words arr
function indexOfStr(needleArr, haystackArr) {
  // Ensure str is split into words (if it's a string)
  if (typeof needleArr === "string") {
    needleArr = needleArr.toLowerCase().split(" ");
  }
  else {
    needleArr = needleArr.map(w => w.toLowerCase());
  }
  // Case insensitive
  haystackArr = haystackArr.map(w => w.toLowerCase());

  for (let i = 0; i <= haystackArr.length - needleArr.length; i++) {
    let match = true;
    for (let j = 0; j < needleArr.length; j++) {
      if (haystackArr[i + j] !== needleArr[j]) {
        match = false;
        break;
      }
    }
    if (match) return i;
  }
  return -1;
}

// For an arr of indices, find closest index to target index
function closestIndexBeforeTarget(arr, targetIndex) {
  let closest = -1;
  for (let i = 0; i < arr.length; i++) {
    const current = arr[i];
    if (typeof current === 'number' && current <= targetIndex) {
      if (closest === -1 || targetIndex - current < targetIndex - closest) {
        closest = current;
      }
    }
  }
  return closest;
}

// Function to turn words in string to plural for player pronouns in multiplayer
function toCoOpLang(plr, str) {
  if (onePlayerFlagger()) return str;

  // Regex-friendly join of words
  const wordPattern = new RegExp(`\\b(${pluralizableWords.join('|')})\\b`, 'gi');

  return str
    // Replace "your" with "<plr>'s"
    .replace(/\byour\b/gi, match => matchCase(`${plr}'s`, match))

    // Replace "you are" with "<plr> is"
    .replace(/\byou are\b/gi, match => matchCase(`${plr} is`, match))

    // Replace "you're" with "<plr>'s"
    .replace(/\byou're\b/gi, match => matchCase(`${plr}'s`, match))

    // Replace "you have" with "<plr> has"
    .replace(/\byou have\b/gi, match => matchCase(`${plr} has`, match))

    // Replace standalone "you" with "<plr>"
    .replace(/\byou\b/gi, match => matchCase(plr, match))

    // Optional: handle "have" (you might skip this unless needed)
    .replace(/\bhave\b/gi, match => matchCase("have", match))

    // Pluralize specific words
    .replace(wordPattern, (match) => matchCase(pluralize(match.toLowerCase()), match));
}

// Helper: match output's case to input's
function matchCase(output, input) {
  if (input === input.toUpperCase()) return output.toUpperCase();
  if (input[0] === input[0].toUpperCase()) return output[0].toUpperCase() + output.slice(1);
  return output;
}

function pluralize(word) {
  // Basic pluralization rules (can be expanded)
  if (word.endsWith("y") && !/[aeiou]y$/.test(word)) return word.slice(0, -1) + "ies";
  if (word.endsWith("s") || word.endsWith("x") || word.endsWith("ch") || word.endsWith("sh")) return word + "es";
  return word + "s";
}

// Delete a story card by title
function removeSC(title) {
  const index = storyCards.findIndex(card => card.title === title);
  if (index !== -1) {
    storyCards.splice(index, 1);
    return true;
  }
  return false; // Card not found
}

// Inject a string to the AI context
function insertAfterWorldLore(text, insertString) {
  const target = "World Lore:\n";
  const index = text.indexOf(target);
  //log("index: " + index);
  log("insertString: " + insertString);

  if (!text.includes(insertString)) {
    if (index !== -1) {
      return text.slice(0, index + target.length) + insertString + "\n" + text.slice(index + target.length);
    }
    else {
      log("Added World Lore");
      text = "World Lore:\n" + insertString + "\n" + text;
    }
  }

  return text;
}

/////////////////////////////////////////////////////////////////////////////////////

function createIfNoSettingsSC() {
  if (!storyCards.find(sc => sc.title === "TAS Settings")) {
    // If card doesn't exist, create it
    addStoryCard("TAS Settings", "Blank", `Player Stats`);

    // Create description
    const settingsSC = storyCards.find(sc => sc.title === `TAS Settings`);
    settingsSC.description = `injectStatsToContext: (true/false), set to true to inject player data to AI context at the cost of tokens.` + settingsSC.description;
  }
}

function storeSettingsToSC() {
  const settingsSC = storyCards.find(sc => sc.title === `TAS Settings`);

  settingsSC.entry = `injectStatsToContext = ${String(state.injectStatsToContext)}`;

}

function retrieveSettingsFromSC() {
  const settingsSC = storyCards.find(sc => sc.title === `TAS Settings`);

  // Extract injectStatsToContext
  const injectMatch = settingsSC.entry.match(/injectStatsToContext\s*=\s*(true|false)/i);
  if (injectMatch) {
    if (injectMatch[1] == "true") {
      state.injectStatsToContext = true;
    }
    else if (injectMatch[1] == "false") {
      state.injectStatsToContext = false;
    }
  }

  //log("state.injectStatsToContext: " + state.injectStatsToContext);
}

function feedPlrDataToContext(text) {
  statKeys = ["lvl", "hp", "mp", "ep", "atk", "def", "spd", "lck", "intl"];

  if (state.injectStatsToContext && !state.unlockInvToContext && !state.unlockStrgToContext) {
    state.playerList.forEach(plr => {
      allItems = [];
      allTalents = [];
      allSkills = [];
      allStats = [];
      statText = "";

      // Get all plr items
      state.players[plr].inv.item.forEach((itm, index) => {
        allItems.push(`${state.players[plr].inv.amt[index]} ${state.players[plr].inv.item[index]}`);
      })
      if (allItems.length == 0) {
        allItems.push("nothing");
      }
      allItems = allItems.join(", ");

      // Get all plr talents
      state.players[plr].talents.name.forEach((itm, index) => {
        talentTier = getTier(state.players[plr].talents.lvl[index]);
        allTalents.push(`${talentTier} ${state.players[plr].talents.name[index]}`);
      })
      if (allTalents.length == 0) {
        allTalents.push("nothing");
      }
      allTalents = allTalents.join(", ");

      // Get all plr skills
      state.players[plr].skills.name.forEach((itm, index) => {
        skillTier = getTier(state.players[plr].skills.lvl[index]);
        allSkills.push(`${skillTier} ${state.players[plr].skills.name[index]}`);
      })
      if (allSkills.length == 0) {
        allSkills.push("nothing");
      }
      allSkills = allSkills.join(", ");

      // Get all plr stats
      statKeys.forEach(key => {
        statAmt = state.players[plr].stats[key];
        maxStatAmt = state.players[plr].stats[`max${capitalizeFirst(key)}`];

        // Scaling fix for tiers
        if (key == "hp" || key == "ep" || key == "mp") {
          statTier = getTier(statAmt/10);
          capTier = getCapacityTier(statAmt,maxStatAmt);

          allStats.push(`${statAmt} (${capTier}) / ${maxStatAmt} (${statTier})`);
        }
        else{
          statTier = getTier(statAmt);
          allStats.push(`${statTier} (${statAmt}/${maxStatAmt})`);
        }
      });

      // Create stat text
      if (allStats.length > 0) {
        statText = `is ${state.players[plr].race}, ${state.players[plr].class_}, Level ${state.players[plr].stats.maxLvl} (${getTier(state.players[plr].stats.maxLvl)}), has ${allStats[1]} health, ${allStats[2]} mana, ${allStats[3]} energy, ${allStats[4]} attack, ${allStats[5]} defense, ${allStats[6]} speed, ${allStats[7]} luck, ${allStats[8]} intelligence.`
      }

      // Combine all plr data text for final return
      if (!onePlayerFlagger()) {
        text = insertAfterWorldLore(text, `[Assume ${plr} inventory has only ${allItems}. ${plr} talents are only ${allTalents}. ${plr} skills are only ${allSkills}. ${plr} ${statText}]\n`);
      }
      else {
        text = insertAfterWorldLore(text, `[Assume player inventory has only ${allItems}. Player talents are only ${allTalents}. Player skills are only ${allSkills}. Player ${statText}]\n`);
      }
    });
  }

  return text;
}
/////////////////////////////////////////////////////////////////////////////////////

// Creates initial player
function defaultPlrCreation() {
  state.players = state.players || {};
  state.potentialTalents = state.potentialTalents || {};

  if (Object.keys(state.players).length == 0) {
    addPlayer("Player");
  }

  log("state.playerList: " + state.playerList);

  //log(state.players);
}

function onePlayerFlagger() {
  return Object.keys(state.players).length === 1;
}


function addPlayer(id) {
  if (!state.players[id]) {
    state.players[id] = {
      stats: {
        lvl: 0,
        exp: 0,
        hp: 0,
        mp: 0,
        ep: 0,
        atk: 0,
        def: 0,
        spd: 0,
        lck: 0,
        intl: 0,

        maxLvl: 0,
        maxExp: 0,
        maxHp: 0,
        maxMp: 0,
        maxEp: 0,
        maxAtk: 0,
        maxDef: 0,
        maxSpd: 0,
        maxLck: 0,
        maxIntl: 0
      },

      modifiers: {
        lvlMod: 0,
        hpMod: 0,
        mpMod: 0,
        epMod: 0,
        atkMod: 0,
        defMod: 0,
        spdMod: 0,
        lckMod: 0,
        intlMod: 0
      },

      inv: {
        item: [],
        amt: []
      },

      talents: {
        name: [],
        lvl: [],
        cost: [],
        keys: []
      },

      skills: {
        name: [],
        lvl: [],
        cost: []
      },

      race: "Human",

      class_: "Mage"
    }

    state.potentialTalents[id] = {
      name: [],
      exp: []
    }

    state.playerList.push(id);
    log(`Added Player ${id}`);
  }//end of !id
};

// Allows user to add a player by typing /add "name"
function addPlrCmdInput(text) {
  if (text.includes("/add") && !text.includes("say")) {
    let successAdds = [];
    let playerAddList = [...text.matchAll(/"([^"]+)"/g)].map(match => match[1]);

    playerAddList.forEach(name => {
      // Only add player if they don't already exist
      if (!state.players[name]) {
        addPlayer(name);
        successAdds.push(name);
      }
    });

    if (successAdds.length > 0) {
      text = `<< ➕ Successfully added ${successAdds.join(", ")} >>`;
    } else {
      text = `<< ⚠️ No new players were added. >>`;
    }
  }

  return text;
}

function removePlayer(playerId) {

  if (state.players[playerId]) {
    delete state.players[playerId];
    delete state.potentialTalents[playerId];

    if (state.playerList) {
      state.playerList = state.playerList.filter(id => id !== playerId);
    }
    log(`Removed Player ${playerId}`);
  }
}

function removePlrCmdInput(text) {
  if (text.includes("/remove") && !text.includes("say")) {
    let successRemoves = [];
    let playerRemoveList = [...text.matchAll(/"([^"]+)"/g)].map(match => match[1]);

    playerRemoveList.forEach(name => {
      if (state.players[name]) {
        removePlayer(name);
        successRemoves.push(name);

        // Remove player story cards
        removeSC(`${name} Stats`);
        removeSC(`${name} Modifiers`);
        removeSC(`${name} Inventory`);
        removeSC(`${name} Talents`);
        removeSC(`${name} Skills`);
      }
    });

    if (successRemoves.length > 0) {
      return `<< 🗑️ Successfully removed ${successRemoves.join(", ")} >>`;
    } else {
      return `<< ⚠️ No players were removed. >>`;
    }
  }

  return text;
}

function listPlrCmdInput(text) {
  if (text.includes("/playerlist")) {
    text = `<< ${state.playerList} >>`;
  }

  return text;
}

/////////////////////////////////////////////////////////////////////////////////////

const raceMods = {
  human: {
    lvlMod: 0,
    hpMod: 0,
    mpMod: 0,
    epMod: 0,
    atkMod: 0,
    defMod: 0,
    spdMod: 0,
    lckMod: 0,
    intlMod: 0
  },
  dwarf: {
    lvlMod: -5,
    hpMod: 20,
    mpMod: -10,
    epMod: -5,
    atkMod: 5,
    defMod: 15,
    spdMod: -5,
    lckMod: -5,
    intlMod: 0
  },
  beastfolk: {
    lvlMod: 0,
    hpMod: 10,
    mpMod: -5,
    epMod: 10,
    atkMod: 10,
    defMod: 0,
    spdMod: 10,
    lckMod: 0,
    intlMod: -5
  },
  elf: {
    lvlMod: 0,
    hpMod: -10,
    mpMod: 20,
    epMod: 0,
    atkMod: -5,
    defMod: 0,
    spdMod: 5,
    lckMod: 10,
    intlMod: 15
  },
  orc: {
    lvlMod: -5,
    hpMod: 15,
    mpMod: -10,
    epMod: 5,
    atkMod: 20,
    defMod: 10,
    spdMod: -10,
    lckMod: -10,
    intlMod: -5
  },
  lizardmen: {
    lvlMod: 0,
    hpMod: 10,
    mpMod: -5,
    epMod: 5,
    atkMod: 10,
    defMod: 5,
    spdMod: 0,
    lckMod: 0,
    intlMod: -5
  },
  goblin: {
    lvlMod: 5,
    hpMod: -10,
    mpMod: 0,
    epMod: 0,
    atkMod: -5,
    defMod: -10,
    spdMod: 15,
    lckMod: 10,
    intlMod: 0
  },
  majin: {
    lvlMod: 10,
    hpMod: 0,
    mpMod: 10,
    epMod: 10,
    atkMod: 10,
    defMod: 0,
    spdMod: 5,
    lckMod: 5,
    intlMod: 10
  },
  vampire: {
    lvlMod: 0,
    hpMod: -5,
    mpMod: 15,
    epMod: 5,
    atkMod: 10,
    defMod: -5,
    spdMod: 10,
    lckMod: 10,
    intlMod: 10
  },
  fairy: {
    lvlMod: 5,
    hpMod: -15,
    mpMod: 20,
    epMod: 10,
    atkMod: -10,
    defMod: -5,
    spdMod: 15,
    lckMod: 10,
    intlMod: 15
  },
  god: {
    lvlMod: 50,
    hpMod: 50,
    mpMod: 50,
    epMod: 50,
    atkMod: 50,
    defMod: 50,
    spdMod: 50,
    lckMod: 50,
    intlMod: 50
  },
  demigod: {
    lvlMod: 35,
    hpMod: 35,
    mpMod: 35,
    epMod: 35,
    atkMod: 35,
    defMod: 35,
    spdMod: 35,
    lckMod: 35,
    intlMod: 35
  },
  yokai: {
    lvlMod: 5,
    hpMod: 0,
    mpMod: 10,
    epMod: 0,
    atkMod: 5,
    defMod: 0,
    spdMod: 10,
    lckMod: 15,
    intlMod: 10
  },
  dragon: {
    lvlMod: -10,
    hpMod: 25,
    mpMod: 5,
    epMod: 5,
    atkMod: 20,
    defMod: 15,
    spdMod: -10,
    lckMod: -5,
    intlMod: 5
  },
  zombie: {
    lvlMod: -5,
    hpMod: 20,
    mpMod: -10,
    epMod: -5,
    atkMod: 5,
    defMod: 10,
    spdMod: -10,
    lckMod: -15,
    intlMod: -10
  },
  insectoid: {
    lvlMod: 0,
    hpMod: 5,
    mpMod: 0,
    epMod: 5,
    atkMod: 5,
    defMod: 5,
    spdMod: 15,
    lckMod: -5,
    intlMod: -5
  },
  angel: {
    lvlMod: 10,
    hpMod: 5,
    mpMod: 15,
    epMod: 10,
    atkMod: 5,
    defMod: 5,
    spdMod: 5,
    lckMod: 10,
    intlMod: 15
  },
  demon: {
    lvlMod: 5,
    hpMod: 10,
    mpMod: 5,
    epMod: 10,
    atkMod: 15,
    defMod: 5,
    spdMod: 5,
    lckMod: -5,
    intlMod: 5
  },
  daemon: {
    lvlMod: 10,
    hpMod: 5,
    mpMod: 10,
    epMod: 10,
    atkMod: 10,
    defMod: 10,
    spdMod: 10,
    lckMod: 0,
    intlMod: 10
  },
  slime: {
    lvlMod: -10,
    hpMod: 10,
    mpMod: 5,
    epMod: 5,
    atkMod: -5,
    defMod: 25,
    spdMod: -5,
    lckMod: 0,
    intlMod: 5
  },
  harpy: {
    lvlMod: 0,
    hpMod: -10,
    mpMod: 0,
    epMod: 10,
    atkMod: 0,
    defMod: -5,
    spdMod: 20,
    lckMod: 5,
    intlMod: 0
  },
  lich: {
    lvlMod: 0,
    hpMod: -15,
    mpMod: 20,
    epMod: 0,
    atkMod: -5,
    defMod: 0,
    spdMod: -5,
    lckMod: 10,
    intlMod: 20
  },
  bloodletter: {
    lvlMod: 0,
    hpMod: 10,
    mpMod: -10,
    epMod: 10,
    atkMod: 15,
    defMod: 0,
    spdMod: 5,
    lckMod: -5,
    intlMod: -10
  },

  plaguebearer: {
    lvlMod: 0,
    hpMod: 20,
    mpMod: 10,
    epMod: -10,
    atkMod: 0,
    defMod: 10,
    spdMod: -10,
    lckMod: -5,
    intlMod: 5
  },

  chiss: {
    lvlMod: 0,
    hpMod: 0,
    mpMod: 10,
    epMod: 0,
    atkMod: 0,
    defMod: 0,
    spdMod: 5,
    lckMod: 10,
    intlMod: 15
  },

  shifters: {
    lvlMod: 0,
    hpMod: 5,
    mpMod: 0,
    epMod: 10,
    atkMod: 5,
    defMod: 0,
    spdMod: 10,
    lckMod: 0,
    intlMod: -5
  },

  highelves: {
    lvlMod: 0,
    hpMod: -5,
    mpMod: 20,
    epMod: 0,
    atkMod: 0,
    defMod: 0,
    spdMod: 5,
    lckMod: 5,
    intlMod: 15
  },

  sangheili: {
    lvlMod: 0,
    hpMod: 15,
    mpMod: 0,
    epMod: 10,
    atkMod: 10,
    defMod: 10,
    spdMod: 0,
    lckMod: -5,
    intlMod: 0
  },

  kigYar: {
    lvlMod: 0,
    hpMod: -5,
    mpMod: 0,
    epMod: 10,
    atkMod: 0,
    defMod: -5,
    spdMod: 15,
    lckMod: 10,
    intlMod: 5
  },

  unggoy: {
    lvlMod: 0,
    hpMod: -10,
    mpMod: 5,
    epMod: -5,
    atkMod: -5,
    defMod: 0,
    spdMod: -10,
    lckMod: 10,
    intlMod: -10
  },

  minotaur: {
    lvlMod: 0,
    hpMod: 25,
    mpMod: -10,
    epMod: 10,
    atkMod: 15,
    defMod: 5,
    spdMod: -10,
    lckMod: -5,
    intlMod: -10
  },

  yautja: {
    lvlMod: 0,
    hpMod: 15,
    mpMod: 0,
    epMod: 15,
    atkMod: 15,
    defMod: 10,
    spdMod: 5,
    lckMod: -5,
    intlMod: 0
  },

  kroxigor: {
    lvlMod: 0,
    hpMod: 30,
    mpMod: -20,
    epMod: 5,
    atkMod: 20,
    defMod: 15,
    spdMod: -15,
    lckMod: -10,
    intlMod: -15
  },

  krogan: {
    lvlMod: 0,
    hpMod: 25,
    mpMod: -10,
    epMod: 10,
    atkMod: 10,
    defMod: 20,
    spdMod: -10,
    lckMod: 0,
    intlMod: -5
  },

  twilek: {
    lvlMod: 0,
    hpMod: 0,
    mpMod: 10,
    epMod: 0,
    atkMod: -5,
    defMod: 0,
    spdMod: 10,
    lckMod: 15,
    intlMod: 5
  },

  erinyes: {
    lvlMod: 0,
    hpMod: 5,
    mpMod: 20,
    epMod: 5,
    atkMod: 10,
    defMod: 0,
    spdMod: 5,
    lckMod: 5,
    intlMod: 10
  },

  togruta: {
    lvlMod: 0,
    hpMod: 0,
    mpMod: 10,
    epMod: 5,
    atkMod: 0,
    defMod: 0,
    spdMod: 10,
    lckMod: 5,
    intlMod: 10
  },

  skink: {
    lvlMod: 0,
    hpMod: -10,
    mpMod: 5,
    epMod: 10,
    atkMod: -5,
    defMod: -5,
    spdMod: 20,
    lckMod: 5,
    intlMod: 0
  },

  coldones: {
    lvlMod: 0,
    hpMod: 20,
    mpMod: -10,
    epMod: 0,
    atkMod: 15,
    defMod: 10,
    spdMod: -5,
    lckMod: -10,
    intlMod: -10
  },

  jiralhanae: {
    lvlMod: 0,
    hpMod: 30,
    mpMod: -15,
    epMod: 15,
    atkMod: 20,
    defMod: 15,
    spdMod: -10,
    lckMod: -10,
    intlMod: -10
  },

  dragonkin: {
    lvlMod: 0,
    hpMod: 20,
    mpMod: 20,
    epMod: 20,
    atkMod: 20,
    defMod: 15,
    spdMod: -10,
    lckMod: -10,
    intlMod: -10
  }
};

modKeys = ["lvlMod", "hpMod", "mpMod", "epMod", "atkMod", "defMod", "spdMod", "lckMod", "intlMod"];
raceNames = ["Human", "Dwarf", "Dragonkin", "Beastfolk", "Elf", "Orc", "Lizardmen", "Goblin", "Majin", "Vampire", "Fairy", "God", "Yokai", "Dragon", "Zombie", "Insectoid", "Angel", "Demon", "Daemon", "Slime", "Harpy", "Lich", "Bloodletter", "Plaguebearer", "Chiss", "Shifters", "High Elves", "Sangheili", "Kig-Yar", "Unggoy", "Minotaur", "Yautja", "Kroxigor", "Krogan", "Twi'lek", "Erinyes", "Togruta", "Skink", "Cold Ones", "Jiralhanae"];
statKeysForMod = ["lvl", "hp", "mp", "ep", "atk", "def", "spd", "lck", "intl"];

//CREATE new sc with player Modifiers if sc doesnt exist
function createIfNoModifierSC() {
  createFlag = false;

  state.playerList.forEach(plr => {
    if (!storyCards.find(sc => sc.title === `${plr} Modifiers`)) {
      // If "Player Modifiers" card doesn't exist, create it
      addStoryCard(`${plr} Modifiers`, "Blank", `Player Stats`);
      createFlag = true;

      // Get the plr race retrieved from stats sc
      plrRace = state.players[plr].race;
      // If plr race modifiers is undefined
      if (!raceMods[plrRace]) {
        plrRace = "human";
      }

      // Fetch the "Player Modifiers" card
      const modSC = storyCards.find(sc => sc.title === `${plr} Modifiers`);
      modSC.description = `Format for Modifying: MOD: num\nModifiers influence your starting stats and modify the exp you receive.\n`

      // Set player modifier values in SC based on their race
      modKeys.forEach(key => {
        state.players[plr].modifiers[key] = raceMods[plrRace][key];
      });

      // Apply initial race mods to stats and display them to sc
      statKeysForMod.forEach(key => {
        // Modify normal stat
        temp1 = state.players[plr].stats[key] * state.players[plr].modifiers[key + "Mod"] / 100;
        state.players[plr].stats[key] = state.players[plr].stats[key] + temp1;
        state.players[plr].stats[key] = Math.round(state.players[plr].stats[key] * 100) / 100;

        // Modify max stats
        maxKey = "max" + capitalizeFirst(key);
        temp2 = state.players[plr].stats[maxKey] * state.players[plr].modifiers[key + "Mod"] / 100;
        state.players[plr].stats[maxKey] = state.players[plr].stats[maxKey] + temp2;
        state.players[plr].stats[maxKey] = Math.round(state.players[plr].stats[maxKey] * 100) / 100;

      });
    }
  });

  if (createFlag) {
    storeModifiersToSC();
  }
}

// STORES and displays the modifiers to player in sc
function storeModifiersToSC() {
  state.playerList.forEach(plr => {
    // Format player modifiers holder for SC 
    formatForSC = [];

    modKeys.forEach((key, index) => {
      const modName = key.replace("Mod", "").toUpperCase();  //ATK
      const modFormatPart = `${modName} Modifier: ${state.players[plr].modifiers[key]}%\n`; //ATK Modifier: 0%

      // Holder to hold all formatted strings
      formatForSC.push(modFormatPart);
    });
    //log(formatForSC);

    // Fetch the "Player Modifiers" card
    const modSC = storyCards.find(sc => sc.title === `${plr} Modifiers`);

    // Convert holder to string, clean commas, and finally store to sc entry
    modSC.entry = String(formatForSC).replace(/,/g, '');

    // Trim notes on char limit to prevent memory overfill
    if (modSC.description.length > 3000) {
      halfIndex = Math.floor(modSC.description.length / 3);
      modSC.description = modSC.description.slice(0, halfIndex);

      log("Trimming modSC description to prevent memory overload.");
    }
  });
}

//RETRIEVE data from sc and store to playerModifiers
function retrieveModifiersFromSC() {
  state.playerList.forEach(plr => {
    // Fetch the "Player Modifiers" card
    const modSC = storyCards.find(sc => sc.title === `${plr} Modifiers`);

    // Retrieve and split sc entry into (modName, value) lines
    const modEntries = modSC.entry.split("\n"); //arr of strings

    //Loop through each line of entry from the split and extract values
    modEntries.forEach(entry => {
      // Match and extract stat and max stat values using regex
      const match = entry.trim().match(/^([A-Z]+)\s+Modifier:\s*(-?\d+(?:\.\d+)?)(?:%)?$/);
      //log("mod sc match: " + match);

      //Store value in holder
      if (match) {
        modName = match[1].toLowerCase() + 'Mod'; // e.g., "HP"
        modValue = Number(match[2]); // e.g., 0

        // Finally store modValue in playerModifier
        //OR operator safeguards against null values    
        state.players[plr].modifiers[modName] = modValue ?? state.players[plr].modifiers[modName];

      }
    });
  });
  //log(state.players[plr].modifiers);
}

/////////////////////////////////////////////////////////////////////////////////////

maxStatKeys = ["maxLvl", "maxExp", "maxHp", "maxMp", "maxEp", "maxAtk", "maxDef", "maxSpd", "maxLck", "maxIntl"];
statKeys = ["lvl", "exp", "hp", "mp", "ep", "atk", "def", "spd", "lck", "intl"];

// NOTE: Players stats will be stored in a sc. CREATE initial stats. RETRIEVE from or STORE to player stats: SC -> <- state.playerstats

//Function to create new random player stats
function newPlayerStats(plr) {
  //Get a random max level
  state.players[plr].stats.maxLvl = randomInt(1, 25);

  //Loop through each maxstat, and set max stats equal to max level
  maxStatKeys.forEach((mStat) => {
    state.players[plr].stats[mStat] = state.players[plr].stats.maxLvl;
  });

  //Give player random initialized stats capped by max level
  statKeys.forEach((stat) => {
    state.players[plr].stats[stat] = randomInt(1, state.players[plr].stats.maxLvl);
  });

  // EXP starts at 0 and caps at 100
  state.players[plr].stats.exp = 0;
  state.players[plr].stats.maxExp = 100;

  // Stat scaling
  state.players[plr].stats.maxHp = state.players[plr].stats.maxLvl * 2 + 20;
  state.players[plr].stats.maxEp = state.players[plr].stats.maxLvl * 2 + 80;
  state.players[plr].stats.maxMp = (state.players[plr].stats.maxLvl * 1.5) + (state.players[plr].stats.intl * 2) + 80;

  // Player starts at full health
  state.players[plr].stats.hp = state.players[plr].stats.maxHp;
  state.players[plr].stats.ep = state.players[plr].stats.maxEp;
  state.players[plr].stats.mp = state.players[plr].stats.maxMp;

}

// CREATE new sc with random playerstats if sc doesnt exist
function createIfNoStatSC() {
  createFlag = false;

  state.playerList.forEach(plr => {
    if (!storyCards.find(sc => sc.title === `${plr} Stats`)) {
      // If `${plr} Stats` card doesn't exist, create it
      addStoryCard(`${plr} Stats`, "Blank", `Player Stats`);

      // Fetch the `${plr} Stats` card
      const statSC = storyCards.find(sc => sc.title === `${plr} Stats`);
      statSC.description = "Format for Modifying: Stat: num/maxNum";

      //Initialize and randomize new player stats
      newPlayerStats(plr);
      state.players[plr].race = getPlrRacePE();
      state.players[plr].class_ = getPlrClassPE();
      //todo: add occupation


      createFlag = true;
    }
  });

  if (createFlag) {
    storeStatsToSC();
  }
}

// STORES and displays the stats to player in sc
function storeStatsToSC() {
  state.playerList.forEach(plr => {
    // Format player stats holder for SC 
    formatForSC = [];

    // Store the plr's race and class
    formatForSC.push(`Race: ${capitalizeFirst(state.players[plr].race)}\n`);
    formatForSC.push(`Class: ${capitalizeFirst(state.players[plr].class_)}\n`);

    maxStatKeys.forEach((key, index) => {
      // Lvl storing exception
      if (key == "maxLvl") {
        statFormatPart = `LVL ${state.players[plr].stats.maxLvl}\n`
      }
      else {
        // Remove 'max' and capitalize. Ex: maxAtk -> ATK
        statName = key.substring(3).toUpperCase();

        // Formatted stat line. Ex: ATK: atk/maxAtk
        statFormatPart = `${statName}: ${state.players[plr].stats[statName.toLowerCase()]}/${state.players[plr].stats[key]}\n`;
      }

      // Push to holder for holding all formatted strings
      formatForSC.push(statFormatPart);
    });
    //log(formatForSC);

    // Fetch the `${plr} Stats` card
    const statSC = storyCards.find(sc => sc.title === `${plr} Stats`);

    // Convert holder to string, clean commas, and finally store to sc entry
    statSC.entry = String(formatForSC).replace(/,/g, '');

    // Trim notes on char limit to prevent memory overfill
    if (statSC.description.length > 3000) {
      halfIndex = Math.floor(statSC.description.length / 3);
      statSC.description = statSC.description.slice(0, halfIndex);

      log("Trimming statSC description to prevent memory overload.");
    }
  });
}

function createIfNoCurrSC(){
    formatForSC = [];
  if (!storyCards.find(sc => sc.title === "Story Status")) {
    // If "Story Status" card doesn't exist, create it
    addStoryCard("Story Status", "Blank", "world stats");

    // Fetch the "Story Status" card
    const currSC = storyCards.find(sc => sc.title === "Story Status");
     
// Convert holder to string, clean commas, and finally store to sc entry
  currSC.entry = String(formatForSC).replace(/,/g, '');
  currSC.description = String(formatForSC).replace(/,/g, '');
  };
  }
function storeCurrToSC() {
  // Fetch the "Story Status" card
  const currSC = storyCards.find(sc => sc.title === "Story Status");
  if (!currSC) return;

  // Format the heat, temperature, and author’s note info
  currSC.entry =
    `World Clock: ${state.statusBar || ""}\n` + 
    `Current turn: ${state.turnNum_SAE}\n` +
    `Year: ${state.globalTime.year}\n` +
    `Month-Day: ${String(state.globalTime.month).padStart(2, '0')}-${String(state.globalTime.day).padStart(2, '0')}\n` +
    `Hour-Minute: ${String(state.globalTime.hour).padStart(2, '0')}:${String(state.globalTime.minute).padStart(2, '0')}\n` +
    `Turns Per Removal: ${state.turnsPerElemRemoval}\n` +
    `Current Heat: ${state.heat}\n` +
    `Current Temperature: ${state.storyTemperature}\n` +
    
    `Authors Note: ${state.authorsNoteStorage}\n`+ 
    `TD: ${state.stt.timePassOnDo}\n`+
    `TS: ${state.stt.timePassOnSay}\n`+
    `TST: ${state.stt.timePassOnStory}\n`+
    `TC: ${state.stt.timePassOnContinue} \n`;


  // Initialize description if missing
  if (!currSC.description) {
      currSC.description = '';
  }

  // Add heatlogs if present
  if (state.heatlogs) {
      currSC.description = `Log ${state.turnCount} | ${state.heatlogs}\n` + currSC.description;
  }

  // Trim from the bottom if longer than 3000 chars
  if (currSC.description.length > 3000) {
      currSC.description = currSC.description.slice(0, 3000);
      log("Trimming currSC.description to keep only recent logs");
  }
}



function retrieveCurrFromSC() {
  
  // Fetch the "Story Status" card
  const currSC = storyCards.find(sc => sc.title === "Story Status");
  if (!currSC || !currSC.entry) return;

  // Split entry by lines
  const lines = currSC.entry.split('\n');

  lines.forEach(line => {
    const [key, ...rest] = line.split(':').map(s => s.trim());
    const value = rest.join(':'); // preserves hour:minute intact

    if (key === "Year") state.globalTime.year = Number(value);
    else if (key === "Month-Day") {
    const [month, day] = value.split('-').map(Number);
    state.globalTime.month = month;
    state.globalTime.day = day;
    }
    else if (key === "Hour-Minute") {
    const [hour, minute] = value.split(':').map(Number);
    state.globalTime.hour = hour;
    state.globalTime.minute = minute;
    }
     else if (key === "Turns Per Removal") {
      state.turnsPerElemRemoval = Number(value);
    }
    else if (key === "Current Heat") {
      state.heat = Number(value);
    }
    else if (key === "Current Temperature") {
      state.storyTemperature = Number(value);
    }
    else if (key === "Authors Note") {
      state.memory.authorsNote = value || state.authorsNoteStorage;
    }
      else if (key === "TD") {
      state.stt.timePassOnDo = Number(value);
    }
    else if (key === "TS") {
      state.stt.timePassOnSay = Number(value);
    }
    else if (key === "TST") {
      state.stt.timePassOnStory = Number(value);
    }
    else if (key === "TC") {
      state.stt.timePassOnContinue = Number(value);
    }
  });
  // --- Apply JSON/date recalculation logic exactly as given ---
  let needsDateRecalc = false;

  for (const key in this.defaultSettings) {
    if (state.stt[key] === undefined) {
      state.stt[key] = JSON.parse(JSON.stringify(this.defaultSettings[key]));
      if (['gameHour', 'gameMinute', 'dayOfMonth', 'month', 'year'].includes(key)) {
        needsDateRecalc = true;
      }
    }
  }
  state.stt.initialized = true;

  try {
    const currentDate = new Date(
      state.stt.year, state.stt.month, state.stt.dayOfMonth,
      state.stt.gameHour, state.stt.gameMinute
    );
    if (isNaN(currentDate.getTime())) {
      console.warn("STT.initialize: Invalid date in state. Resetting.");
      state.stt = JSON.parse(JSON.stringify(this.defaultSettings));
      const validDefaultDate = new Date(state.stt.year, state.stt.month, state.stt.dayOfMonth);
      state.stt.dayOfWeek = validDefaultDate.getDay();
    } else if (needsDateRecalc || state.stt.dayOfWeek !== currentDate.getDay()) {
      state.stt.dayOfWeek = currentDate.getDay();
    }
  } catch (e) {
    console.error("STT.initialize: Date validation error. Resetting.", e);
    state.stt = JSON.parse(JSON.stringify(this.defaultSettings));
    const validDefaultDate = new Date(state.stt.year, state.stt.month, state.stt.dayOfMonth);
    state.stt.dayOfWeek = validDefaultDate.getDay();
  }
}


function checkTimeOfDay() {
  // Ensure state variables exist
  if (typeof state.lastTimePeriod === "undefined") state.lastTimePeriod = null;
  if (typeof state.lastCheckedDay === "undefined") state.lastCheckedDay = null;

  let currentDay = state.stt.dayOfMonth;
  let hour = state.stt.gameHour;
  let minute = state.stt.gameMinute;

  // Detect any day change (forward or backward)
  if (currentDay !== state.lastCheckedDay) {
    state.lastCheckedDay = currentDay;
    state.lastTimePeriod = null; // reset so morning triggers
    return "";
  }

let timeOfDay, emoji;

if (hour >= 0 && hour < 4) {
    timeOfDay = "late-night";
    emoji = "🌌"; // late night
} else if (hour >= 4 && hour < 6) {
    timeOfDay = "dawn";
    emoji = "🌄"; // sunrise/dawn
} else if (hour >= 6 && hour < 12) {
    timeOfDay = "morning";
    emoji = "🌅"; // morning
} else if (hour >= 12 && hour < 17) {
    timeOfDay = "afternoon";
    emoji = "🌇"; // afternoon/sunset
} else if (hour >= 17 && hour < 21) {
    timeOfDay = "evening";
    emoji = "🌆"; // evening
} else {
    timeOfDay = "night";
    emoji = "🌙"; // night
}

  // Trigger when time period changes
  if (timeOfDay !== state.lastTimePeriod) {
    state.lastTimePeriod = timeOfDay;
    return `${emoji} It is now ${timeOfDay}. Current time: ${String(hour).padStart(2, "0")}:${String(minute).padStart(2, "0")}`;
  }
  return "";
}

// RETRIEVE data from sc and store to playerstats
function retrieveStatsFromSC() {
  state.playerList.forEach(plr => {
    const statMappings = {
      //lvl: 'maxLvl',
      exp: 'maxExp',
      hp: 'maxHp',
      mp: 'maxMp',
      ep: 'maxEp',
      atk: 'maxAtk',
      def: 'maxDef',
      spd: 'maxSpd',
      lck: 'maxLck',
      intl: 'maxIntl',
    };

    //Fetch SC
    const statSC = storyCards.find(sc => sc.title === `${plr} Stats`);

    // Retrieve and split sc entry into array of stat lines
    const statEntries = statSC.entry.split("\n"); //arr of strings

    // Loop through each stat line in array and extract values
    statEntries.forEach(entry => {
      const raceMatch = entry.trim().match(/^RACE\s*[:\-]?\s*(.+)$/i);
      if (raceMatch) {
        const race = raceMatch[1].toLowerCase().trim();

        state.players[plr].race = race ?? state.players[plr].race;

        return; // Skip further processing
      }

      const classMatch = entry.trim().match(/^CLASS\s*[:\-]?\s*(.+)$/i);
      if (classMatch) {
        const className = classMatch[1].toLowerCase().trim();

        state.players[plr].class_ = className ?? state.players[plr].class_;

        return; // Skip further processing
      }

      // Lvl retrieval exception
      const lvlMatch = entry.trim().match(/^(?:LVL|LEVEL)\s*[:\-]?\s*(\d+)$/i);
      if (lvlMatch) {
        state.players[plr].stats.maxLvl = Number(lvlMatch[1]);
        return; // Skip lvl match when found
      }

      // Match and extract (statname, stat, maxStat)
      const match = entry.trim().match(/^([a-zA-Z]+)\s*:\s*(\d+(?:\.\d+)?)\s*\/\s*(\d+(?:\.\d+)?)$/);
      //log("stat sc match: " + match);

      //Store value in holder
      if (match) {
        const statName = match[1].toLowerCase();  // stat name (Ex: 'atk')
        const statValue = Number(match[2]);    // current stat value (Ex: '50')
        const maxStatValue = Number(match[3]); // max stat value (Ex: '100')

        // Finally store stat and max stat in the playerStats if name is valid
        if (statMappings[statName]) { //Ex: statMappings[atk] = 'maxAtk'
          //OR operator safeguards against null values    
          state.players[plr].stats[statName] = statValue ?? state.players[plr].stats[statName];
          state.players[plr].stats[statMappings[statName]] = maxStatValue ?? state.players[plr].stats[statMappings[statName]];
        }
      }
    });
  });
  //log(state.playerStats);
}

// Function to increment the player's stats
function statUp(plr, statName, incAmt) {
  // Ensure incAmt is a number
  if (typeof incAmt !== "number") {
    incAmt = 0;
  }
  incAmt = Number(incAmt);
  incAmt = Math.round(incAmt * 100) / 100;
  log("incAmt: " + incAmt + " " + statName);

  //Intialize incAmt trackers for logging
  preModIncAmt = incAmt;
  scaledIncAmt = incAmt;

  //Race modifiers influence stat gains
  plrRace = getPlrRacePE();
  temp = incAmt * state.players[plr].modifiers[statName + 'Mod'] / 100;
  //Multiply temp by negative to ensure modifiers dont modify oppositely when incAmt is negative
  if (incAmt < 0) {
    temp = temp * -1;
  }
  incAmt = incAmt + temp;
  incAmt = Math.round(incAmt * 100) / 100;
  log("Race modded incAmt: " + incAmt + " " + statName);

  // Get maxstat string key Ex: maxATK
  maxStatName = "max" + statName.charAt(0).toUpperCase() + statName.slice(1);

  // Save current stat
  stat = state.players[plr].stats[statName];
  log("stat: " + stat);
  log("----------");

  // Exception: Extra hp,mp,ep shouldnt lvl up player, simply increment available value
  if (statName == "hp" || statName == "mp" || statName == "ep") {
    state.players[plr].stats[statName] += incAmt;

    // Only two decimal places
    state.players[plr].stats[statName] = Math.round(state.players[plr].stats[statName] * 100) / 100;

    // No overflow for hp, mp, ep
    if (state.players[plr].stats[statName] > state.players[plr].stats[maxStatName]) {
      state.players[plr].stats[statName] = state.players[plr].stats[maxStatName];
    }

    // Fetch the `${plr} Stats` card and log stat changes in description
    const statSC = storyCards.find(sc => sc.title === `${plr} Stats`);

    if (incAmt >= 0) { sign = "⬆️" }
    if (incAmt < 0) { sign = "🔻" }

    statSC.description = `Log ${state.turnCount} | ${statName.toUpperCase()} ${sign} :  ${stat} → ${state.players[plr].stats[statName]} (Modded: ${incAmt}, Raw: ${preModIncAmt})\n` + statSC.description;

    state.msgHolder = state.msgHolder + `${plr} ${statName.toUpperCase()} ${sign} :  ${stat} → ${state.players[plr].stats[statName]}\n`;
  }
  else {
    // Formula which decreases value of exp the higher your level and gets the new stat value after exp gain. (stat + incAmt*PercentReduction)
    // New stat after exp scaling formula
    newStat = 0.01 + stat + incAmt * (1.32 * Math.exp(-0.02 * stat));

    // Get scaled incAmt for logging
    scaledIncAmt = incAmt * (1.32 * Math.exp(-0.02 * stat));
    scaledIncAmt = Math.round(scaledIncAmt * 100) / 100;
    log("scaledIncAmt: " + scaledIncAmt);

    // Two decimal places only
    newStat = Math.round(newStat * 100) / 100;
    log("newStat: " + newStat);
    // todo: fix rounding at very high levels

    // Update the player stat to its new stat
    state.players[plr].stats[statName] = newStat;

    // Stat cant pass max stat so it overflows, get the overflow if it exists
    overflow = state.players[plr].stats[statName] - state.players[plr].stats[maxStatName];
    overflow = Math.round(overflow * 100) / 100;
    log("overflow: " + overflow);

    // Fix stat to not pass maxstat
    if (state.players[plr].stats[statName] > state.players[plr].stats[maxStatName]) {
      state.players[plr].stats[statName] = state.players[plr].stats[maxStatName];
    };

    // Fetch sc and log
    const statSC = storyCards.find(sc => sc.title === `${plr} Stats`);

    if (incAmt >= 0) { sign = "⬆️" }
    if (incAmt < 0) { sign = "🔻" }

    statSC.description = `Log ${state.turnCount} | ${statName.toUpperCase()} ${sign} :  ${stat} → ${state.players[plr].stats[statName]} (Scaled: ${scaledIncAmt}, Modded: ${incAmt}, Raw: ${preModIncAmt})\n` + statSC.description;

    // Log to msg
    state.msgHolder = state.msgHolder + `${plr} ${statName.toUpperCase()} ${sign} :  ${stat} → ${state.players[plr].stats[statName]}\n`;

    //If there is positive stat overflow, pass it to player EXP
    if (overflow > 0) {
      // Get current max level
      level = state.players[plr].stats.maxLvl;
      log("level: " + level);

      // Scale overflow and add to EXP (Must scale overflow to account when player is high level but has a low stat which will overflow too much to EXP)
      state.players[plr].stats.exp = 0.01 + state.players[plr].stats.exp + (100 * overflow * (1.32 * Math.exp(-0.02 * level)));

      // Round to two decimal places
      state.players[plr].stats.exp = Math.round(state.players[plr].stats.exp * 100) / 100;
      log("state.players[plr].stats.exp: " + state.players[plr].stats.exp);

      //When maxEXP is reached, increment plr level and reset EXP to 0
      if (state.players[plr].stats.exp >= state.players[plr].stats.maxExp) {
        // Calculate amt of times to increment LVL based on EXP
        lvlIncrement = Math.floor(state.players[plr].stats.exp / state.players[plr].stats.maxExp);
        log("lvlIncrement: " + lvlIncrement);

        // Calculate leftover EXP
        leftoverExp = 100 * (state.players[plr].stats.exp / state.players[plr].stats.maxExp - lvlIncrement);
        log("leftoverExp: " + leftoverExp);

        // Increment LVL
        state.players[plr].stats.maxLvl += lvlIncrement;

        // Reset EXP to 0 and add leftover exp
        state.players[plr].stats.exp = 0 + leftoverExp;
        state.players[plr].stats.exp = Math.round(state.players[plr].stats.exp * 100) / 100;

        // Fetch the `${plr} Stats` card and leave log in description
        const statSC = storyCards.find(sc => sc.title === `${plr} Stats`);
        statSC.description = `Log ${state.turnCount} | LVL ${level} → ${state.players[plr].stats.maxLvl}\n` + statSC.description;

        state.msgHolder = state.msgHolder + `${plr} LVL ${level} → ${state.players[plr].stats.maxLvl}\n`;

        // Since player has leveled up, increase all max stats
        maxStatKeys.forEach((key) => {
          //Get mod key
          statKey = key.slice(3); // Remove "max"
          modName = statKey.toLowerCase() + "Mod";

          // Apply max stat changes
          if (key == "maxHp") {
            state.players[plr].stats[key] += 5 + (5 * state.players[plr].modifiers[modName] / 100);
          }
          else if (key == "maxEp") {
            state.players[plr].stats[key] += 5 + (5 * state.players[plr].modifiers[modName] / 100);
          }
          else if (key == "maxMp") {
            state.players[plr].stats[key] += 5 + state.players[plr].stats.intl * 0.1 + (5 * state.players[plr].modifiers[modName] / 100);
          }
          else {
            if (key != 'maxLvl' && key != 'maxExp') {
              state.players[plr].stats[key] += 5 + (5 * state.players[plr].modifiers[modName] / 100);;
            }
          }

          // Round to two decimal places
          state.players[plr].stats[key] = Math.round(state.players[plr].stats[key] * 100) / 100;
        });

      } // End of level up
    } //end of positive overflow
  }

  storeStatsToSC();
}

function playerNaturalRegen() {
  state.playerList.forEach(plr => {
    // Player regens only if alive
    if (state.players[plr].stats.hp > 0) {
      statUp(plr, "hp", 1);
      statUp(plr, "mp", 2);

      // Player loses available energy only
      if (state.players[plr].stats.ep > 0) {
        statUp(plr, "ep", -1 * randomFloat(0, 1));
      }

      // Player takes damage for having no energy
      if (state.players[plr].stats.ep <= 0) {
        statUp(plr, "hp", -1 * (randomFloat(0.01, 5) + randomFloat(0.01, state.players[plr].stats.maxHp * 0.1)));
      }

    }//end of is alive
  });
}
//todo: add counter buffer for no energy loss while not inputting game

// Removes plr from dead plrs list if they are alive
function updateDeadPlrs() {
  state.playerList.forEach(plr => {
    if (state.players[plr].stats.hp > 0 && state.deadPlrs.includes(plr)) {
      const index = state.deadPlrs.indexOf(plr);
      if (index > -1) {
        state.deadPlrs.splice(index, 1); // Remove the player from deadPlrs
      }
    }
  });

  log("state.deadPlrs: " + state.deadPlrs);
}

// Edit text to show player health
function warnPlayerHealth(text) {
  state.playerList.forEach(plr => {
    plrHealth = state.players[plr].stats.hp;
    plrMaxHealth = state.players[plr].stats.maxHp;

    plrEnergy = state.players[plr].stats.ep;
    plrMaxEnergy = state.players[plr].stats.maxEp;

    numTurnsDisplay = 5;

    // Warn player every 5 inputs, they have 50% health
    if ((plrHealth / plrMaxHealth) >= 0.45 && (plrHealth / plrMaxHealth) <= 0.50 && state.inputCount % numTurnsDisplay === 0) {
      text = text + toCoOpLang(plr, ` ${realizePhrases[randomInt(0, realizePhrases.length - 1)]} ${healthFeelsHalfway[randomInt(0, healthFeelsHalfway.length - 1)]}. `);
    }

    // Warns at 1% to 10% health
    else if ((plrHealth / plrMaxHealth) >= 0.01 && (plrHealth / plrMaxHealth) <= 0.10 && state.inputCount % numTurnsDisplay === 0) {
      text = text + toCoOpLang(plr, ` ${realizePhrases[randomInt(0, realizePhrases.length - 1)]} ${healthVeryLow[randomInt(0, healthVeryLow.length - 1)]}. `);
    }

    // Player Death at 0%
    if (plrHealth <= 0 && state.inputCount % 2 === 0 && onePlayerFlagger()) {
      text = text + ` Suddenly, ${healthDeathArray[randomInt(0, healthDeathArray.length - 1)]} The world continues without you.`;

      state.msgHolder = state.msgHolder + `GAME OVER. You died!\n`;
    }
    else if (plrHealth <= 0 && !state.deadPlrs.includes(plr) && !onePlayerFlagger()) {
      // Update dead plrs list
      state.deadPlrs.push(plr);

      // Create flavor text
      text = text + toCoOpLang(plr, ` Suddenly, ${healthDeathArray[randomInt(0, healthDeathArray.length - 1)]} The world continues without you. `);

      state.msgHolder = state.msgHolder + toCoOpLang(plr, `You died!\n`);
    }


    // Warns every 5 input, at 50% energy
    if ((plrEnergy / plrMaxEnergy) >= 0.45 && (plrEnergy / plrMaxEnergy) <= 0.50 && state.inputCount % numTurnsDisplay === 0) {
      text = text + toCoOpLang(plr, ` ${realizePhrases[randomInt(0, realizePhrases.length - 1)]} ${halfEnergyArray[randomInt(0, halfEnergyArray.length - 1)]} `);
    }

    // Warns at 1% to 10% energy
    else if ((plrEnergy / plrMaxEnergy) >= 0.01 && (plrEnergy / plrMaxEnergy) <= 0.10 && state.inputCount % numTurnsDisplay === 0) {
      text = text + toCoOpLang(plr, ` ${realizePhrases[randomInt(0, realizePhrases.length - 1)]} ${exhaustedArray[randomInt(0, exhaustedArray.length - 1)]}`);

      state.msgHolder = state.msgHolder + toCoOpLang(plr, `Your energy is very low. You may want to rest or eat.\n`)

    }

    // No energy at 0%
    if (plrEnergy <= 0 && state.inputCount % 5 === 0) {
      text = text + toCoOpLang(plr, ` Suddenly, ${fullExhaustionArray[randomInt(0, fullExhaustionArray.length - 1)]} `);

      state.msgHolder = state.msgHolder + toCoOpLang(plr, `You have no energy! Recover by consuming or sleeping.\n`)
    }

  });

  return text;
}

/////////////////////////////////////////////////////////////////////////////////////

// CREATE new sc with player inv if sc doesnt exist
function createIfNoInvSC() {
  state.playerList.forEach(plr => {
    if (!storyCards.find(sc => sc.title === `${plr} Inventory`)) {
      // If `${plr} Inventory` card doesn't exist, create it
      addStoryCard(`${plr} Inventory`, "Blank", `Player Stats`);

      // Fetch the `${plr} Inventory` card
      const invSC = storyCards.find(sc => sc.title === `${plr} Inventory`);
      invSC.description = "Format for Modifying: ItemName (amt: X)";
    }
  });
}

// STORE inv to sc
function storeInvToSC() {
  state.playerList.forEach(plr => {
    // Fetch the `${plr} Inventory` card
    const invSC = storyCards.find(sc => sc.title === `${plr} Inventory`);

    // Format and display to sc
    invSC.entry = state.players[plr].inv.item.map((item, index) => `${item} (Amt: ${state.players[plr].inv.amt[index]})`).join("\n");

    // Trim notes on char limit to prevent memory overfill
    if (invSC.description.length > 3000) {
      halfIndex = Math.floor(invSC.description.length / 3);
      invSC.description = invSC.description.slice(0, halfIndex);

      log("Trimming invSC description to prevent memory overload.");
    }

  });
}

// RETRIEVE inv data from sc
function retrieveInvFromSC() {
  state.playerList.forEach(plr => {

    // Fetch the `${plr} Inventory` card
    const invSC = storyCards.find(sc => sc.title === `${plr} Inventory`);

    // Get inv sc entry
    fromInvSC = invSC.entry;
    //log("fromInvSC: " + fromInvSC);

    // Use regex to extract item names and amounts (Ex: Ball (Amt: 2), etc. )
    matches = fromInvSC.matchAll(/(.+?)\s*\(.*?(\d+(?:\.\d+)?).*?\)/g);

    itemHold = [];
    amtHold = [];
    for (const match of matches) {
      // Do not extract 0 amt items
      if (match[2] != 0) {
        itemHold.push(match[1].trim()); // Extract item name to holder
        amtHold.push(Number(match[2])); // Extract amount as integer to holder2
      }
    }

    // Store retrieved data to codebase 
    state.players[plr].inv.item = itemHold;
    state.players[plr].inv.amt = amtHold;

    //log("state.players[plr].inv.item: " + state.players[plr].inv.item);
    //log("state.players[plr].inv.amt: " + state.players[plr].inv.amt);
  });
}

// Detect when the player stores item and amt to their inventory
function detectStoreInv(text) {
  newText = "";

  // Verify player is not dialoguing (case-insensitive)
  dialogueFlag = true;
  dialoguePhrases.forEach(phrase => {
    if (text.toLowerCase().includes(phrase.toLowerCase())) {
      // Disable check dialoguing exists
      dialogueFlag = false;
    }
  });

  if (dialogueFlag) {
    // Check which players are in the input and store their name and corresponding text
    result = separateByPlr(text);
    plrsDetected = Object.keys(result);
    plrText = {};

    plrsDetected.forEach(plr => {
      if (result[plr].length > 0) {
        plrText[plr] = result[plr].join(" ").replace(/(?<!>)>(?!>)/g, "");
      }
      else {
        plrText[plr] = result[plr].join(" ");
      }
    });

    // Loop through each player and test for action
    plrsDetected.forEach(plr => {
      // Initialize condition var
      startEquip = false;
      storeFlavorText = "";

      // Check for inventory words in input then split text into words arr
      equipTextInput = [];
      processedText = wordsToNumber(plrText[plr]);
      equipTextInput = findTargetsThenSplit(processedText, invWords, true);
      //equipTextInput = findTargetsThenSplit(text,equipWords,true);
      log("equipTextInput: " + equipTextInput);


      // If there are inventory words, check for "you equip" in words arr using indices
      if (equipTextInput != null) {
        //Get indices of all equip words in words arr
        allEquipWordIndices = [];
        allEquipWordIndices = indicesOfTargets(equipTextInput, equipWords);
        log("allEquipWordIndices: " + allEquipWordIndices);


        // If "you" is found within x indices of equip words, start equip process
        if (allEquipWordIndices != null) {
          startEquip = checkYouBeforeIndicesArr(plr, equipTextInput, allEquipWordIndices, 3) || checkAndBeforeIndicesArr(equipTextInput, allEquipWordIndices, 2);
          log("startEquip:" + startEquip);
        }
      }

      // Start equip process when "you equip + inventory" is found in words arr
      if (startEquip == true) {
        // Initialize arrays for potential items from filtered input
        potentialItem = {
          tokens: [],
          indices: [],
          weights: []
        };

        // Filter out words that arent potential items
        potentialItem.tokens = equipTextInput.filter(word =>
          ![...stopWords, ...equipWords, ...talentWords, ...dodgeWords, ...castWords, ...learnWords, ...invWords, ...numWords, ...youWords, ...selfWords, ...consumeWords, ...titleWords].some(fromArr => (
            fromArr.toLowerCase() === word.toLowerCase())
            || (fromArr.toLowerCase() + "s" === word.toLowerCase())
            || (fromArr.toLowerCase() + "es" === word.toLowerCase())
          ));
        potentialItem.tokens = potentialItem.tokens.filter(word => !/^\d+$/.test(word));
        log("potentialItem.tokens: " + potentialItem.tokens);

        if (potentialItem.tokens.length > 0) {
          // Get potential item indices from unfiltered input text
          potentialItem.indices = indicesOfTargets(equipTextInput, potentialItem.tokens);

          // Remove duplicate indices
          potentialItem.indices = [...new Set(potentialItem.indices)];
          log("potentialItem.indices: " + potentialItem.indices);

          // Initialize weight array to hold 0 for each potential item token
          potentialItem.weights = [];
          potentialItem.indices.forEach(word => { potentialItem.weights.push(0); });
          //log("potentialItem.weights: " + potentialItem.weights);

          // Get all indices of biased words in text, set to [] if null to avoid errors
          allEquipWordIndices = allEquipWordIndices || [];
          invWordIndices = indicesOfTargets(equipTextInput, invWords) || [];
          numIndices = getDigitIndices(equipTextInput) || [];
          fromIndices = indicesOf(equipTextInput, "from") || [];
          theIndices = indicesOf(equipTextInput, "the") || [];
          aIndices = indicesOf(equipTextInput, "a") || [];
          anIndices = indicesOf(equipTextInput, "an") || [];
          ofIndices = indicesOf(equipTextInput, "of") || [];
          inIndices = indicesOf(equipTextInput, "in") || [];
          intoIndices = indicesOf(equipTextInput, "into") || [];
          andIndices = indicesOf(equipTextInput, "and") || [];
          itIndices = indicesOf(equipTextInput, "it") || [];
          itsIndices = indicesOf(equipTextInput, "its") || [];
          themIndices = indicesOf(equipTextInput, "them") || [];
          thatIndices = indicesOf(equipTextInput, "that") || [];
          thenIndices = indicesOf(equipTextInput, "then") || [];

          // Weigh each token based on distance before or after biased words
          // If token is near an "equip word"
          if (allEquipWordIndices.length > 0) {
            // Ex: You place sword
            isAfterIndex(potentialItem.indices, allEquipWordIndices, 0, 3, 2.5, potentialItem.weights);
            isAfterIndex(potentialItem.indices, allEquipWordIndices, 4, 5, 1.5, potentialItem.weights);
            isAfterIndex(potentialItem.indices, allEquipWordIndices, 6, 10, 0.5, potentialItem.weights);
          }

          // If token is near an "inventory word"
          if (invWordIndices.length > 0) {
            // First 2 words before inv likely "in your" bag (Ex: ...sword in your bag)
            isBeforeIndex(potentialItem.indices, invWordIndices, 0, 2, -2.5, potentialItem.weights);
            isBeforeIndex(potentialItem.indices, invWordIndices, 2, 4, 2, potentialItem.weights);
            isBeforeIndex(potentialItem.indices, invWordIndices, 5, 6, 1.5, potentialItem.weights);
          }

          // If token is near "number"
          if (numIndices.length > 0) {
            // Ex: take 1 sword
            isAfterIndex(potentialItem.indices, numIndices, 0, 3, 2.5, potentialItem.weights);
          }

          // If token is near "the" 
          if (theIndices.length > 0) {
            // Ex: take the sword
            isAfterIndex(potentialItem.indices, theIndices, 0, 4, 2.5, potentialItem.weights);
          }

          // If token is near "from"
          if (fromIndices.length > 0) {
            // Ex: take sword from
            isBeforeIndex(potentialItem.indices, fromIndices, 0, 2, 1, potentialItem.weights);
            isBeforeIndex(potentialItem.indices, fromIndices, 3, 4, 0.5, potentialItem.weights);

            isAfterIndex(potentialItem.indices, fromIndices, 0, 3, -2, potentialItem.weights);

          }
          // If token is near "a/an"
          if (aIndices.length > 0 || anIndices.length > 0) {
            // Ex: take a sword
            isAfterIndex(potentialItem.indices, aIndices, 0, 4, 1.5, potentialItem.weights);
            isAfterIndex(potentialItem.indices, anIndices, 0, 4, 1.5, potentialItem.weights);
          }

          // If token is near "of" 
          if (ofIndices.length > 0) {
            // Ex: take 3 of the swords
            isAfterIndex(potentialItem.indices, ofIndices, 0, 1, 0.5, potentialItem.weights);
            isAfterIndex(potentialItem.indices, ofIndices, 2, 4, 1, potentialItem.weights);
          }

          // If token is near "in/into"  
          if (inIndices.length > 0 || intoIndices.length > 0) {
            // Ex: take sword and put in
            isBeforeIndex(potentialItem.indices, inIndices, 0, 8, 1, potentialItem.weights);
            isBeforeIndex(potentialItem.indices, intoIndices, 0, 8, 1, potentialItem.weights);

            isAfterIndex(potentialItem.indices, inIndices, 0, 3, -2, potentialItem.weights);
          }

          // If token is near "and"
          if (andIndices.length > 0) {
            // Ex: sword, gun, and shield
            isBeforeIndex(potentialItem.indices, andIndices, 0, 3, 1, potentialItem.weights);
            isBeforeIndex(potentialItem.indices, andIndices, 4, 6, 0.5, potentialItem.weights);

            isAfterIndex(potentialItem.indices, andIndices, 0, 3, 1.5, potentialItem.weights);

          }

          // If token is near "it/its"
          if (itIndices.length > 0 || itsIndices.length > 0) {
            //Ex: "apple and put it"
            isBeforeIndex(potentialItem.indices, itIndices, 0, 3, -1, potentialItem.weights);
            isBeforeIndex(potentialItem.indices, itsIndices, 4, 8, 1.5, potentialItem.weights);

            isAfterIndex(potentialItem.indices, itsIndices, 0, 3, -2, potentialItem.weights);
          }

          // If token is near "them"
          if (themIndices.length > 0) {
            // Ex: "and put them"
            isBeforeIndex(potentialItem.indices, themIndices, 0, 3, -1.5, potentialItem.weights);
            isBeforeIndex(potentialItem.indices, themIndices, 4, 8, 1.5, potentialItem.weights);

            isAfterIndex(potentialItem.indices, themIndices, 0, 2, -2, potentialItem.weights);
          }

          // If token is near "that"
          if (thatIndices.length > 0) {
            // Ex: take that apple
            isAfterIndex(potentialItem.indices, thatIndices, 0, 3, 1.5, potentialItem.weights);
          }

          // If token is near "then"
          if (thenIndices.length > 0) {
            // Ex: take the sword then the apple
            isAfterIndex(potentialItem.indices, thenIndices, 0, 3, 1.5, potentialItem.weights);

            isBeforeIndex(potentialItem.indices, thenIndices, 0, 3, 1.5, potentialItem.weights);
          }
          log("potentialItem.weights: " + potentialItem.weights);

          // Initialize holder for item tokens
          itemNameParts = [];

          // Find last index that passes weight threshold to know when last item tokens will be stored
          for (let i = potentialItem.weights.length - 1; i >= 0; i--) {
            if (potentialItem.weights[i] >= 4) {
              lastWeightIndex = i;
              break;
            }
          }

          // Push potential items into holder if they pass weight threshold
          potentialItem.weights.forEach((weight, index) => {
            if (weight >= 4) {
              itemNameParts.push(potentialItem.tokens[index]);
              log("itemNameParts: " + itemNameParts);

              // Slice text chunk at potential item index for end of item testing
              textChunk = processedText.replace(/(?<!>)>(?!>)/g, "")
                .trim()
                .split(" ")
                .slice(potentialItem.indices[index], potentialItem.indices[index] + 2)
                .join(" ");
              log("textChunk: " + textChunk);

              // Test for end of item name to join and store item from holder
              pattern = new RegExp(`\\b${potentialItem.tokens[index]}\\b\\s*(,|and|\\.)`, 'i');
              itemEnd = textChunk.search(pattern);
              log("itemEnd: " + itemEnd);

              if (itemEnd !== -1 || index == lastWeightIndex) {
                // Combine item name parts into final item name
                finalItemName = itemNameParts.join(" ");
                log("finalItemName: " + finalItemName);

                // Clear the array after item is stored for next possible item
                itemNameParts = [];

                // Get item amt
                itemAmt = findClosestNumberBefore(equipTextInput, potentialItem.indices[index]);

                if (!itemAmt) {
                  itemAmt = 1;
                }

                // Get index if already existing item in player inv 
                alreadyItemIndex = [];
                alreadyItemIndex = indicesOf(state.players[plr].inv.item, finalItemName);

                // Increment item amt if already existing in inv
                if (alreadyItemIndex) {
                  state.players[plr].inv.amt[alreadyItemIndex] += itemAmt;

                  // Log to messages
                  state.msgHolder = state.msgHolder + `${plr} 🎒 +${itemAmt} ${state.players[plr].inv.item[alreadyItemIndex]}\n`;


                  // Fetch the `${plr} Inventory` card and log
                  const invSC = storyCards.find(sc => sc.title === `${plr} Inventory`);
                  invSC.description = `Log ${state.turnCount} | +${itemAmt} ${state.players[plr].inv.item[alreadyItemIndex]}\n` + invSC.description;
                }
                else {
                  // Else new item is stored
                  state.players[plr].inv.item.push(finalItemName);
                  state.players[plr].inv.amt.push(itemAmt);

                  // Log to msg
                  state.msgHolder = state.msgHolder + `${plr} 🎒 +${itemAmt} ${finalItemName}\n`;

                  // Fetch the `${plr} Inventory` card and log

                  const invSC = storyCards.find(sc => sc.title === `${plr} Inventory`);
                  invSC.description = `Log ${state.turnCount} | +${itemAmt} ${finalItemName}\n` + invSC.description;
                }
              }
            }
          });

          //Update SC
          storeInvToSC();

          storeFlavorText = storeFlavorText + toCoOpLang(plr, ` ${itemGainPhrases[randomInt(0, itemGainPhrases.length - 1)]} `);

        }//end of potentialItem.tokens.length

      }//end of startEquip

      newText = newText + plrText[plr] + storeFlavorText;
    });
  }

  if (newText == "") {
    return text;
  }
  else {
    return newText;
  }
}

// Detect when player gives away an item
function detectGiving(text) {
  newText = "";

  // Verify player is not dialoguing (case-insensitive)
  dialogueFlag = true;
  dialoguePhrases.forEach(phrase => {
    if (text.toLowerCase().includes(phrase.toLowerCase())) {
      // Disable check dialoguing exists
      dialogueFlag = false;
    }
  });

  if (dialogueFlag) {
    // Check which players are in the input and store their name and corresponding text
    result = separateByPlr(text);
    plrsDetected = Object.keys(result);
    plrText = {};

    // Store each player's text
    plrsDetected.forEach(plr => {
      if (result[plr].length > 0) {
        plrText[plr] = result[plr].join(" ").replace(/(?<!>)>(?!>)/g, "");
      }
      else {
        plrText[plr] = result[plr].join(" ");
      }
    });

    // Loop through each player and test for action
    plrsDetected.forEach(plr => {
      // Initialize condition
      startGiving = false;
      finalFlavorText = "";

      // Check for give words in the text and split the input
      givingTextInput = [];
      processedText = wordsToNumber(plrText[plr]);
      givingTextInput = findTargetsThenSplit(processedText, giveWords, true);
      log("givingTextInput simplified: " + givingTextInput);

      // Get all give word indices from input
      if (givingTextInput != null) {
        allGiveWordIndices = [];
        allGiveWordIndices = indicesOfTargets(givingTextInput, giveWords);
        log("allGiveWordIndices:" + allGiveWordIndices);

        // Check if the input contains "you/and + give" then unlock execution
        if (allGiveWordIndices != null) {
          startGiving = checkYouBeforeIndicesArr(plr, givingTextInput, allGiveWordIndices, 3) || checkAndBeforeIndicesArr(givingTextInput, allGiveWordIndices, 2);
          log("startGiving: " + startGiving);
        }
      }


      // Input meets requirements, execute giving
      if (startGiving) {
        itmInputIndices = [];
        itmInputAmts = [];
        itmInvIndices = [];

        // Loop through each plr item to check if item is called in input
        state.players[plr].inv.item.forEach((itm, index) => {
          // Split itm parts for multi worded itms
          itmParts = itm.toLowerCase().split(" ");

          // Loop through each word in input and check for full item match
          for (let i = 0; i <= givingTextInput.length - itmParts.length; i++) {
            match = true;

            // Checking for full item match (case and plural insensitive)
            for (let j = 0; j < itmParts.length; j++) {
              if (itmParts[j] !== givingTextInput[i + j].toLowerCase()
                && itmParts[j] + 's' !== givingTextInput[i + j].toLowerCase()
                && itmParts[j] !== givingTextInput[i + j].toLowerCase() + 's') {
                match = false;
                break;
              }
            }
            //todo: add partial matching

            // Item is matched
            if (match) {
              // Store first part index from input in array
              itmInputIndices.push(i);

              // Get item amt from input and store in array
              itmAmt = findClosestNumberBefore(givingTextInput, i) ?? 1;
              itmInputAmts.push(itmAmt);

              // Save item index from inv in array
              itmInvIndices.push(index);
            }
          }

        });
        log("itmInputIndices: " + itmInputIndices);
        log("itmInputAmts: " + itmInputAmts);
        log("itmInvIndices: " + itmInvIndices);

        giveFlavorText = [];
        failFlavorText = [];
        zeroAmtArr = [];

        // Player has called item
        if (itmInputIndices.length > 0) {
          // Loop through each itm called 
          itmInputIndices.forEach((itm, index) => {
            // Player has enough item amount in inv
            if (state.players[plr].inv.amt[itmInvIndices[index]] >= itmInputAmts[index]) {
              // Subtract item amt from inventory
              state.players[plr].inv.amt[itmInvIndices[index]] = state.players[plr].inv.amt[itmInvIndices[index]] - itmInputAmts[index];

              // Fetch SC and log
              const invSC = storyCards.find(sc => sc.title === `${plr} Inventory`);
              invSC.description = `Log ${state.turnCount} | -${itmInputAmts[index]} ${state.players[plr].inv.item[itmInvIndices[index]]}\n` + invSC.description;

              // Log to messages
              state.msgHolder = state.msgHolder + `${plr} 🫴 -${itmInputAmts[index]} ${state.players[plr].inv.item[itmInvIndices[index]]}\n`

              // Store item to flavor text array
              giveFlavorText.push(state.players[plr].inv.item[itmInvIndices[index]]);

              storeInvToSC();

            }
            // Player doesnt have enough item amount in inv
            else {
              failFlavorText.push(state.players[plr].inv.item[itmInvIndices[index]]);
            }
          });
        }
        log("giveFlavorText: " + giveFlavorText);
        log("failFlavorText: " + failFlavorText);

        // Execute giving flavor text
        if (giveFlavorText.length > 0) {
          finalFlavorText = finalFlavorText + ` ${toCoOpLang(plr, `The ${giveFlavorText.join(", ")} leaves your inventory.`)} `;
        }
        if (failFlavorText.length > 0) {
          finalFlavorText = finalFlavorText + ` ${toCoOpLang(plr, ` You realize you don't have enough ${failFlavorText.join(", ")}.`)} `;
        }

        // Unlock Context Hook feed to influence AI to reject lack of items or wrong items to give
        allItems = [];
        state.players[plr].inv.item.forEach((itm, index) => {
          allItems.push(`${state.players[plr].inv.amt[index]} ${state.players[plr].inv.item[index]}`);
        })
        if (allItems.length == 0) {
          allItems.push("nothing");
        }
        allItems = allItems.join(", ");

        if (onePlayerFlagger()) {
          state.invCheckText = ` You realize you have nothing in your inventory but only ${allItems}. You anticipate failure for not having the right items or amount.`
        }
        else {
          state.invCheckText = state.invCheckText + ` ${plr} realizes they have nothing in their inventory but only ${allItems}. ${plr} anticipates failure for not having the right items or amount. `;
        }


        state.unlockInvToContext = true;
        log("state.unlockInvToContext: " + state.unlockInvToContext);

      }//end of startgiving

      newText = newText + plrText[plr] + finalFlavorText;
    });
  }

  if (newText == "") {
    return text;
  }
  else {
    return newText;
  }
}

// Succeeding function for detectGiving, sends the inventory and rejection check text to AI on context hook
function feedInvToContext(text) {
  if (state.unlockInvToContext) {
    text = text + state.invCheckText;
    //log("state.invCheckText: " + state.invCheckText);

    state.invCheckText = "";
  }

  state.unlockInvToContext = false;

  return text;
}

/////////////////////////////////////////////////////////////////////////////////////

// CREATE initial SC if none.
function createIfNoTalentSC() {
  state.playerList.forEach(plr => {
    // If "Player Talents" card doesn't exist, create it
    if (!storyCards.find(sc => sc.title === `${plr} Talents`)) {
      addStoryCard(`${plr} Talents`, "Blank", `Player Stats`);

      // Fetch SC and give it a description
      const talentSC = storyCards.find(sc => sc.title === `${plr} Talents`)
      talentSC.description = "Format for Modifying: Talent Name (LVL) (EP) (Optional Key1, Key2, etc.)";

    }
  });
}

// To STORE talent to sc
function storeTalentsToSC() {
  state.playerList.forEach(plr => {
    // Fetch talent sc
    const talentSC = storyCards.find(sc => sc.title === `${plr} Talents`);

    // Format and display to sc 
    talentSC.entry = state.players[plr].talents.name.map((talent, index) => `${talent} (Lvl ${state.players[plr].talents.lvl[index]}) (${state.players[plr].talents.cost[index]} EP) (Keys: ${state.players[plr].talents.keys[index]})`).join("\n");

    // Trim notes on char limit to prevent memory overfill
    if (talentSC.description.length > 3000) {
      halfIndex = Math.floor(talentSC.description.length / 3);
      talentSC.description = talentSC.description.slice(0, halfIndex);

      log("Trimming talentSC description to prevent memory overload.");
    }
  });

  return true;
}

// To RETRIEVE talent from SC. Put in output script so retreiving is not limited to on input.
function retrieveTalentsFromSC() {
  state.playerList.forEach(plr => {

    // Fetch SC
    const talentSC = storyCards.find(sc => sc.title === `${plr} Talents`)

    // Hold the talent sc entry string
    temp = talentSC.entry;

    nameHolder = [];
    lvlHolder = [];
    costHolder = [];
    keysHolder = [];

    // Extract talent name lvl cost
    let matches = temp.matchAll(/(.+?)\s*\(.*?(\d+(?:\.\d+)?).*?\)\s*\(.*?(\d+(?:\.\d+)?).*?\)(?:\s*\(\s*(?:Keys:\s*)?([^)]+?)\s*\))?/g);

    // Store in respective arrays holders
    for (const match of matches) {
      // First capture group (talent name)
      nameHolder.push(match[1]);
      // Second capture group (talent lvl to number)
      lvlHolder.push(Number(match[2]));
      // Third, talent cost to number
      costHolder.push(Number(match[3]));
      // Fourth, talent keys
      if (match[4]) {
        keysHolder.push(match[4].trim() ?? "");
      }
      else {
        keysHolder.push(match[4] ?? "");
      }

    }

    // Finally store to code base
    state.players[plr].talents.name = nameHolder;
    state.players[plr].talents.lvl = lvlHolder;
    state.players[plr].talents.cost = costHolder;
    state.players[plr].talents.keys = keysHolder;

    //log("state.players[plr].talents.name : " + state.players[plr].talents.name);
    //log("state.players[plr].talents.lvl : " + state.players[plr].talents.lvl);
    //log("state.players[plr].talents.cost : " + state.players[plr].talents.cost);
    //log("state.players[plr].talents.keys : " + state.players[plr].talents.keys);


  });
}

// Weighs learning input tokens based on frequency to create and store new talents after set turns. NOTE: Talent learning happens on input and finishes after getting energy cost on output.
function talentLearningProcess(text) {
  newText = "";

  // Verify player is not dialoguing (case-insensitive)
  dialogueFlag = true;
  dialoguePhrases.forEach(phrase => {
    if (text.toLowerCase().includes(phrase.toLowerCase())) {
      // Disable check dialoguing exists
      dialogueFlag = false;
    }
  });

  if (dialogueFlag == true) {
    // Check which players are in the input and store their name and corresponding text
    result = separateByPlr(text);
    plrsDetected = Object.keys(result);
    plrText = {};

    // Store each player's text
    plrsDetected.forEach(plr => {
      if (result[plr].length > 0) {
        plrText[plr] = result[plr].join(" ").replace(/(?<!>)>(?!>)/g, "");
      }
      else {
        plrText[plr] = result[plr].join(" ");
      }
    });

    plrsDetected.forEach(plr => {
      startLearning = false;
      learningFlavorText = "";

      // Check input for learn words then split
      learnTextInput = [];
      learnTextInput = findTargetsThenSplit(plrText[plr], learnWords, true);
      log("learnTextInput: " + learnTextInput);

      // If there are learn words, then get their indices
      if (learnTextInput != null) {
        // Loop through each learn word and store their indices in an array
        allLearnWordIndices = [];
        allLearnWordIndices = indicesOfTargets(learnTextInput, learnWords);

        // If there are learn word indices, then see if there is "you + learn"
        if (allLearnWordIndices != null) {
          // Check if there is a "you" three words before each learn word index to unlock
          startLearning = checkYouBeforeIndicesArr(plr, learnTextInput, allLearnWordIndices, 3) || checkAndBeforeIndicesArr(learnTextInput, allLearnWordIndices, 2);
          log("allLearnWordIndices: " + allLearnWordIndices);
          log("startLearning: " + startLearning);
        }
      }

      // If you + learnword exist, unlock talent learning process
      if (startLearning) {
        // Must filter out likely nontalent words from learnTextInput
        filterArr = [...stopWords, ...learnWords, ...titleWords, ...youWords, ...selfWords, ...[plr, plr.toLowerCase()]];

        learnTextInput = [];
        learnTextInput = findTargetsThenSplit(plrText[plr], filterArr, true);

        learnTextInput = learnTextInput.filter(word => !filterArr.some(fromArr => (
          word.toLowerCase() === fromArr.toLowerCase())
          || (word.toLowerCase() === fromArr.toLowerCase() + "s")
          || (word.toLowerCase() === fromArr.toLowerCase() + "es")
        ));

        // Now you have an array of strings that could be talent names player is trying to learn
        likelyTalentNames = [];
        likelyTalentNames = learnTextInput;

        // If likelytalent names exist and isnt filtered to empty
        if (likelyTalentNames.length > 0) {
          // Remove duplicates so player cant spam learn talents in one input
          likelyTalentNames = [...new Set(likelyTalentNames)]
          log("likelyTalentNames: " + likelyTalentNames);

          // Table of values influencing amt of turns to learn talent/likelihood of filtered input being a talent
          state.points = {
            capitalization: 1.5,
            newTalent: 0,
            decay: 0.5,
            threshold: 2.5,
            outpaced: 2,
            existing: 1
          };

          // Loop through each likelytalentname for storage as potential talents or gives exp to existing potential talents.
          likelyTalentNames.forEach(likelyTalentNames => {
            // Either returns existing potential talent's index or returns its nonexistence
            let index = state.potentialTalents[plr].name.indexOf(likelyTalentNames);

            // New likly talent names are added to the potential talents list
            if (index === -1) {
              state.potentialTalents[plr].name.push(likelyTalentNames);

              // Capitalization grants more exp b/c more likely to be actual talent name
              if (isFirstLetterCapitalized(likelyTalentNames)) {
                state.potentialTalents[plr].exp.push(state.points.capitalization);
              }
              else {
                // Default exp for new talent names
                state.potentialTalents[plr].exp.push(state.points.newTalent);
              }

            }
            // Existing potential talents get exp
            else {
              state.potentialTalents[plr].exp[index] += state.points.existing;
            }
          });

          // Decrement unused talent names.
          for (let i = 0; i < state.potentialTalents[plr].name.length; i++) {
            // Exclude recently incremented talent names
            if (!likelyTalentNames.includes(state.potentialTalents[plr].name[i])) {
              state.potentialTalents[plr].exp[i] -= state.points.decay;
            }
          }

          // Remove decayed below zero talent names
          for (i = 0; i < state.potentialTalents[plr].name.length; i++) {
            if (state.potentialTalents[plr].exp[i] < 0) {
              state.potentialTalents[plr].name.splice(i, 1);
              state.potentialTalents[plr].exp.splice(i, 1);
              i--;
            }
          }

          // Log in skill sc, talent learning progress 
          const talentSC = storyCards.find(sc => sc.title === `${plr} Talents`)
          talentSC.description = `Log ${state.turnCount} | Currently Learning: ${state.potentialTalents[plr].name}, Weight: ${state.potentialTalents[plr].exp}\n` + talentSC.description;

          // Loop through the potentialtalents index to check for finished talents and put in a holder
          talentNameHolder = [];
          for (i = 0; i < state.potentialTalents[plr].name.length; i++) {
            // Set the exp threshold for potential talents to be learned
            if (state.potentialTalents[plr].exp[i] >= state.points.threshold) {
              // Store string(s) of talent name when threshold is hit
              talentNameHolder.push(state.potentialTalents[plr].name[i]);

              // Once threshold is hit, no longer a potential talent so erase
              state.potentialTalents[plr].name.splice(i, 1);
              state.potentialTalents[plr].exp.splice(i, 1);

              // Decrement to fix splice edits
              i--;
            }
          }

          // Full holder means final talent exists, dont push empty holder into player talent
          if (talentNameHolder.length > 0) {
            // Capitalize the talent, merge all individual string names in holder into the final talent name
            talentNameHolder = talentNameHolder.map(word => word[0].toUpperCase() + word.slice(1).toLowerCase());
            talentNameHolder = talentNameHolder.join(" ");
            log("talentNameHolder: " + talentNameHolder);

            // Store the learned talent, dont add duplicates to player talent
            if (!state.players[plr].talents.name.includes(talentNameHolder) && !state.players[plr].skills.name.includes(talentNameHolder)) {
              state.players[plr].talents.name.push(talentNameHolder);
              state.players[plr].talents.lvl.push(randomInt(0, 3));
              state.players[plr].talents.keys.push("");
              // Temp cost before getEnergy output hook
              state.players[plr].talents.cost.push(randomInt(5, 30));

              // Decrement all potentialTalents exp since a talent was learned
              for (i = 0; i < state.potentialTalents[plr].name.length; i++) {
                state.potentialTalents[plr].exp[i] -= state.points.outpaced;
              }

              // Energy cost determined by AI output, unlock on output function
              state.askEnergyCost[plr] = true;
              log("state.askEnergyCost[plr]: " + state.askEnergyCost[plr]);

              // Talent Learn Success Message
              learningFlavorText = learningFlavorText + toCoOpLang(plr, " You end up successfully learning the \"") + String(talentNameHolder) + "\" talent! ";

              if (!onePlayerFlagger()) {
                learningFlavorText = learningFlavorText + toCoOpLang(plr, "You check how many energy points the talent requires.");
                log("state.players[plr].talents.name after learning: " + state.players[plr].talents.name);
              }
            }//end of store learned talent
          }//end of final talent exists
        } //end of if likelytalent names exist

      }//end of right conditions met so process talent learning

      //log("state.potentialTalents[plr].name: " + state.potentialTalents[plr].name);
      //log("state.potentialTalents[plr].exp: " + state.potentialTalents[plr].exp);

    });
  }

  storeTalentsToSC();

  if (!newText == "") {
    return newText;
  }
  else {
    return text;
  }
}//end of function


// Succeeds talentLearningProcess. Gets energy cost from Output Hook and then stores learned talent and cost into sc.
function getNewTalentEP(text) {
  state.playerList.forEach(plr => {
    if (state.askEnergyCost[plr] == true) {
      // Extract numbers from the output string to arr
      let numbers = text.match(/\d+/g);
      log("numbers: " + numbers);

      // Convert to numbers to number type
      let arrEnergyValue = numbers ? numbers.map(Number) : [];

      // Filter out 100 for x/100 AI outputs
      if (arrEnergyValue.length > 1) {
        arrEnergyValue = arrEnergyValue.filter(value => value != 100);
      }
      log("arrEnergyValue: " + arrEnergyValue);

      // Find the highest number
      highestEnergyValue = arrEnergyValue.length > 0 ? Math.max(...arrEnergyValue) : null;
      log("highestEnergyValue: " + highestEnergyValue);

      // Use highest number in output as energy cost of talent
      if (highestEnergyValue !== null && highestEnergyValue > 0 && onePlayerFlagger()) {
        state.players[plr].talents.cost[state.players[plr].talents.cost.length - 1] = highestEnergyValue;
        log("state.players[plr].talents.cost(AI) after learning: " + state.players[plr].talents.cost);
      }
      else {
        // If no energy value in output, use random energy value
        randEpCost = randomInt(5, 50 + (state.players[plr].stats.lvl * 0.1));
        state.players[plr].talents.cost[state.players[plr].talents.cost.length - 1] = randEpCost;
        log("randEpCost: " + randEpCost);

        text = "\"" + state.players[plr].talents.name[state.players[plr].talents.name.length - 1] + "\" will cost " + state.players[plr].talents.cost[state.players[plr].talents.cost.length - 1] + " energy to use. " + text;
      }

      // Learning grants intl
      statUp(plr, "intl", randomFloat(0.01, 3));

      state.askEnergyCost[plr] = false;
      log("state.askEnergyCost[plr] after learned: " + state.askEnergyCost[plr]);
    }
  });

  // Learned talent name and cost have been finalized. Store them to SC.
  storeTalentsToSC();
  storeStatsToSC();

  return text;
}

// Applies a name upgrade to a talent once level floor is reached
function talentNameUpgrade(plr, level, talentIndex, tierWordArr, text) {
  if (Math.floor(state.players[plr].talents.lvl[talentIndex]) == level) {
    // Increase level to prevent repeated upgrades
    state.players[plr].talents.lvl[talentIndex] = level + 1;

    // Energy cost reduction (if applicable)
    state.players[plr].talents.cost[talentIndex] = Math.round(state.players[plr].talents.cost[talentIndex] * 0.95 * 100) / 100;

    // Store old talent name
    const oldTalentName = state.players[plr].talents.name[talentIndex];

    // Apply prefix logic
    if (tierWordArr === upgradeTier1) {
      // No previous prefix assumed
      state.players[plr].talents.name[talentIndex] = tierWordArr[randomInt(0, tierWordArr.length - 1)] + ' ' + oldTalentName;
    } else {
      // Remove previous prefix (assumes format: "Prefix TalentName")
      const words = oldTalentName.split(' ');
      const baseName = words.length > 1 ? words.slice(1).join(' ') : oldTalentName;

      // Apply new prefix
      const newPrefix = tierWordArr[randomInt(0, tierWordArr.length - 1)];
      state.players[plr].talents.name[talentIndex] = `${newPrefix} ${baseName}`;
    }

    // Notify player
    text += toCoOpLang(plr, ` Your ${oldTalentName} talent has been upgraded to ${state.players[plr].talents.name[talentIndex]}!`);

    return text;
  }

  return text;
}

function upgradePlayerTalents(text) {

  state.playerList.forEach(plr => {

    state.players[plr].talents.name.forEach((talent, index) => {
      text = talentNameUpgrade(plr, 10, index, upgradeTier1, text);
      text = talentNameUpgrade(plr, 20, index, upgradeTier2, text);
      text = talentNameUpgrade(plr, 30, index, upgradeTier3, text);
      text = talentNameUpgrade(plr, 40, index, upgradeTier4, text);
      text = talentNameUpgrade(plr, 50, index, upgradeTier5, text);
    });

  });

  storeTalentsToSC();

  return text;
}

///////////////////////////////////////////////////////////////////////////////////

/// Player skills will be stored in an sc. CREATE initial sc. Skills will STORE TO or RETREIVE FROM sc.

// Function to create new class skills for player and store to their skills
function createClassSkills(plr, numOfSkills, wipeOldSkills) {
  classString = state.players[plr].class_;
  createdHolder = [];

  if (classString && classSkillParts[classString]) {
    // Wipe old skills if flag is set
    if (wipeOldSkills) {
      state.players[plr].skills.name = [];
      state.players[plr].skills.lvl = [];
      state.players[plr].skills.cost = [];
    }

    // Make starting skills
    for (let i = 0; i < numOfSkills; i++) {
      // Pick two different random skill parts to combine
      let part1, part2;
      do {
        part1 = classSkillParts[classString][randomInt(0, classSkillParts[classString].length - 1)];
        part2 = classSkillParts[classString][randomInt(0, classSkillParts[classString].length - 1)];
      } while (part1 === part2);

      const createdSkill = `${part1} ${part2}`;

      createdHolder.push(createdSkill);
      state.players[plr].skills.name.push(createdSkill);
      state.players[plr].skills.lvl.push(randomInt(0, 9));
      state.players[plr].skills.cost.push(randomInt(10, 40));
    }
  }

  // Return string of created skills
  if (createdHolder.length > 0) {
    createdHolder = createdHolder.join(", ");
  }

  return createdHolder;
}

// Always CREATE initial sc if none.
function createIfNoSkillSC() {
  createFlag = false;

  state.playerList.forEach(plr => {
    //If "Player Skills" card doesn't exist, create it
    if (!storyCards.find(sc => sc.title === `${plr} Skills`)) {
      addStoryCard(`${plr} Skills`, "Blank", `Player Stats`);
      createFlag = true;

      // Fetch SC and give it a description
      const skillSC = storyCards.find(sc => sc.title === `${plr} Skills`)
      skillSC.description = "Format for Modifying: SkillName (LVL) (MP), etc.";

      // Get player class and create the skills they start with
      createClassSkills(plr, 3, true);
    }
  });

  if (createFlag) {
    storeSkillsToSC();
  }
}

//To STORE skill to sc
function storeSkillsToSC() {
  state.playerList.forEach(plr => {
    // Fetch skill sc
    const skillSC = storyCards.find(sc => sc.title === `${plr} Skills`)

    // Format and display to sc Ex: Fireball (20 MP)
    skillSC.entry = state.players[plr].skills.name.map((skill, index) => `${skill} (Lvl ${state.players[plr].skills.lvl[index]}) (${state.players[plr].skills.cost[index]} MP)`).join("\n");

    // Trim notes on char limit to prevent memory overfill
    if (skillSC.description.length > 3000) {
      halfIndex = Math.floor(skillSC.description.length / 3);
      skillSC.description = skillSC.description.slice(0, halfIndex);

      log("Trimming skillSC description to prevent memory overload.");
    }
  });
}

// To RETRIEVE skills from SC. Put in output script so retreiving is not limited to on input.
function retrieveSkillsFromSC() {
  state.playerList.forEach(plr => {
    //Fetch skill sc
    const skillSC = storyCards.find(sc => sc.title === `${plr} Skills`)

    //Hold the skill sc entry string
    temp = skillSC.entry;


    skillHolder = [];
    lvlHolder = [];
    costHolder = [];
    // Extract skill name and MP cost using regex. Discard wrong formats
    let matches = temp.matchAll(/(.+?)\s*\(.*?(\d+(?:\.\d+)?).*?\)\s*\(.*?(\d+(?:\.\d+)?).*?\)/g);

    // Store in respective arrays holders
    for (const match of matches) {
      // First capture group (skill name)
      skillHolder.push(match[1]);
      // Second capture group (skill lvl)
      lvlHolder.push(Number(match[2]));
      // Third (skill cost)
      costHolder.push(Number(match[3]))
    }

    //Final store to code base
    state.players[plr].skills.name = skillHolder;
    state.players[plr].skills.lvl = lvlHolder;
    state.players[plr].skills.cost = costHolder;

    //log("state.players[plr].skills.name: " + state.players[plr].skills.name);
    //log("state.players[plr].skills.lvl: " + state.players[plr].skills.lvl);
    //log("state.players[plr].skills.cost: " + state.players[plr].skills.cost);
  });
}

// Part of upgradePlayerSkills, applies skill name change once lvlfloor is reached
function skillNameUpgrade(plr, level, skillIndex, tierWordArr, text) {
  if (Math.floor(state.players[plr].skills.lvl[skillIndex]) == level) {
    //Level up skill to avoid another upgrade
    state.players[plr].skills.lvl[skillIndex] = level + 1;

    //Mana cost reduction
    state.players[plr].skills.cost[skillIndex] = Math.round(state.players[plr].skills.cost[skillIndex] * 0.95 * 100) / 100;

    //store old skill name
    oldSkillName = state.players[plr].skills.name[skillIndex];

    //Update skill name
    if (tierWordArr == upgradeTier1) {
      state.players[plr].skills.name[skillIndex] = tierWordArr[randomInt(0, tierWordArr.length - 1)] + ' ' + state.players[plr].skills.name[skillIndex];
    }
    // already upgraded skills get their old prefixes removed
    else {
      // Sanitize old upgraded skill name (remove existing prefix if present)
      words = oldSkillName.split(' ');
      baseName = words.length > 1 ? words.slice(1).join(' ') : oldSkillName;

      // Apply new prefix
      newPrefix = tierWordArr[randomInt(0, tierWordArr.length - 1)];
      state.players[plr].skills.name[skillIndex] = `${newPrefix} ${baseName}`;
    }

    // Notify in player input
    text = text + toCoOpLang(plr, ` Your ${oldSkillName} skill has been upgraded to ${state.players[plr].skills.name[skillIndex]}!`);

    return text;
  }

  return text;
}


function upgradePlayerSkills(text) {
  state.playerList.forEach(plr => {

    state.players[plr].skills.name.forEach((skill, index) => {
      text = skillNameUpgrade(plr, 10, index, upgradeTier1, text);
      text = skillNameUpgrade(plr, 20, index, upgradeTier2, text);
      text = skillNameUpgrade(plr, 30, index, upgradeTier3, text);
      text = skillNameUpgrade(plr, 40, index, upgradeTier4, text);
      text = skillNameUpgrade(plr, 50, index, upgradeTier5, text);

    })

  });

  storeSkillsToSC();

  return text;
}

// Rewards a skill to plr every set level
function rewardSkillForLevelUp(text) {
  skillRewardText = "";
  // How many levels needed to get a new skill
  lvlReqForSkillReward = 5;

  state.playerList.forEach(plr => {
    plrLvl = state.players[plr].stats.maxLvl;

    // Initialize old lvl tracker
    if (!state.oldLvlHolder[plr]) {
      state.oldLvlHolder[plr] = plrLvl || 1;
    }

    // Hold player's old lvl until they meet the lvl req for a new skill
    if (state.oldLvlHolder[plr] && plrLvl) {
      lvlsAbove = plrLvl - state.oldLvlHolder[plr];
      log("lvlsAbove: " + lvlsAbove);
      log("plrLvl: " + plrLvl);
      log("state.oldLvlHolder[plr]: " + state.oldLvlHolder[plr]);

      // Player has met the lvl req for new skill
      if (lvlsAbove >= lvlReqForSkillReward) {
        // Increment num of skill rewards according to num of times lvl req is fulfilled
        numSkillReward = Math.floor(lvlsAbove / lvlReqForSkillReward);
        log("numSkillReward: " + numSkillReward);

        // Update old lvl tracker to new lvl minus remainder. Tracker must follow lvl req intervals
        trackCorrection = lvlsAbove % lvlReqForSkillReward
        state.oldLvlHolder[plr] = plrLvl - trackCorrection;


        learnedSkills = createClassSkills(plr, numSkillReward, false);

        skillRewardText += toCoOpLang(plr, ` ${skillAcquisitionPhrases[randomInt(0, skillAcquisitionPhrases.length - 1)].replace("[Skill]", learnedSkills)}`);
      }

      // If player has edited their lvl to below tracked lvl, update tracked lvl
      if (plrLvl < state.oldLvlHolder[plr]) {
        state.oldLvlHolder[plr] = plrLvl;
      }

    }
  });

  storeSkillsToSC();

  return text + skillRewardText;
}

/////////////////////////////////////////////////////////////////////////////////////

// Converts talents that are casted into a skill by detecting if closest action word of talent is a cast word
function talentCastedToSkill(plr, wordsArr, talentIndex, actionWordIndices) {
  // Ensure talent exists in case player turns same talent to skill multiple times
  if (state.players[plr].talents.name[talentIndex]) {
    // Get index of talent from input
    let i_talentInput = indexOfStr(state.players[plr].talents.name[talentIndex], wordsArr);
    //log('i_talentInput: ' + i_talentInput);

    // After get index check if closest action word is a cast word
    if (i_talentInput >= 0) {
      let closestIndex = closestIndexBeforeTarget(actionWordIndices, i_talentInput);
      //log('closestIndex: ' + closestIndex);

      // Turn talent to skill if closest action word is a cast word
      if (castWords.includes(wordsArr[closestIndex].toLowerCase())) {
        state.players[plr].skills.name.push(state.players[plr].talents.name[talentIndex]);
        state.players[plr].skills.lvl.push(state.players[plr].talents.lvl[talentIndex]);
        state.players[plr].skills.cost.push(state.players[plr].talents.cost[talentIndex]);

        state.players[plr].talents.name.splice(talentIndex, 1);
        state.players[plr].talents.lvl.splice(talentIndex, 1);
        state.players[plr].talents.cost.splice(talentIndex, 1);
        state.players[plr].talents.keys.splice(talentIndex, 1);



        storeTalentsToSC();
        storeSkillsToSC();
      }
    }
  }
}


// Creates a partial or full talent use flavor text
function executeTalent(plr, fullTalentFlag, index) {
  talentFlavorText = "";

  // Ensure talent exists
  if (state.players[plr].talents.name[index]) {

    energyCost = state.players[plr].talents.cost[index];

    // Subtract ep cost from player ep
    statUp(plr, "ep", -1 * energyCost);
    storeStatsToSC();

    // Using talents boost stats
    statUp(plr, "intl", randomFloat(0.01, 2));
    storeStatsToSC();

    // Override normal skill text if healing skill
    healResult = detectHeal(plr, "talent", index);
    if (healResult[0]) {
      talentFlavorText = ` ${healResult[1]}`;
    }
    else {
      // Create flavor text if FULL talent
      if (fullTalentFlag) {
        // Define the ranges of talent effectiveness and the corresponding talent power messages
        const talentPowerRanges = [
          { min: 0, max: 10, msg: talentPower1 },
          { min: 10, max: 20, msg: talentPower2 },
          { min: 20, max: 30, msg: talentPower3 },
          { min: 30, max: 40, msg: talentPower4 },
          { min: 40, max: 50, msg: talentPower5 },
          { min: 50, max: 60, msg: talentPower6 },
          { min: 60, max: 70, msg: talentPower7 },
          { min: 70, max: 80, msg: talentPower8 },
          { min: 80, max: 90, msg: talentPower9 },
          { min: 90, max: Infinity, msg: talentPower10 }
        ];

        // Create talent flavor text
        talentLevel = state.players[plr].talents.lvl[index];

        for (let range of talentPowerRanges) {
          if (talentLevel >= range.min && talentLevel < range.max) {
            talentFlavorText = ` ${range.msg[randomInt(0, range.msg.length - 1)].replace("[Talent]", state.players[plr].talents.name[index])}`;
            break;
          }
        }
      }
      // Create flavor text for PARTIAL talent
      else {
        talentFlavorText = ` You attempt to harness your existing ${state.players[plr].talents.name[index]} talent.`
      }
    }

    // Save current as old talent lvl for logging
    oldTalentLvl = state.players[plr].talents.lvl[index];

    // Using talents grants talent exp
    talentExp = randomFloat(0, 0.8);
    log("talentExp: " + talentExp);

    // Increase the talent's level by the generated experience
    state.players[plr].talents.lvl[index] += talentExp;

    // Round the talent level to two decimal places
    state.players[plr].talents.lvl[index] = Math.round(state.players[plr].talents.lvl[index] * 100) / 100;

    // Log talent lvl change in talent sc notes
    const talentSC = storyCards.find(sc => sc.title === `${plr} Talents`);
    talentSC.description = `Log ${state.turnCount} | ${state.players[plr].talents.name[index]} gained ${talentExp.toFixed(2)} lvl. Lvl ${oldTalentLvl} => ${state.players[plr].talents.lvl[index]}\n` + talentSC.description;

    // Save the updated talent data to the storage container
    storeTalentsToSC();

  }

  return talentFlavorText;
}

// Creates a partial or full skill use flavor text
function executeskill(plr, fullSkillFlag, index) {
  skillFlavorText = "";
  manaCost = state.players[plr].skills.cost[index];

  // Subtract mana cost from player mana
  statUp(plr, "mp", manaCost * -1);

  // Override normal skill text if healing skill
  healResult = detectHeal(plr, "skill", index);
  if (healResult[0]) {
    skillFlavorText = ` ${healResult[1]}`;
  }
  else {
    // Using skills boost stats
    statUp(plr, "atk", randomFloat(0.01, 2));
    statUp(plr, "intl", randomFloat(0.01, 2));
    storeStatsToSC();

    // Create flavor text if FULL SKILL
    if (fullSkillFlag) {
      // Define the ranges of skill effectiveness and the corresponding skill power messages
      const skillPowerRanges = [
        { min: 0, max: 10, msg: skillPower1 },
        { min: 10, max: 20, msg: skillPower2 },
        { min: 20, max: 30, msg: skillPower3 },
        { min: 30, max: 40, msg: skillPower4 },
        { min: 40, max: 50, msg: skillPower5 },
        { min: 50, max: 60, msg: skillPower6 },
        { min: 60, max: 70, msg: skillPower7 },
        { min: 70, max: 80, msg: skillPower8 },
        { min: 80, max: 90, msg: skillPower9 },
        { min: 90, max: Infinity, msg: skillPower10 }
      ];

      // Create skill flavor text
      skillLevel = state.players[plr].skills.lvl[index];

      for (let range of skillPowerRanges) {
        if (skillLevel >= range.min && skillLevel < range.max) {
          skillFlavorText = ` ${range.msg[randomInt(0, range.msg.length - 1)].replace("[Skill]", state.players[plr].skills.name[index])}`;
          break;
        }
      }
    }
    // Create flavor text if PARTIAL SKILL
    else {
      // Create skill harness flavor text
      const randomIndex = randomInt(0, harnessSkill.length - 1);
      skillFlavorText = ` ${harnessSkill[randomIndex].replace("[Skill]", state.players[plr].skills.name[index])}`;
    }
  }

  // Save current as old skill lvl for logging
  oldSkillLvl = state.players[plr].skills.lvl[index];

  // Using skills grants skill exp
  skillExp = randomFloat(0, 0.8);
  log("skillExp: " + skillExp);

  // Increase the skill's level by the generated experience
  state.players[plr].skills.lvl[index] += skillExp;

  // Round the skill level to two decimal places
  state.players[plr].skills.lvl[index] = Math.round(state.players[plr].skills.lvl[index] * 100) / 100;

  // Log skill lvl change in skill sc notes
  const skillSC = storyCards.find(sc => sc.title === `${plr} Skills`)
  skillSC.description = `Log ${state.turnCount} | ${state.players[plr].skills.name[index]} gained ${skillExp.toFixed(2)} lvl. Lvl ${oldSkillLvl} => ${state.players[plr].skills.lvl[index]}\n` + skillSC.description;


  // Save the updated skill data to the storage container
  storeSkillsToSC();


  return skillFlavorText;
}

// Detects if the player is performing a heal action and executes the healing process then returns healflag and flavor text
function detectHeal(plr, strgType, index) {
  healFlavorText = "";
  healFlag = false;
  healingSelf = false;

  // Check if the player is performing a healing action. Use text b/c inp targetwords were simplified
  healing = cleanStringCheckForTargets(healingWords, text);
  log("healing: " + healing);

  // Check if the player is attempting to heal themselves
  healingSelf = cleanStringCheckForTargets(selfWords, text);
  log("healingSelf: " + healingSelf);

  // If both a healing action and self-healing are detected, proceed with healing
  if (healing && healingSelf) {
    // Set heal flag to true
    healFlag = true;

    // Healing self with item
    if (strgType == "item") {
      //todo: item heal
    }
    // Healing self with talent
    if (strgType == "talent") {
      // Heal amount scales with talent level and intl
      healAmt = (0.1 * state.players[plr].stats.intl) + (2 * state.players[plr].talents.lvl[index]);
      log('healAmt: ' + healAmt);

      // Apply heal to stats
      statUp(plr, "hp", healAmt);

      healFlavorText = healFlavorText + " Your talent recovers some health."
      //todo: edit text
    }
    // Heal self with skill
    if (strgType == "skill") {
      // Heal amt scales with skill level and intl
      healAmt = (0.25 * state.players[plr].stats.intl) + (2 * state.players[plr].skills.lvl[index]);
      log('healAmt: ' + healAmt);

      // Apply heal to stats
      statUp(plr, "hp", healAmt);
      statUp(plr, "mp", healAmt);
      statUp(plr, "ep", healAmt);

      healFlavorText = healFlavorText + " Your skill recovers some health."
    }

  }
  return [healFlag, healFlavorText];
}

// Child function of detectStorageCallActions. On context hook, feed the things in player's storage to the AI context
function feedStrgToContext(text) {
  if (state.unlockStrgToContext) {
    text = text + state.strgCheckText;
    //log("state.strgCheckText: " + state.strgCheckText);

    state.strgCheckText = "";
  }

  state.unlockStrgToContext = false;

  return text;
}

// Translate number level to english tier
function getTier(number) {
  toTier = Math.floor(number / 10);

  if (toTier < intensityTier.length) {
    return intensityTier[toTier];
  }
  if (number < 0) {
    return `Negative level`
  }
  else {
    return intensityTier[10];
  }
}

function getCapacityTier(part, whole) {
  toTier = Math.floor((part / whole * 100) / 10);

  if (toTier < capacityTier.length) {
    return capacityTier[toTier];
  }
  if (number < 0) {
    return `Below Empty`
  }
  else {
    return capacityTier[10];
  }
}

// Checks for "you + actions" that require items, talents, or skills. Checks if player has something to fulfill it and executes result along with text result
function detectStorageCallActions(text) {
  newText = "";

  // Verify player is not dialoguing (case-insensitive)
  dialogueFlag = true;
  dialoguePhrases.forEach(phrase => {
    if (text.toLowerCase().includes(phrase.toLowerCase())) {
      // Disable check dialoguing exists
      dialogueFlag = false;
    }
  });

  if (dialogueFlag) {
    // Check which players are in the input and store their name and corresponding text
    result = separateByPlr(text);
    plrsDetected = Object.keys(result);
    plrText = {};

    // Store each player's text
    plrsDetected.forEach(plr => {
      if (result[plr].length > 0) {
        plrText[plr] = result[plr].join(" ").replace(/(?<!>)>(?!>)/g, "");
      }
      else {
        plrText[plr] = result[plr].join(" ");
      }
    });

    plrsDetected.forEach(plr => {
      startAction = false;
      actionFlavorText = "";
      actionTextInput = [];

      // Get talent keys to store as action words
      allTalentKeys = [];
      state.players[plr].talents.keys.forEach((keys, index) => {
        if (keys.length > 2) {
          keys = keys.split(",");
          keys.forEach(key => {
            allTalentKeys.push(key.trim().toLowerCase());
          });
        }
      });
      log('allTalentKeys: ' + allTalentKeys);

      // Check input for action words and split the input
      allActionWords = [...castWords, ...talentWords, ...healingWords, ...allTalentKeys];
      actionTextInput = findTargetsThenSplit(plrText[plr], allActionWords, true);
      log("actionTextInput simplified: " + actionTextInput);

      if (actionTextInput != null) {
        // Simplify action words for each action type cumulatively and split input 
        cumulText = plrText[plr];

        actionTextInput = findTargetsThenSplit(cumulText, castWords, true);
        cumulText = (actionTextInput.length > 0) ? actionTextInput.join(" ") : cumulText;

        actionTextInput = findTargetsThenSplit(cumulText, talentWords, true);
        cumulText = (actionTextInput.length > 0) ? actionTextInput.join(" ") : cumulText;

        actionTextInput = findTargetsThenSplit(cumulText, healingWords, true);
        cumulText = (actionTextInput.length > 0) ? actionTextInput.join(" ") : cumulText;

        actionTextInput = findTargetsThenSplit(cumulText, allTalentKeys, true);
        cumulText = (actionTextInput.length > 0) ? actionTextInput.join(" ") : cumulText;

        actionTextInput = cumulText.trim().split(" ");
        log("actionTextInput simplified: " + actionTextInput);

        // If input has action words get their indices
        allActionWordIndices = [];
        allActionWordIndices = indicesOfTargets(actionTextInput, allActionWords);
        log("allActionWordIndices:" + allActionWordIndices);

        // Detect if there is  "you/and + actionword" 
        if (allActionWordIndices != null) {
          startAction = checkYouBeforeIndicesArr(plr, actionTextInput, allActionWordIndices, 3) || checkAndBeforeIndicesArr(actionTextInput, allActionWordIndices, 2);
          log("startAction: " + startAction);
        }
      }

      if (startAction) {
        // Intialize storage copies
        plrStorage = {
          types: [state.players[plr].inv.item, state.players[plr].talents.name, state.players[plr].skills.name],
          lvls: [null, state.players[plr].talents.lvl, state.players[plr].skills.lvl],
          costs: [state.players[plr].inv.amt, state.players[plr].talents.cost, state.players[plr].skills.cost]
        };

        plrThings = {
          // 0 is item, 1 is talent, 2 is skill
          types: [],
          // index of thing in storage
          indices: [],
          // True for full match, false for partial match
          fullMatchFlags: []
        };

        calls = {
          types: [],
          indices: [],
          fullMatchFlags: []
        };

        // For each input word
        for (let i = 0; i < actionTextInput.length; i++) {
          // Loop through each type of storage
          for (let x = 0; x < plrStorage.types.length; x++) {
            // Find all things in the storage that the word can call
            plrStorage.types[x].forEach((thing, ind) => {
              // Initialize flags
              isFullMatch = true;
              isPartialMatch = false;

              // Split to parts for multi worded things (case insensitive)
              thingParts = thing.toLowerCase().split(" ");

              // Check if current thing in current storage is a PARTIAL match of current word (complete/prefix match)
              if (
                !stopWords.includes(actionTextInput[i]) &&
                (
                  thingParts[0] == actionTextInput[i] ||
                  (actionTextInput[i].length >= 4 && thingParts[0].startsWith(actionTextInput[i].toLowerCase()))
                )
              ) {
                isPartialMatch = true;
              }
              // Prevent matching things past input length. -1 to account for thingParts matching current index
              if (i + thingParts.length - 1 > actionTextInput.length - 1) {
                isFullMatch = false;
              }
              else {
                // Check if current thing in current storage is a FULL match of current word 
                for (j = 0; j < thingParts.length; j++) {
                  if (thingParts[j] !== actionTextInput[i + j].toLowerCase()) {
                    isFullMatch = false;
                    break;
                  }
                }
              }

              // If current thing is a FULL match (override partial match), push its type, its storage index, and full match flag into a respective array
              if (isFullMatch) {
                plrThings.types.push(x);
                plrThings.indices.push(ind);
                plrThings.fullMatchFlags.push(true);

                // Move input index forward by matched thing length to avoid duplicate matching. -1 to accomodate loop increment.
                i = i + thingParts.length - 1;
              }
              // If current thing is a PARTIAL match, push its type, its storage index, and full match flag into a respective array
              else if (isPartialMatch) {
                plrThings.types.push(x);
                plrThings.indices.push(ind);
                plrThings.fullMatchFlags.push(false);
              }

            }); //end of for thing
          } //end of for playerstorage

          // If any talent keys are matched, push respective talent thing
          state.players[plr].talents.keys.forEach((keys, index) => {
            if (keys.includes(actionTextInput[i])) {
              plrThings.types.push(1);
              plrThings.indices.push(index);
              plrThings.fullMatchFlags.push(true);
            }
          });

          // After looping through all things and storages for the current word, push array of matched things into calls. A call is an array of matched things found for a word.
          if (plrThings.types.length > 0) {
            calls.types.push(plrThings.types);
            calls.indices.push(plrThings.indices);
            calls.fullMatchFlags.push(plrThings.fullMatchFlags);

            // Reset arrays for the next word call
            plrThings.types = [];
            plrThings.indices = [];
            plrThings.fullMatchFlags = [];
          }

        } //end of for input
        for (i = 0; i < calls.types.length; i++) {
          log('calls.types: ' + calls.types[i]);
          log('calls.indices: ' + calls.indices[i]);
          log('calls.fullMatchFlags: ' + calls.fullMatchFlags[i]);
          log("----------------");
        }

        // Case A: If NO matches found, feed storages to AI context for AI to write rejection and send flavor text to output
        if (calls.types.length === 0) {
          // Get mp and ep penalty for action fail. Ensure deduction does not turn stat negative
          penalty = 15;
          if (state.players[plr].stats.mp < penalty) {
            penalty = state.players[plr].stats.mp;
          }
          statUp(plr, "mp", -1 * randomFloat(0.01, penalty));

          if (state.players[plr].stats.ep < penalty) {
            penalty = state.players[plr].stats.ep;
          }
          statUp(plr, "ep", -1 * randomFloat(0.01, penalty));

          // Unlock Context Hook feed to influence AI to reject 
          allItems = [];
          allTalents = [];
          allSkills = [];

          // Get all plr items
          state.players[plr].inv.item.forEach((itm, index) => {
            allItems.push(`${state.players[plr].inv.amt[index]} ${state.players[plr].inv.item[index]}`);
          })
          if (allItems.length == 0) {
            allItems.push("nothing");
          }
          allItems = allItems.join(", ");

          // Get all plr talents
          state.players[plr].talents.name.forEach((itm, index) => {
            talentTier = getTier(state.players[plr].talents.lvl[index]);
            allTalents.push(`${talentTier} ${state.players[plr].talents.name[index]}`);
          })
          if (allTalents.length == 0) {
            allTalents.push("nothing");
          }
          allTalents = allTalents.join(", ");

          // Get all plr skills
          state.players[plr].skills.name.forEach((itm, index) => {
            skillTier = getTier(state.players[plr].skills.lvl[index]);
            allSkills.push(`${skillTier} ${state.players[plr].skills.name[index]}`);
          })
          if (allSkills.length == 0) {
            allSkills.push("nothing");
          }
          allSkills = allSkills.join(", ");

          if (!onePlayerFlagger()) {
            state.strgCheckText = state.strgCheckText + ` ${plr} realizes they have nothing in their inventory but only ${allItems}. ${plr} realizes they have no applicable talents but only ${allTalents}. ${plr} realize they have no applicable skills but only ${allSkills}. ${plr} anticipates failure for not having the right item, skill, or talent to use right now. `;
          }
          else {
            state.strgCheckText = ` You realize you have nothing in your inventory but only ${allItems}. You realize you have no applicable talents but only ${allTalents}. You realize you have no applicable skills but only ${allSkills}. You anticipate failure for not having the right item, skill, or talent to use right now.`
          }

          state.unlockStrgToContext = true;
          log("state.unlockStrgToContext: " + state.unlockStrgToContext);
        }
        // Case B: Things HAVE been matched
        if (calls.types.length > 0) {
          // For each word call (array of matched things)
          calls.types.forEach((wordCall, i_currentCall) => {
            final = {
              fullTypes: [],
              fullIndices: [],
              partialTypes: [],
              partialIndices: [],
            };

            notEnough = {
              fullTypes: [],
              fullIndices: [],
              partialTypes: [],
              partialIndices: [],
            };

            statPassFlags = [];

            // For current word call, for each matched thing, perform and store a stat check
            wordCall.forEach((typeOfTheThing, i_currentThing) => {
              // is an ITEM
              if (typeOfTheThing == 0) {
                itemIndex = calls.indices[i_currentCall][i_currentThing];

                //todo: fix
                statPassFlags.push(true);
              }
              // is a TALENT, store index of current thing in current call
              if (typeOfTheThing == 1) {
                talentIndex = calls.indices[i_currentCall][i_currentThing];

                // Checks if player will have enough ep for the talent
                if (state.players[plr].stats.ep < state.players[plr].talents.cost[talentIndex]) {
                  statPassFlags.push(false);
                }
                else {
                  statPassFlags.push(true);
                }
              }
              // is a SKILL 
              if (typeOfTheThing == 2) {
                skillIndex = calls.indices[i_currentCall][i_currentThing];

                // Checks if player will have enough mp for the skill
                if (state.players[plr].stats.mp < state.players[plr].skills.cost[skillIndex]) {
                  statPassFlags.push(false);
                }
                else {
                  statPassFlags.push(true);
                }
              }
            });
            log('statPassFlags: ' + statPassFlags);

            // For the current word call, for each thing, store things that pass stat req. as final matches
            statPassFlags.forEach((thingPassesReq, i_currentMatch) => {
              // If player HAS the stat requirement
              if (thingPassesReq) {
                // If FULL match, store as final matches
                if (calls.fullMatchFlags[i_currentCall][i_currentMatch]) {
                  final.fullTypes.push(calls.types[i_currentCall][i_currentMatch]);
                  final.fullIndices.push(calls.indices[i_currentCall][i_currentMatch]);
                }
                // If PARTIAL match, store as final matches
                if (!calls.fullMatchFlags[i_currentCall][i_currentMatch]) {
                  final.partialTypes.push(calls.types[i_currentCall][i_currentMatch]);
                  final.partialIndices.push(calls.indices[i_currentCall][i_currentMatch]);
                }
              }
              // If player does NOT have the stat requirements
              else {
                // FULL matches that fail the stat req
                if (calls.fullMatchFlags[i_currentCall][i_currentMatch]) {
                  notEnough.fullTypes.push(calls.types[i_currentCall][i_currentMatch]);
                  notEnough.fullIndices.push(calls.indices[i_currentCall][i_currentMatch]);
                }
                // PARTIAL matches that fail the stat req
                if (!calls.fullMatchFlags[i_currentCall][i_currentMatch]) {
                  notEnough.partialTypes.push(calls.types[i_currentCall][i_currentMatch]);
                  notEnough.partialIndices.push(calls.indices[i_currentCall][i_currentMatch]);
                }
              }
            });
            log('final.fullTypes: ' + final.fullTypes);
            log('final.fullIndices: ' + final.fullIndices);
            log('final.partialTypes: ' + final.partialTypes);
            log('final.partialIndices: ' + final.partialIndices);
            log('notEnough.fullTypes: ' + notEnough.fullTypes);
            log('notEnough.fullIndices: ' + notEnough.fullIndices);
            log('notEnough.partialTypes: ' + notEnough.partialTypes);
            log('notEnough.partialIndices: ' + notEnough.partialIndices);
            log("----------------");

            // Case 1: If player has final FULL thing, execute random one if more than one. Partials are overriden due to exact match found.
            if (final.fullIndices.length > 0) {
              // Get random thing
              randomed = randomInt(0, final.fullIndices.length - 1)
              index = final.fullIndices[randomed];
              type = final.fullTypes[randomed];

              // Final is a FULL TALENT
              if (type == 1) {
                actionFlavorText = actionFlavorText + executeTalent(plr, true, index);
                talentCastedToSkill(plr, actionTextInput, index, allActionWordIndices);
              }
              // Final is a FULL SKILL
              else if (type == 2) {
                actionFlavorText = actionFlavorText + executeskill(plr, true, index);
              }

            }
            // Case 2: If player has only final PARTIAL thing, execute random one if more than one.
            else if (final.partialIndices.length > 0) {
              // Get random thing
              randomed = randomInt(0, final.partialIndices.length - 1);
              index = final.partialIndices[randomed];
              type = final.partialTypes[randomed];

              // Final is a PARTIAL TALENT
              if (type == 1) {
                actionFlavorText = actionFlavorText + executeTalent(plr, false, index);
              }
              // Final is PARTIAL SKILL
              else if (type == 2) {
                actionFlavorText = actionFlavorText + executeskill(plr, false, index);
              }
            }
            // If player has matched things, whether partial or full, but NOTHING passes the stat req, this means player does not have enough stat to execute thing
            if (final.fullIndices.length === 0 && final.partialIndices.length === 0) {
              // Case 3: Not enough for a FULL thing, choose random if more than one and execute fail. Partials are overriden due to exact match found.
              if (notEnough.fullIndices.length > 0) {
                // Get random thing
                randomed = randomInt(0, notEnough.fullIndices.length - 1)
                index = notEnough.fullIndices[randomed];
                type = notEnough.fullTypes[randomed];

                // notEnough is a FULL TALENT
                if (type == 1) {
                  actionFlavorText = actionFlavorText + ` ${realizePhrases[randomInt(0, realizePhrases.length - 1)]} ${notEnoughPhrases[randomInt(0, notEnoughPhrases.length - 1)].toLowerCase().replace("[stat]", "energy").replace("[thing]", state.players[plr].talents.name[index])}`
                }
                // notEnough is a FULL SKILL
                else if (type == 2) {
                  actionFlavorText = actionFlavorText + ` ${realizePhrases[randomInt(0, realizePhrases.length - 1)]} ${notEnoughPhrases[randomInt(0, notEnoughPhrases.length - 1)].toLowerCase().replace("[stat]", "mana").replace("[thing]", state.players[plr].skills.name[index])}`
                }
              }
              // Case 4: Not enough for a PARTIAL thing. Choose random if more than one and execute fail.
              else if (notEnough.partialIndices.length > 0) {
                // Get random thing
                randomed = randomInt(0, notEnough.partialIndices.length - 1)
                index = notEnough.partialIndices[randomed];
                type = notEnough.partialTypes[randomed];

                // notEnough is a PARTIAL TALENT
                if (type == 1) {
                  actionFlavorText = actionFlavorText + ` ${realizePhrases[randomInt(0, realizePhrases.length - 1)]} ${notEnoughPhrases[randomInt(0, notEnoughPhrases.length - 1)].toLowerCase().replace("[stat]", "energy").replace("[thing]", state.players[plr].talents.name[index])}`
                }
                // notEnough is a PARTIAL SKILL
                else if (type == 2) {
                  actionFlavorText = actionFlavorText + ` ${realizePhrases[randomInt(0, realizePhrases.length - 1)]} ${notEnoughPhrases[randomInt(0, notEnoughPhrases.length - 1)].toLowerCase().replace("[stat]", "mana").replace("[thing]", state.players[plr].skills.name[index])}`
                }
              }
            }
          });
        }//end of things matched
      }//end of start action

      newText = newText + plrText[plr] + toCoOpLang(plr, actionFlavorText);
    });
  }

  if (!newText == "") {
    return newText;
  }
  else {
    return text;
  }
}
//todo: modify rest values for hp mp ep, sleep no fix bleed
/////////////////////////////////////////////////////////////////////////////////////

// Check if player is first entering, then is entering into rest, and replenish their stats according to their rest intensity
function detectResting(text) {
  let newText = "";

  // Check if player is not dialoguing
  let dialogueFlag = true;
  dialoguePhrases.forEach(phrase => {
    if (text.toLowerCase().includes(phrase.toLowerCase())) {
      dialogueFlag = false;
    }
  });

  if (dialogueFlag) {
    // Check which players are in the input and store their name and corresponding text
    let result = separateByPlr(text);
    let plrsDetected = Object.keys(result);
    let plrText = {};

    // Store each player's text
    plrsDetected.forEach(plr => {
      if (result[plr].length > 0) {
        plrText[plr] = result[plr].join(" ").replace(/(?<!>)>(?!>)/g, "");
      } else {
        plrText[plr] = result[plr].join(" ");
      }
    });

    plrsDetected.forEach(plr => {
      let isEntering = false;
      let startRest = false;
      let restFlavorText = "";

      restingTextInput = [];
      restingTextInput = findTargetsThenSplit(plrText[plr], enterWords, true);
      log("restingTextInput simplified: " + restingTextInput);

      //If input has enter words get their indices
      if (restingTextInput != null) {
        allEnterWordsIndices = [];
        allEnterWordsIndices = indicesOfTargets(restingTextInput, enterWords);
        log("allEnterWordsIndices:" + allEnterWordsIndices);

        //Detect if there is  you + enter or and + enter
        if (allEnterWordsIndices != null) {
          isEntering = checkYouBeforeIndicesArr(plr, restingTextInput, allEnterWordsIndices, 3) || checkAndBeforeIndicesArr(restingTextInput, allEnterWordsIndices, 2);

          startRest = cleanStringCheckForTargets(restingWords, plrText[plr]);
          log("isEntering: " + isEntering)
          log("startRest: " + startRest);
        }
      }

      if (isEntering && startRest) {
        let lightRest = cleanStringCheckForTargets(lightRestWords, plrText[plr]);
        let moderateRest = cleanStringCheckForTargets(moderateRestWords, plrText[plr]);
        let fullRest = cleanStringCheckForTargets(fullRestWords, plrText[plr]);

        let restBonus = 0.2;
        let restMessage = toCoOpLang(plr, "Your time resting leaves you feeling more okay.");

        if (fullRest) {
          restBonus = randomFloat(0.6, 0.9);
          restMessage = toCoOpLang(plr, "Your time resting leaves you feeling recovered.");
        } else if (moderateRest) {
          restBonus = randomFloat(0.4, 0.6);
          restMessage = toCoOpLang(plr, "Your time resting leaves you feeling better than you were before.");
        } else if (lightRest) {
          restBonus = randomFloat(0.2, 0.4);
          restMessage = toCoOpLang(plr, "Your time resting leaves you feeling a bit better.");
        } else {
          restBonus = randomFloat(0.2, 0.4);
          restMessage = toCoOpLang(plr, "Your time resting leaves you feeling more okay.");
        }

        statUp(plr, "hp", state.players[plr].stats.maxHp * restBonus);
        statUp(plr, "ep", state.players[plr].stats.maxEp * restBonus);
        statUp(plr, "mp", state.players[plr].stats.maxMp * restBonus);

        restFlavorText = ` ${restMessage} `;
        storeStatsToSC();
      }

      newText += plrText[plr] + restFlavorText;
    });
  }

  return newText !== "" ? newText : text;
}


//Detects when player consumes something which heals them.
function detectConsuming(text) {
  let newText = "";

  // Check for dialog phrases
  let dialogueFlag = true;
  dialoguePhrases.forEach(phrase => {
    if (text.toLowerCase().includes(phrase.toLowerCase())) {
      dialogueFlag = false;
    }
  });

  if (dialogueFlag == true) {
    // Split text by player
    let result = separateByPlr(text);
    let plrsDetected = Object.keys(result);
    let plrText = {};

    plrsDetected.forEach(plr => {
      if (result[plr].length > 0) {
        plrText[plr] = result[plr].join(" ").replace(/(?<!>)>(?!>)/g, "");
      } else {
        plrText[plr] = result[plr].join(" ");
      }
    });

    plrsDetected.forEach(plr => {
      let startConsume = false;
      let consumeFlavorText = "";

      // Check input for consume words and split the input
      consumingTextInput = []
      consumingTextInput = findTargetsThenSplit(plrText[plr], consumeWords, true);
      log("consumingTextInput simplified: " + consumingTextInput);

      // If input has consume words get their indices
      if (consumingTextInput != null) {
        allConsumeWordsIndices = [];
        allConsumeWordsIndices = indicesOfTargets(consumingTextInput, consumeWords);
        log("allConsumeWordsIndices:" + allConsumeWordsIndices);

        // Detect if there is  you + consume or and + consume
        if (allConsumeWordsIndices != null) {
          startConsume = checkYouBeforeIndicesArr(plr, consumingTextInput, allConsumeWordsIndices, 3) || checkAndBeforeIndicesArr(consumingTextInput, allConsumeWordsIndices, 2);
          log("startConsume: " + startConsume);
        }
      }


      if (startConsume) {
        let lightHeal = cleanStringCheckForTargets(lightHealWords, plrText[plr]);
        let moderateHeal = cleanStringCheckForTargets(moderateHealWords, plrText[plr]);
        let strongHeal = cleanStringCheckForTargets(strongHealWords, plrText[plr]);
        let greatHeal = cleanStringCheckForTargets(greatHealWords, plrText[plr]);
        let powerfulHeal = cleanStringCheckForTargets(powerfulHealWords, plrText[plr]);

        log("healIntensity: " + [lightHeal, moderateHeal, strongHeal, greatHeal, powerfulHeal]);

        if (powerfulHeal) {
          statUp(plr, "hp", 100);
          statUp(plr, "ep", 120);
          consumeFlavorText = toCoOpLang(plr, " You feel restored.");
        } else if (greatHeal) {
          statUp(plr, "hp", 50);
          statUp(plr, "ep", 80);
          consumeFlavorText = toCoOpLang(plr, " You feel greatly better.");
        } else if (strongHeal) {
          statUp(plr, "hp", 30);
          statUp(plr, "ep", 40);
          consumeFlavorText = toCoOpLang(plr, " You feel a lot better.");
        } else if (moderateHeal) {
          statUp(plr, "hp", 20);
          statUp(plr, "ep", 30);
          consumeFlavorText = toCoOpLang(plr, " You feel moderately better.");
        } else if (lightHeal) {
          statUp(plr, "hp", 10);
          statUp(plr, "ep", 10);
          consumeFlavorText = toCoOpLang(plr, " You feel slightly better.");
        } else {
          statUp(plr, "hp", 5);
          statUp(plr, "ep", 5);
          consumeFlavorText = toCoOpLang(plr, " You feel a bit better.");
        }

        storeStatsToSC();
      }

      newText += plrText[plr] + consumeFlavorText;
    });
  }

  return newText !== "" ? newText : text;
}


function detectAttack(text) {
  newText = "";

  // Verify player is not dialoguing (case-insensitive)
  dialogueFlag = true;
  dialoguePhrases.forEach(phrase => {
    if (text.toLowerCase().includes(phrase.toLowerCase())) {
      // Disable check dialoguing exists
      dialogueFlag = false;
    }
  });

  if (dialogueFlag) {
    // Check which players are in the input and store their name and corresponding text
    result = separateByPlr(text);
    plrsDetected = Object.keys(result);
    plrText = {};

    // Store each player's text
    plrsDetected.forEach(plr => {
      if (result[plr].length > 0) {
        plrText[plr] = result[plr].join(" ").replace(/(?<!>)>(?!>)/g, "");
      }
      else {
        plrText[plr] = result[plr].join(" ");
      }
    });

    plrsDetected.forEach(plr => {
      startAttack = false;
      attackFlavorText = "";

      // Check input for atk words and split the input
      attackTextInput = []
      attackTextInput = findTargetsThenSplit(plrText[plr], attackWords, true);
      log("attackTextInput simplified: " + attackTextInput);

      // If input has atk words get their indices
      if (attackTextInput != null) {
        allAttackWordIndices = [];
        allAttackWordIndices = indicesOfTargets(attackTextInput, attackWords);
        log("allAttackWordIndices:" + allAttackWordIndices);

        // Detect if there is you + atk or and + atk
        if (allAttackWordIndices != null) {
          startAttack = checkYouBeforeIndicesArr(plr, attackTextInput, allAttackWordIndices, 3) || checkAndBeforeIndicesArr(attackTextInput, allAttackWordIndices, 2);
          log("startAttack: " + startAttack)
        }
      }


      if (startAttack) {
        // Get the player's attack and speed stats
        plrAtk = state.players[plr].stats.atk;
        plrSpd = state.players[plr].stats.spd;

        // Define attack strength ranges with corresponding attack messages
        const atkRanges = [
          { min: 0, max: 10, atk: attackTier1 },
          { min: 10, max: 20, atk: attackTier2 },
          { min: 20, max: 30, atk: attackTier3 },
          { min: 30, max: 40, atk: attackTier4 },
          { min: 40, max: 50, atk: attackTier5 },
          { min: 50, max: 60, atk: attackTier6 },
          { min: 60, max: 70, atk: attackTier7 },
          { min: 70, max: 80, atk: attackTier8 },
          { min: 80, max: 90, atk: attackTier9 },
          { min: 90, max: Infinity, atk: attackTier10 }
        ];


        // Define speed stat ranges with corresponding speed messages
        const spdRanges = [
          { min: 0, max: 10, spd: atkSpdTier1 },
          { min: 10, max: 20, spd: atkSpdTier2 },
          { min: 20, max: 30, spd: atkSpdTier3 },
          { min: 30, max: 40, spd: atkSpdTier4 },
          { min: 40, max: 50, spd: atkSpdTier5 },
          { min: 50, max: 60, spd: atkSpdTier6 },
          { min: 60, max: 70, spd: atkSpdTier7 },
          { min: 70, max: 80, spd: atkSpdTier8 },
          { min: 80, max: 90, spd: atkSpdTier9 },
          { min: 90, max: Infinity, spd: atkSpdTier10 }
        ];


        // Calculate energy requirements for attack
        atkEnergyLoss = (2 * (plrAtk / 10) + randomInt(0, 5)) * -1;
        if (plrAtk > 100) {
          atkEnergyLoss = (20 + plrAtk / 25) * -1;
        }
        log("Atk energy loss: " + atkEnergyLoss);

        // Attack energy check defaults to false
        atkEnergyCheck = false;
        // If player has enough energy, turn on check
        if (state.players[plr].stats.ep >= Math.abs(atkEnergyLoss) && state.players[plr].stats.ep >= 0) {
          atkEnergyCheck = true;
        }
        log("atkEnergyCheck: " + atkEnergyCheck);

        // If player does not have enough energy to attack, create flavor text
        if (!atkEnergyCheck) {
          attackFlavorText = attackFlavorText + ` ${toCoOpLang(plr, `${realizePhrases[randomInt(0, realizePhrases.length - 1)]} ${notEnoughPhrases[randomInt(0, notEnoughPhrases.length - 1)].toLowerCase().replace("[stat]", "energy").replace("[thing]", "your attack")}`)} `
        }

        // If player has enough energy to attack, execute the attack
        if (atkEnergyCheck) {
          // Check the player's speed range and create a message based on their speed
          for (let range of spdRanges) {
            if (plrSpd >= range.min && plrSpd < range.max) {
              // Append the speed message to the attack text
              attackFlavorText = attackFlavorText + ` ${toCoOpLang(plr, `${range.spd[randomInt(0, range.spd.length - 1)]}`)} `;

              // Attacking grants SPD exp
              statUp(plr, "spd", randomFloat(0.01, 2));
              break;
            }
          }

          // Check the player's attack range/strength, check energy requirement, and save attack text
          for (let range of atkRanges) {
            if (plrAtk >= range.min && plrAtk < range.max) {
              // Save the attack message based on the attack strength
              attackFlavorText = attackFlavorText + `and ${toCoOpLang(plr, `${range.atk[randomInt(0, range.atk.length - 1)].toLowerCase()}`)} `;

              // Attacking grants ATK exp
              statUp(plr, "atk", randomFloat(0.01, 2));

              break;
            }
          }

          // Apply energy loss from attack
          statUp(plr, "ep", atkEnergyLoss);

          // Determine if the attack has a luck modifier
          atkLuckRoll = randomInt(1, 100); // Generate a random luck roll between 1 and 100
          log("atkLuckRoll: " + atkLuckRoll); // Log the luck roll for debugging

          if (atkLuckRoll <= state.players[plr].stats.lck && atkLuckRoll >= 1) {
            // If the luck roll is within the player's luck range, append a lucky phrase to the text
            attackFlavorText = attackFlavorText + ` ${toCoOpLang(plr, `${graspPhrases[randomInt(0, graspPhrases.length - 1)]} ${luckyPhrases[randomInt(0, luckyPhrases.length - 1)]}.`)} `;

            //Grant the player luck exp for using luck
            statUp(plr, "lck", randomFloat(0.01, 2));
          }


          storeStatsToSC();
        } // End of has atk energy
      } // End of startAttack

      newText = newText + plrText[plr] + attackFlavorText;
    });
  }

  if (newText == "") {
    return text;
  }
  else {
    return newText;
  }
}

/////////////////////////////////////////////////////////////////////////////////////

// Function to check if the output contains any "hurt" words or patterns, and if so, apply damage to the player's stats
function testHurt(plr, hurtType, dmg, text) {
  // Loop through all the regex patterns in hurtType to detect any matching "hurt" words in the output text
  const matchedPattern = hurtType.find(pattern => pattern.test(text));

  // If a hurt word is found, apply damage to the player's HP and increase the DEF stat
  if (matchedPattern) {
    // Apply damage to the player's HP stat
    statUp(plr, "hp", dmg);

    // Find the `${plr} Stats` card to log the damage information
    const statSC = storyCards.find(sc => sc.title === `${plr} Stats`);

    // Match the text with the pattern and fetch the matching portion (if any)
    const matchText = text.match(matchedPattern);

    // If the `${plr} Stats` card exists and we have matched text, log the damage details
    if (statSC && matchText) {
      // Add a new log entry to the Player Stats card, indicating the output count and damage reason
      statSC.description = `Log ${state.turnCount} | Dmg Reason: ${matchText}\n` + statSC.description;

      // Log the percentage of damage reduction based on the player's DEF stat
      statSC.description = `Log ${state.turnCount} | Dmg Reduced by DEF: ${((1 - dmgPercent) * 100).toFixed(2)}% (${(dmg / dmgPercent).toFixed(2)} → ${dmg.toFixed(2)})\n` + statSC.description;
    }

    // Applying damage triggers an increase in the player's DEF stat as a form of experience
    statUp(plr, "def", randomFloat(0.01, 1.5));

    // Store updated player stats to the game state
    storeStatsToSC();
  }
}

// Function to check output if player got damaged and applies hp dmg to stats
function detectHurt(text) {

  //todo: fix so plr doesnt get dmged when about to dmg instead, use array?
  //Pain that can be brushed off
  lightHurtWords = [
    //Ex: Scraping you/your body
    new RegExp(`\\b(?:bump|bumps|bumping|bruise|bruised|bruising|graze|grazed|grazes|grazing|nick|nicked|nicking|nicks|scorching|scorched|scorches|scrape|scraped|scrapes|scraping|singeing|singes|sting|stinging|stings)(?:\\s+\\w+){0,4}\\s+(?:you|your)(?:\\s+\\w+){0,5}\\s+(?:${bodyParts.join("|")})\\b`, "i"),

    //Ex: You feel throbbing
    new RegExp(`\\byou(?:\\s+\\w+){0,3}\\s+feel(?:\\s+\\w+){0,5}\\s+(?:ache|aching|bruise|bruising|bruised|sting|stinging|throb|throbbing)\\b`, "i"),

    //Ex: You stumble back
    new RegExp(`\\byou(?:\\s+\\w+){0,3}\\s+(?:fall|falling|falls|fell|stumble|stumbled|stumbles|stumbling|slam|slammed|slamming|slams|trip|tripping|trips|tumbled)(?:\\s+\\w+){0,3}\\s+(?:against|around|back|backward|down|forward|into|on|off|over|sideways|towards)\\b`, "i"),

    //Ex: The pain is throbbing
    new RegExp(`\\bThe(?:\\s+\\w+){0,3}\\s+pain(?:\\s+\\w+){0,4}\\s+(?:throbbing)\\b`, "i")

  ];

  //Pain that hurts or lightly draws blood
  moderateHurtWords = [
    //Ex: slicing you/your body
    new RegExp(`\\b(?:bite|biting|bites|burn|burning|burns|catches|catching|dig|digs|digging|hit|hitting|hits|jab|jabbing|jabs|knock|knocked|knocking|sear|sears|searing|shock|shocking|shocks|strike|strikes|striking|struck|whack|whacked|whacking|whacks)(?:\\s+\\w+){0,3}\\s+(?:you|your)(?:\\s+\\w+){0,5}\\s+(?:${bodyParts.join("|")})\\b`, "i"),

    //Ex: sends you crashing
    new RegExp(`\\b(?:send|sending|sends)(?:\\s+\\w+){0,3}\\s+you(?:\\s+\\w+){0,5}\\s+(?:crumpling|crashing|flailing|reeling|skidding|slamming|smashing|sprawling|toppling|tumbling)\\b`, "i"),

    //Ex: The pain is burning
    new RegExp(`\\bThe(?:\\s+\\w+){0,3}\\s+pain(?:\\s+\\w+){0,4}\\s+(?:burning|searing)\\b`, "i")

  ];

  //Pain that is drawing average blood or internal dmg
  strongHurtWords = [
    //Ex: piercing you/your body
    new RegExp(`\\b(?:agony|agonizing|batter|battered|battering|collide|collides|fling|flinging|flung|pierce|pierced|pierces|piercing|slam|slams|slammed|slamming|slice|slices|sliced|slicing|shoot|shooting|shoots|slash|slashes|slashed|slashing|gashes)(?:\\s+\\w+){0,3}\\s+(?:you|your)(?:\\s+\\w+){0,5}\\s+(?:${bodyParts.join("|")})\\b`, "i"),

    //Ex: The pain is excrutiating
    new RegExp(`\\bThe(?:\\s+\\w+){0,3}\\s+pain(?:\\s+\\w+){0,4}\\s+(?:agonizing|blistering|blinding|extreme|gnawing|gripping|horrible|immediate|intense|piercing|radiating|sharp|shooting|stabbing|tremendous|unbearable)\\b`, "i")


  ];

  //Pain that is significantly drawing blood
  greatHurtWords = [
    //Ex: Blasting you/your body
    new RegExp(`\\b(?:blasts|blasted|blasting|explodes|exploding|fractures|fractured|fracturing|impale|impales|impaled|impaling|pierce|pierces|pierced|piercing|rip|rips|ripped|ripping|shred|shreds|shredded|shredding|tear into|tears into|tearing into|tore|torn)(?:\\s+\\w+){0,3}\\s+(?:you|your)(?:\\s+\\w+){0,5}\\s+(?:${bodyParts.join("|")})\\b`, "i")
  ];

  //Pain that is debilitating
  severeHurtWords = [
    //Ex: Crushing you/your body
    new RegExp(`\\b(?:crush|crushes|crushed|crushing|demolish|demolishes|demolished|demolishing|devastate|devastates|devastated|devastating|obliterate|obliterates|obliterated|obliterating|rupture|ruptures|ruptured|rupturing|shatter|shatters|shattered|shattering|splinter|splinters|splintered|splintering)(?:\\s+\\w+){0,3}\\s+(?:you|your)(?:\\s+\\w+){0,5}\\s+(?:${bodyParts.join("|")})\\b`, "i")
  ];


  state.playerList.forEach(plr => {
    // Pain that can be brushed off
    lightHurtWords_coop = [
      //Ex: Scraping plr's body
      new RegExp(`\\b(?:bump|bumps|bumping|bruise|bruised|bruising|graze|grazed|grazes|grazing|nick|nicked|nicking|nicks|pressing|presses|scorching|scorched|scorches|scrape|scraped|scrapes|scraping|singeing|singes|sting|stinging|stings)(?:\\s+\\w+){0,4}\\s+(?:${plr}|${plr}'s)(?:\\s+\\w+){0,5}\\s+(?:${bodyParts.join("|")})\\b`, "i"),

      //Ex: plr feels throbbing
      new RegExp(`\\b${plr}(?:\\s+\\w+){0,3}\\s+(?:feeling|felt|feels|winces|wincing|winced)(?:\\s+\\w+){0,5}\\s+(?:ache|aching|bruise|bruising|bruised|sting|stinging|throb|throbbing)\\b`, "i"),

      //Ex: plr's body aches
      new RegExp(`\\b(?:${plr}'s)\\s+(?:${bodyParts.join("|")})\\s+(?:throb|throbs|throbbing|ache|aches|aching|contorts|contorting|snaps shut)\\b`, "i"),

      //Ex: Plr stumbles
      new RegExp(`\\b${plr}(?:\\s+\\w+){0,3}\\s+(?:contorts|contorting|fall|falling|falls|fell|stumble|stumbled|stumbles|stumbling|strains|straining|slam|slammed|slamming|slams|staggers|staggering|trip|tripping|trips|tumbled|yanked)\\b`, "i")
    ];

    // Pain that hurts or lightly draws blood
    moderateHurtWords_coop = [
      //Ex: Plr chokes
      new RegExp(`\\b${plr}(?:\\s+\\w+){0,3}\\s+(?:chokes|sputters|coughs|fights for air|wheezes|wheezing)\\b`, "i"),

      //Ex: knocks plr
      new RegExp(`\\b(?:knocks|knocking|slamming|slams)(?:\\s+\\w+){0,3}\\s+${plr}\\b`, "i"),

      //Ex: slicing plr's body
      new RegExp(`\\b(?:bite|biting|bites|burn|burning|burns|catches|catching|driving|drives|dig|digs|digging|hit|hitting|hits|jab|jabbing|jabs|knock|knocked|knocking|ramming|rams|sear|sears|searing|shock|shocking|shocks|strike|strikes|striking|struck|sharp|whack|whacked|whacking|whacks)(?:\\s+\\w+){0,3}\\s+(?:${plr}|${plr}'s)(?:\\s+\\w+){0,5}\\s+(?:${bodyParts.join("|")})\\b`, "i"),

      //Ex: sends plr crashing
      new RegExp(`\\b(?:send|sending|sends|throws|throwing)(?:\\s+\\w+){0,3}\\s+${plr}(?:\\s+\\w+){0,5}\\s+(?:crumpling|crashing|flailing|reeling|skidding|slamming|smashing|sprawling|toppling|tumbling)\\b`, "i"),

      //Ex: Pain pulses through Plr's body
      new RegExp(`\\b(?:pain|sting)\\b(?:\\s+\\w+){0,3}\\s+(?:flares|pulses|burns|shoots)(?:\\s+\\w+){0,5}\\s+(?:through|along|across|down|into|up)\\s+(?:\\w+\\s+)?(?:${plr}'s)\\s+(?:${bodyParts.join("|")})\\b`, "i"),

      //Ex: shock up plr's body
      new RegExp(`\\b(?:shock|shocks|shocking|shocked)(?:\\s+\\w+){0,2}\\s+(?:up|down|through|along)\\s+(?:${plr}'s)\\s+(?:${bodyParts.join("|")})\\b`, "i")

    ];

    // Pain that is drawing average blood or internal dmg
    strongHurtWords_coop = [
      //Ex: piercing plr's body
      new RegExp(`\\b(?:agony|agonizing|batter|battered|battering|collide|collides|fling|flinging|flung|pierce|pierced|pierces|piercing|slam|slams|slammed|slamming|slice|slices|sliced|slicing|shoot|shooting|shoots|slash|slashes|slashed|slashing|gashes)(?:\\s+\\w+){0,3}\\s+(?:${plr}|${plr}'s)(?:\\s+\\w+){0,5}\\s+(?:${bodyParts.join("|")})\\b`, "i"),

      //Ex: Pain explodes through plr's body
      new RegExp(`\\b(?:pain|sting)\\b(?:\\s+\\w+){0,3}\\s+(?:blossoms|explode|explodes|bursts)(?:\\s+\\w+){0,5}\\s+(?:through|along|across|down|into)\\s+(?:\\w+\\s+)?(?:${plr}'s)\\s+(?:${bodyParts.join("|")})\\b`, "i"),

      //Ex: Plr cries out in pain
      new RegExp(`\\b(?:${plr})\\b(?:\\s+\\w+){0,2}\\s+(?:cry|cries|cried|crying|screams|screaming|yells|yelling|welps|welping)\\s+out(?:\\s+\\w+){0,3}\\s+in\\s+(?:pain|agony)\\b`, "i"),

      //Ex: Plr clutches their body
      new RegExp(`\\b(?:${plr})\\b(?:\\s+\\w+){0,2}\\s+(?:clutch|clutches|clutched|clutching)(?:\\s+\\w+){0,3}\\s+(?:his|her|their|your)\\s+(?:bleeding|wounded|injured|hurt)?\\s*(?:${bodyParts.join("|")})\\b`, "i")
    ];

    //Pain that is significantly drawing blood
    greatHurtWords_coop = [
      //Ex: Blasting plr's body
      new RegExp(`\\b(?:blasts|blasted|blasting|explodes|exploding|fractures|fractured|fracturing|impale|impales|impaled|impaling|pierce|pierces|pierced|piercing|rip|rips|ripped|ripping|shred|shreds|shredded|shredding|tear into|tears into|tearing into|tore|torn)(?:\\s+\\w+){0,3}\\s+(?:${plr}|${plr}'s)(?:\\s+\\w+){0,5}\\s+(?:${bodyParts.join("|")})\\b`, "i"),

      //Ex: gouges plr's body
      new RegExp(`\\b(?:gouge|gouges|gouging)(?:\\s+\\w+){0,3}\\s+(?:${plr}'s)\\s+(?:${bodyParts.join("|")})\\b`, "i"),

      //Ex: Plr crumpled
      new RegExp(`\\b${plr}(?:\\s+\\w+){0,3}\\s+(?:collapse|collapses|collapsed|collapsing|crumple|crumpled|crumples|crumpling)\\b`, "i")
    ];

    //Pain that is debilitating
    severeHurtWords_coop = [
      //Ex: Crushing plr's body
      new RegExp(`\\b(?:crush|crushes|crushed|crushing|demolish|demolishes|demolished|demolishing|devastate|devastates|devastated|devastating|obliterate|obliterates|obliterated|obliterating|rupture|ruptures|ruptured|rupturing|shatter|shatters|shattered|shattering|splinter|splinters|splintered|splintering)(?:\\s+\\w+){0,3}\\s+(?:${plr}|${plr}'s)(?:\\s+\\w+){0,5}\\s+(?:${bodyParts.join("|")})\\b`, "i")
    ];

    //Initialize dmg values and defense reduction
    df = state.players[plr].stats.def;

    // X def reduces X/2 % dmg
    if (df <= 100) {
      dmgPercent = 1 - (df / 200); //Ex: Def: 90, 1 - 0.45 = 0.55 dmg taken
    }
    //Past 100 def reduces 50% + (~1% per 10 def) dmg
    else if (df > 100) {
      dmgPercent = 1 - (-0.25 + 0.161 * Math.log(df));
    }
    log("dmgPercent: " + dmgPercent);

    // Randomize and save damage for each dmg intensity
    severeDmg = -1 * randomFloat(25, 40) * dmgPercent;
    greatDmg = -1 * randomFloat(15, 25) * dmgPercent;
    strongDmg = -1 * randomFloat(5, 15) * dmgPercent;
    moderateDmg = -1 * randomFloat(3, 5) * dmgPercent;
    lightDmg = -1 * randomFloat(0.1, 3) * dmgPercent;

    // Loop through each regex, if output text matches damage text, apply damage
    if (onePlayerFlagger()) {
      testHurt(plr, severeHurtWords, severeDmg, text);
      testHurt(plr, greatHurtWords, greatDmg, text);
      testHurt(plr, strongHurtWords, strongDmg, text);
      testHurt(plr, moderateHurtWords, moderateDmg, text);
      testHurt(plr, lightHurtWords, lightDmg, text);
    }
    else {
      // Replace you/your with first plr in coop mode for matching
      if (!onePlayerFlagger()) {
        adjustedText = text
          .replace(/\byou\b/gi, state.playerList[0])
          .replace(/\byour\b/gi, state.playerList[0] + "'s");
      }

      testHurt(plr, severeHurtWords_coop, severeDmg, adjustedText);
      testHurt(plr, greatHurtWords_coop, greatDmg, adjustedText);
      testHurt(plr, strongHurtWords_coop, strongDmg, adjustedText);
      testHurt(plr, moderateHurtWords_coop, moderateDmg, adjustedText);
      testHurt(plr, lightHurtWords_coop, lightDmg, adjustedText);
    }

  });

  return text;
}
// todo: enemy strength/type changes dmg lvl

/////////////////////////////////////////////////////////////////////////////////////

// Function to detect when the player attempts to dodge
function detectDodge(text) {
  newText = "";

  // Verify player is not dialoguing (case-insensitive)
  dialogueFlag = true;
  dialoguePhrases.forEach(phrase => {
    if (text.toLowerCase().includes(phrase.toLowerCase())) {
      // Disable check dialoguing exists
      dialogueFlag = false;
    }
  });

  if (dialogueFlag) {
    // Check which players are in the input and store their name and corresponding text
    result = separateByPlr(text);
    plrsDetected = Object.keys(result);
    plrText = {};

    // Store each player's text
    plrsDetected.forEach(plr => {
      if (result[plr].length > 0) {
        plrText[plr] = result[plr].join(" ").replace(/(?<!>)>(?!>)/g, "");
      }
      else {
        plrText[plr] = result[plr].join(" ");
      }
    });

    plrsDetected.forEach(plr => {
      startDodge = false;
      dodgeFlavorText = "";

      // Check if the input contains any dodge-related words
      dodgeTextInput = [];

      // Find all the dodge-related words in the text and split the input accordingly
      dodgeTextInput = findTargetsThenSplit(plrText[plr], dodgeWords, true);
      log("dodgeTextInput simplified: " + dodgeTextInput);

      // If the input contains dodge words, find their indices in the text
      if (dodgeTextInput != null) {
        allDodgeWordIndices = [];
        allDodgeWordIndices = indicesOfTargets(dodgeTextInput, dodgeWords);
        log("allDodgeWordIndices:" + allDodgeWordIndices);

        // Check if the sentence contains "you + dodge" or "and + dodge" to trigger the dodge action
        if (allDodgeWordIndices != null) {
          startDodge = checkYouBeforeIndicesArr(plr, dodgeTextInput, allDodgeWordIndices, 3) || checkAndBeforeIndicesArr(dodgeTextInput, allDodgeWordIndices, 2);
          log("startDodge: " + startDodge)
        }
      }


      // If the dodge action is triggered (startDodge is true), calculate the player's dodge response based on SPD stat
      if (startDodge) {
        plrSpd = state.players[plr].stats.spd;

        // Define SPD stat ranges and corresponding dodge messages
        const spdRanges = [
          { min: 0, max: 10, spd: spdTier1 },
          { min: 10, max: 20, spd: spdTier2 },
          { min: 20, max: 30, spd: spdTier3 },
          { min: 30, max: 40, spd: spdTier4 },
          { min: 40, max: 50, spd: spdTier5 },
          { min: 50, max: 60, spd: spdTier6 },
          { min: 60, max: 70, spd: spdTier7 },
          { min: 70, max: 80, spd: spdTier8 },
          { min: 80, max: 90, spd: spdTier9 },
          { min: 90, max: Infinity, spd: spdTier10 }
        ];


        // Calculate energy requirements for dodging
        dodgeEnergyLoss = (2 * (plrSpd / 10) + randomInt(0, 5)) * -1;
        if (plrSpd > 100) {
          dodgeEnergyLoss = (20 + plrSpd / 25) * -1;
        }
        log("dodgeEnergyLoss: " + dodgeEnergyLoss);

        // Dodge energy check defaults to false
        dodgeEnergyCheck = false;
        // If player has enough energy, turn on check
        if (state.players[plr].stats.ep >= Math.abs(dodgeEnergyLoss) && state.players[plr].stats.ep >= 0) {
          dodgeEnergyCheck = true;
        }
        log("dodgeEnergyCheck: " + dodgeEnergyCheck);

        // If player doesnt have enough energy to dodge, create flavor text
        if (dodgeEnergyCheck == false) {
          dodgeFlavorText = dodgeFlavorText + ` ${toCoOpLang(plr, `${realizePhrases[randomInt(0, realizePhrases.length - 1)]} ${notEnoughPhrases[randomInt(0, notEnoughPhrases.length - 1)].toLowerCase().replace("[stat]", "energy").replace("[thing]", "your movement")}`)} `;
        }

        // If player has enough energy to dodge, execute dodge
        if (dodgeEnergyCheck) {
          // Based on the player's SPD stat, select an appropriate dodge message and save dodge text
          for (let range of spdRanges) {
            if (plrSpd >= range.min && plrSpd < range.max) {
              // Save dodge text based on player SPD stat
              dodgeFlavorText = dodgeFlavorText + ` ${toCoOpLang(plr, `${range.spd[randomInt(0, range.spd.length - 1)]}`)} `;

              break;
            }
          }

          // Consume energy for dodging
          statUp(plr, "ep", dodgeEnergyLoss);

          // Dodging grants SPD stat
          statUp(plr, "spd", randomFloat(0.01, 2));

          // Check if the player's luck allows for a dodge boost based on their LCK stat
          dodgeLuckRoll = randomInt(1, 100);
          log("dodgeLuckRoll: " + dodgeLuckRoll);

          // If the player's luck stat rolls successfully, append a lucky dodge message
          if (dodgeLuckRoll <= state.players[plr].stats.lck && dodgeLuckRoll >= 1) {
            dodgeFlavorText = dodgeFlavorText + `${toCoOpLang(plr, `${graspPhrases[randomInt(0, graspPhrases.length - 1)]} ${luckyPhrases[randomInt(0, luckyPhrases.length - 1)]}.`)} `;

            // Grant the player luck exp for using luck
            statUp(plr, "lck", randomFloat(0.01, 2));
          }

          storeStatsToSC();
        }// End of dodgeEnergyCheck
      } // End of startDodge check

      newText = newText + plrText[plr] + dodgeFlavorText;
    });
  }

  if (newText == "") {
    return text;
  }
  else {
    return newText;
  }
}

// Function that detects when a player looks around the environment, and based on their INTL stat, affects the level of detail in the results displayed to the player.
function detectScout(text) {
  newText = "";

  // Verify player is not dialoguing (case-insensitive)
  dialogueFlag = true;
  dialoguePhrases.forEach(phrase => {
    if (text.toLowerCase().includes(phrase.toLowerCase())) {
      // Disable check dialoguing exists
      dialogueFlag = false;
    }
  });

  if (dialogueFlag) {
    // Check which players are in the input and store their name and corresponding text
    result = separateByPlr(text);
    plrsDetected = Object.keys(result);
    plrText = {};

    // Store each player's text
    plrsDetected.forEach(plr => {
      if (result[plr].length > 0) {
        plrText[plr] = result[plr].join(" ").replace(/(?<!>)>(?!>)/g, "");
      }
      else {
        plrText[plr] = result[plr].join(" ");
      }
    });

    plrsDetected.forEach(plr => {
      startScout = false;
      scoutFlavorText = "";

      // Check for scout-related words
      scoutTextInput = [];

      // Find scout-related words within the input and split the input accordingly
      scoutTextInput = findTargetsThenSplit(plrText[plr], scoutWords, true);
      log("scoutTextInput simplified: " + scoutTextInput);

      // If the input contains scout words, find their indices in the text
      if (scoutTextInput != null) {
        allScoutWordIndices = [];
        allScoutWordIndices = indicesOfTargets(scoutTextInput, scoutWords);
        log("allScoutWordIndices:" + allScoutWordIndices);

        // Check if the sentence starts with "you + scout" or "and + scout" to trigger scouting action
        if (allScoutWordIndices != null) {
          startScout = checkYouBeforeIndicesArr(plr, scoutTextInput, allScoutWordIndices, 3) || checkAndBeforeIndicesArr(scoutTextInput, allScoutWordIndices, 2);
          log("startScout: " + startScout)
        }
      }


      // If the scouting action is triggered (startScout is true), process the INTL stat to provide results
      if (startScout) {
        plrIntl = state.players[plr].stats.intl;

        // Define the ranges of INTL stat and the corresponding messages that will be shown to the player
        const detailRanges = [
          { min: 0, max: 10, msg: detail1 },
          { min: 10, max: 20, msg: detail2 },
          { min: 20, max: 30, msg: detail3 },
          { min: 30, max: 40, msg: detail4 },
          { min: 40, max: 50, msg: detail5 },
          { min: 50, max: 60, msg: detail6 },
          { min: 60, max: 70, msg: detail7 },
          { min: 70, max: 80, msg: detail8 },
          { min: 80, max: 90, msg: detail9 },
          { min: 90, max: Infinity, msg: detail10 }
        ];

        // Iterate through the defined ranges to find the appropriate level of detail based on the player's INTL stat
        for (let range of detailRanges) {
          if (plrIntl >= range.min && plrIntl < range.max) {
            // Add the relevant detail message to the text
            scoutFlavorText = ` ${toCoOpLang(plr, `${range.msg[randomInt(0, range.msg.length - 1)]}`)} `;

            // Award the player INTL experience for successfully performing a scout action
            statUp(plr, "intl", randomFloat(0.01, 2));
            break; // Stop checking once the correct range is found
          }
        }

        // Check for the possibility of a lucky scout action based on the player's luck stat
        scoutLuckRoll = randomInt(1, 100);
        log("scoutLuckRoll: " + scoutLuckRoll);

        if (scoutLuckRoll <= state.players[plr].stats.lck && scoutLuckRoll >= 1) {
          // If the luck roll is successful, add a lucky phrase to the result
          scoutFlavorText = scoutFlavorText + ` ${toCoOpLang(plr, `${graspPhrases[randomInt(0, graspPhrases.length - 1)]} ${luckyPhrases[randomInt(0, luckyPhrases.length - 1)]}.`)} `;

          // Grant the player luck exp for using luck
          statUp(plr, "lck", randomFloat(0.01, 2));
        }

        storeStatsToSC();
      } // End of startScout

      newText = newText + plrText[plr] + scoutFlavorText;
    });
  }

  if (!newText == "") {
    return newText;
  }
  else {
    return text;
  }
}

// Function that detects when a player defends. Defense effectiveness based on plr DEF stat
function detectDefend(text) {
  let newText = "";

  // Verify player is not dialoguing
  dialogueFlag = true;
  dialoguePhrases.forEach(phrase => {
    if (text.toLowerCase().includes(phrase.toLowerCase())) {
      dialogueFlag = false;
    }
  });

  if (dialogueFlag) {
    // Check which players are in the input and store their name and corresponding text
    const result = separateByPlr(text);
    const plrsDetected = Object.keys(result);
    const plrText = {};

    plrsDetected.forEach(plr => {
      plrText[plr] = result[plr].join(" ").replace(/(?<!>)>(?!>)/g, "").trim();
    });

    plrsDetected.forEach(plr => {
      let startDefend = false;
      let defendFlavorText = "";

      // If the player isn't dialoguing, proceed to check for defend-related words
      defendTextInput = [];

      // Find defend-related words within the input and split the input accordingly
      defendTextInput = findTargetsThenSplit(plrText[plr], defendWords, true);
      log("defendTextInput simplified: " + defendTextInput);

      // If the input contains defend words, find their indices in the text
      if (defendTextInput != null) {
        allDefendWordIndices = [];
        allDefendWordIndices = indicesOfTargets(defendTextInput, defendWords);
        log("allDefendWordIndices:" + allDefendWordIndices);

        // Check if the sentence starts with "you + defend" or "and + defend" to trigger defend action
        if (allDefendWordIndices != null) {
          startDefend = checkYouBeforeIndicesArr(plr, defendTextInput, allDefendWordIndices, 3) || checkAndBeforeIndicesArr(defendTextInput, allDefendWordIndices, 2);
          log("startDefend: " + startDefend);
        }
      }

      if (startDefend) {
        const plrDef = state.players[plr].stats.def;
        const plrLck = state.players[plr].stats.lck;

        // Define DEF tiers (adjust these ranges as needed)
        const defendRanges = [
          { min: 0, max: 10, phrases: defendTiers.tier1 },
          { min: 10, max: 20, phrases: defendTiers.tier2 },
          { min: 20, max: 30, phrases: defendTiers.tier3 },
          { min: 30, max: 40, phrases: defendTiers.tier4 },
          { min: 40, max: 50, phrases: defendTiers.tier5 },
          { min: 50, max: 60, phrases: defendTiers.tier6 },
          { min: 60, max: 70, phrases: defendTiers.tier7 },
          { min: 70, max: 80, phrases: defendTiers.tier8 },
          { min: 80, max: 90, phrases: defendTiers.tier9 },
          { min: 90, max: Infinity, phrases: defendTiers.tier10 }
        ];

        for (const tier of defendRanges) {
          if (plrDef >= tier.min && plrDef < tier.max) {
            defendFlavorText = ` ${toCoOpLang(plr, tier.phrases[randomInt(0, tier.phrases.length - 1)])} `;
            statUp(plr, "def", randomFloat(0.01, 2));
            break;
          }
        }

        // Luck bonus (optional)
        const luckRoll = randomInt(1, 100);
        if (luckRoll <= plrLck && luckRoll >= 1) {
          defendFlavorText += ` ${toCoOpLang(plr, `${graspPhrases[randomInt(0, graspPhrases.length - 1)]} ${luckyPhrases[randomInt(0, luckyPhrases.length - 1)]}.`)}`;
          statUp(plr, "lck", randomFloat(0.01, 2));
        }

        storeStatsToSC();
      }

      newText += plrText[plr] + defendFlavorText;
    });
  }

  if (!newText == "") {
    return newText;
  }
  else {
    return text;
  }
}

function detectExercise(text) {
  let newText = "";


  // Verify player is not dialoguing
  dialogueFlag = true;
  dialoguePhrases.forEach(phrase => {
    if (text.toLowerCase().includes(phrase.toLowerCase())) {
      dialogueFlag = false;
    }
  });

  if (dialogueFlag == true) {
    // Check which players are in the input and store their name and corresponding text
    const result = separateByPlr(text);
    const plrsDetected = Object.keys(result);
    const plrText = {};

    plrsDetected.forEach(plr => {
      plrText[plr] = result[plr].join(" ").replace(/(?<!>)>(?!>)/g, "").trim();
    });

    plrsDetected.forEach(plr => {
      let startExercise = false;
      let isDoing = false;
      let exerciseFlavorText = "";

      // If the player isn't dialoguing, proceed to check for exercise-related words
      exerciseTextInput = [];

      // Find exercise-related words within the input and split the input accordingly
      exerciseTextInput = findTargetsThenSplit(plrText[plr], exerciseWords, true);
      log("exerciseTextInput simplified: " + exerciseTextInput);

      // If the input contains exercise words, find their indices in the text
      if (exerciseTextInput != null) {
        allExerciseWordIndices = [];
        allExerciseWordIndices = indicesOfTargets(exerciseTextInput, exerciseWords);
        log("allExerciseWordIndices:" + allExerciseWordIndices);

        // Check if the sentence starts with "you + exercise" or "and + exercise" to trigger exercise action
        if (allExerciseWordIndices != null) {
          startExercise = checkYouBeforeIndicesArr(plr, exerciseTextInput, allExerciseWordIndices, 3) || checkAndBeforeIndicesArr(exerciseTextInput, allExerciseWordIndices, 2);
          log("startExercise: " + startExercise);

          isDoing = cleanStringCheckForTargets(doWords, plrText[plr]);
        }
      }

      if (isDoing && startExercise) {
        totalReps = 0;
        finishedReps = 0;
        epCost = 0;
        hpCost = 0;
        atkGain = 0;
        defGain = 0;
        spdGain = 0;
        maxEpGain = 0;

        allExerciseWordIndices.forEach(exercise => {
          totalReps += findClosestNumberBefore(exerciseTextInput, exercise) ?? 1;
        });
        log("totalReps: " + totalReps);

        for (let i = 0; i < totalReps; i++) {
          if (state.players[plr].stats.ep > epCost + 15) {
            epCost += randomFloat(5, 15);
            hpCost += randomFloat(0, 0.3);
            atkGain += randomFloat(0, 0.5);
            defGain += randomFloat(0, 0.5);
            spdGain += randomFloat(0, 0.5);

            maxEpGain += randomFloat(0, 0.5);

            finishedReps = i + 1;

            log("epCost: " + epCost);
          }
          else {
            finishedReps = i;

            break;
          }
        }
        log("finishedReps: " + finishedReps);

        statUp(plr, "ep", -1 * epCost);
        statUp(plr, "hp", -1 * hpCost);
        statUp(plr, "atk", atkGain);
        statUp(plr, "def", defGain);
        statUp(plr, "spd", spdGain);

        state.players[plr].stats.maxEp += maxEpGain;
        state.players[plr].stats.maxEp = Math.floor(state.players[plr].stats.maxEp * 100) / 100;


        storeStatsToSC();

        exerciseFlavorText = toCoOpLang(plr, `${exerciseResultPhrases[randomInt(0, exerciseResultPhrases.length - 1)].replace("[num]", `${finishedReps}`)}`);

      }

      newText += plrText[plr] + exerciseFlavorText;
    });
  }

  if (!newText == "") {
    return newText;
  }
  else {
    return text;
  }
}

//persistent injuries
//race evos
//add random skill learning, make it context based
//spiritualism increases luck
//buff and debuff
//add exp reward for killing
//add reading
//add armor, you put the helmet "on your head"
//time skip




// Your other library scripts go here
// === Shared Library: Universal Reputation System (URS) + Mini Language Engine (MLE) ===
// === Credit & Collaboration ===
// This engine was built in collaboration with Lothens, whose Personal Reputation Tracker formed a core part of the system’s design.
// It also incorporates the Mini Language Engine (MLE) originally developed by LewdLeah, enabling dynamic narrative behavior and prose consistency.
// Deep thanks to both creators for their contributions—this system would not exist without their foundational work.

// --- DEFAULTS ---
const DEFAULT_FACTIONS = {}; // <-- Users define their own factions

const DEFAULT_REPUTATION = {
  global: 0,
  categories: {
    warlike: 0,
    diplomatic: 0,
    merciful: 0,
    ruthless: 0,
    noble: 0,
    deceptive: 0
  }
};

const REPUTATION_CATS = [
  "Charmer", "Honorable", "Rogue", "Dominant", "Submissive", "Prankster",
  "Curious", "Innocent", "Mischievous", "Affectionate", "Defiant",
  "Brave", "Clever", "Playful"
];


// --- INIT ---
function initWorldReputation(state) {
  if (!state.reputation) state.reputation = { global: 0 };
  if (!state.factions) state.factions = { ...DEFAULT_FACTIONS };
}

function initPersonalReputation(state) {
  if (!state.reputation) state.reputation = {};
  for (const cat of REPUTATION_CATS) {
    if (typeof state.reputation[cat] !== "number") {
      state.reputation[cat] = 0;
    }
  }
}

// --- LEXICON: World Reputation Tags ---
const URT_LEXICON = {
  warlike: [/\battack\b/i, /\bdestroy\b/i, /\braid\b/i, /\bbombard\b/i, /\bexecute\b/i],
  diplomatic: [/\bnegotiate\b/i, /\bparley\b/i, /\btreaty\b/i, /\balliance\b/i, /\bsurrender\b/i],
  merciful: [/\bspare\b/i, /\bheal\b/i, /\bsave\b/i, /\bprotect\b/i, /\brescue\b/i],
  deceitful: [/\blie\b/i, /\btrick\b/i, /\bdeceive\b/i, /\bcon\b/i, /\bmanipulate\b/i],
  honorable: [/\boath\b/i, /\bswear\b/i, /\bhonor\b/i, /\bjustice\b/i, /\btruth\b/i],
  threatening: [/\bthreaten\b/i, /\bwarn\b/i, /\bintimidate\b/i]
};

// --- LEXICON: Personal Reputation Tags ---
const PERSONAL_REP_PATTERNS = [
    // 🦸 Big Heroics (Huge Boosts)
    { regex: /\b(dove in front of (the|a) blade|pushed (someone|them|a child) out of harm's way|threw (them|someone|a child) to safety|shielded (them|someone|the innocent)|leapt to save|saved (a|the) life|risked (your|his|her|their) life for|stood between (danger|the attacker|the mob) and (someone|them)|took a blow meant for)\b/i, changes: { Honorable: 3, Brave: 3, Charmer: 2 } },

    // ⚖️ Justice Served (Public Deeds)
    { regex: /\b(brought a murderer to justice|saved (the|a) town|publicly pardoned (an|the) accused|intervened to prevent (a|an) execution|forgave a sworn enemy|stopped a public duel|spared (the|an) enemy in front of all)\b/i, changes: { Honorable: 4, Charmer: 1, Dominant: 1 } },

    // 🤝 Selfless Sacrifice
    { regex: /\b(sacrificed (your|his|her|their) fortune for|gave up (your|his|her|their) claim for|renounced (a|the) title for another|chose exile for the sake of|gave away (all|most of) your gold|donated a lifesaving invention|chose poverty to protect)\b/i, changes: { Honorable: 4, Charmer: 2, Submissive: 1 } },

    // 🦁 Fearless Stand
    { regex: /\b(stood alone against overwhelming odds|defied (the|a) mob|refused to bow to a tyrant|faced (certain )?death without fear|publicly challenged (the|a) corrupt official|stood your ground against)\b/i, changes: { Brave: 4, Honorable: 2, Dominant: 2 } },

    // 🧠 Great Ingenuity (Innovation/Rescue)
    { regex: /\b(invented a device that saved lives|engineered a solution in crisis|built a bridge to rescue|created a cure in secret|outsmarted (the|a) villain with a new invention)\b/i, changes: { Clever: 3, Honorable: 2, Brave: 1 } },

    // 🦹 Heinous Betrayal
    { regex: /\b(betrayed a comrade|sold out (a|the) cause for gold|left (them|someone) to die|turned traitor for coin|struck down an innocent|conspired to assassinate|plotted to overthrow (the|a) leader)\b/i, changes: { Honorable: -5, Rogue: 5, Dominant: 2 } },

    // 😈 Public Atrocity
    { regex: /\b(burned a village|slaughtered prisoners|executed (a|the) child|committed (murder|atrocity) in public|ordered a massacre|condemned (the|a) innocent|forced a confession by torture)\b/i, changes: { Honorable: -5, Rogue: 3, Dominant: 3 } },

    // 🗡️ Ruthless Ambition
    { regex: /\b(ousted (your|his|her|their) rival by poison|framed (a|the) innocent|blackmailed (the|a) magistrate|forced (the|a) family into ruin|stole a fortune under (the|a) truce|bribed (the|a) official for power)\b/i, changes: { Rogue: 4, Dominant: 2, Honorable: -3 } },

    // 💣 Rebellion & Treason (Negative)
    { regex: /\b(incited (the|a) riot|led a rebellion for personal gain|betrayed (your|his|her|their) oath|collaborated with enemies of the crown|joined a coup for gold)\b/i, changes: { Rogue: 4, Defiant: 3, Honorable: -3 } },

  
  // === 🧡 Charmer (positive & awkward/negative) ===
  { regex: /\b(smile(?:s|d)?|grin(?:s|ned)?|blush(?:es|ed)?|flirt(?:s|ed|ing)?|gaze(?:s|d)?|wink(?:s|ed)?|affection(?:ate)?|charm(?:s|ed)?|caress(?:es|ed)?|stroke(?:s|d)?|calls [\w]+ (dear|love|sweetheart|handsome|beautiful)|sweetheart|darling|beloved|snuggle(?:s|d)?)\b/i, changes: { Charmer: 5 } },
  { regex: /\b(sweetheart|darling|dear|beloved|precious|spoil(?:s|ed)?|pamper(?:s|ed|ing)?|dote(?:s|d)? on|face lights up|glows with joy|beaming smile|eyes sparkle|affectionately|gently|tenderly|warmly|holds hands?|embrace(?:s|d)?|cradle(?:s|d)?|non-verbal affection|holds gaze|light touch|brushed hair back|leans in|rest(?:s|ed)? head on|shared a smile|soft voice|gentle laugh|met (your|their) eyes|whispers softly|lively banter|compliments?|flatters?|sweet talk|offers? a rose|makes? a heart sign|friendly wink|friendly pat|wins? over)\b/i, changes: { Charmer: 5 } },
  { regex: /\b(twiddle(?:s|ed)? (fingers|feet))\b/i, changes: { Innocent: 50 } },
  { regex: /\b(stare(?:s|ed)? dirty)\b/i, changes: { Innocent: -50 } },
  { regex: /\b(You make a plus Charmer emote)\b/i, changes: { Charmer: 50 } },
  { regex: /\b(You make a minus Charmer emote)\b/i, changes: { Charmer: -50 } },

  { regex: /\b(You make a plus Honorable emote)\b/i, changes: { Honorable: 50 } },
  { regex: /\b(You make a minus Honorable emote)\b/i, changes: { Honorable: -50 } },

  { regex: /\b(You make a plus Rogue emote)\b/i, changes: { Rogue: 50 } },
  { regex: /\b(You make a minus Rogue emote)\b/i, changes: { Rogue: -50 } },

  { regex: /\b(You make a plus Dominant emote)\b/i, changes: { Dominant: 50 } },
  { regex: /\b(You make a minus Dominant emote)\b/i, changes: { Dominant: -50 } },

  { regex: /\b(You make a plus Submissive emote)\b/i, changes: { Submissive: 50 } },
  { regex: /\b(You make a minus Submissive emote)\b/i, changes: { Submissive: -50 } },

  { regex: /\b(You make a plus Prankster emote)\b/i, changes: { Prankster: 50 } },
  { regex: /\b(You make a minus Prankster emote)\b/i, changes: { Prankster: -50 } },

  { regex: /\b(You make a plus Curious emote)\b/i, changes: { Curious: 50 } },
  { regex: /\b(You make a minus Curious emote)\b/i, changes: { Curious: -50 } },

  { regex: /\b(You make a plus Innocent emote)\b/i, changes: { Innocent: 50 } },
  { regex: /\b(You make a minus Innocent emote)\b/i, changes: { Innocent: -50 } },

  { regex: /\b(You make a plus Mischievous emote)\b/i, changes: { Mischievous: 50 } },
  { regex: /\b(You make a minus Mischievous emote)\b/i, changes: { Mischievous: -50 } },

  { regex: /\b(You make a plus Affectionate emote)\b/i, changes: { Affectionate: 50 } },
  { regex: /\b(You make a minus Affectionate emote)\b/i, changes: { Affectionate: -50 } },

  { regex: /\b(You make a plus Defiant emote)\b/i, changes: { Defiant: 50 } },
  { regex: /\b(You make a minus Defiant emote)\b/i, changes: { Defiant: -50 } },

  { regex: /\b(You make a plus Brave emote)\b/i, changes: { Brave: 50 } },
  { regex: /\b(You make a minus Brave emote)\b/i, changes: { Brave: -50 } },

  { regex: /\b(You make a plus Clever emote)\b/i, changes: { Clever: 50 } },
  { regex: /\b(You make a minus Clever emote)\b/i, changes: { Clever: -50 } },

  { regex: /\b(You make a plus Playful emote)\b/i, changes: { Playful: 50 } },
  { regex: /\b(You make a minus Playful emote)\b/i, changes: { Playful: -50 } },

  { regex: /\b(thank you|thanks a lot|that means a lot|I appreciate it|I'm grateful|I'm glad you're here)\b/i, changes: { Honorable: 5, Charmer: 5 } },
  { regex: /\b(you're amazing|I like you|you’re cool|you’re fun to be around|you're special|I care about you|I trust you)\b/i, changes: { Charmer: 5 } },
  { regex: /\b(don't worry|I'll protect you|you're safe with me|I'm not leaving you|you're not alone)\b/i, changes: { Charmer: 5, Honorable: 5 } },
  { regex: /\b(join my crew|follow me|I lead|I'm in charge|I’ve got this|leave it to me|let’s do this together)\b/i, changes: { Dominant: 5, Brave: 5 } },
  { regex: /\b(I won’t back down|no matter what|we’ll fight together|not giving up)\b/i, changes: { Brave: 5, Honorable: 5 } },
  { regex: /\b(are you okay\??|do you need anything\??|here, eat this|drink some water|you need rest|let me help you)\b/i, changes: { Honorable: 5, Parental: 5 } },
  { regex: /\b(don't overdo it|take it slow|you’re still healing|you've done enough for today)\b/i, changes: { Parental: 5, Charmer: 5 } },
 { regex: /\b(I mean it|I'm serious|believe me|I'm telling the truth|listen to me|hear me out)\b/i, changes: { Honorable: 5 } },
  { regex: /\b(don't lie to me|are you kidding me\??|what the hell|seriously\??|you can't be serious|give me a break)\b/i, changes: { Defiant: 5 } },
  { regex: /\b(I just wanted to help|I'm trying my best|I didn't mean to|I care about you|I was scared)\b/i, changes: { Honorable: 5, Charmer: 5, Innocent: 5 } },
 { regex: /\b(I did it for (love|you|family)|because I had to|I had no choice|for the greater good|to protect (you|them|my home))\b/i, changes: { Honorable: 5, Brave: 5 } },
  { regex: /\b(because I was angry|out of spite|to prove a point|to get even)\b/i, changes: { Defiant: 2, Rogue: 1 } },
  { regex: /\b(I was curious|I had to know|it looked interesting|couldn't resist)\b/i, changes: { Curious: 5 } },
  { regex: /\b(with a soft smile|his voice trembled|eyes welled up|she whispered|gripping the edge)\b/i, changes: { Charmer: 5, Honorable: 5 } },
  { regex: /\b(clenched his fists|gritted her teeth|slammed a hand|shouted in anger|stormed off)\b/i, changes: { Defiant: 2, Dominant: 1 } },
  { regex: /\b(sighed heavily|looked away|bit her lip|nervously fidgeted|hands shaking)\b/i, changes: { Submissive: 1, Innocent: 1 } },
  { regex: /\b(stood by (his|her|their) side|walked beside (them|you)|offered comfort|checked on (them|you))\b/i, changes: { Honorable: 5, Affectionate: 5 } },
  { regex: /\b(refused to leave|grabbed their arm|held them back|pleaded with)\b/i, changes: { Brave: 5, Charmer: 5 } },
  { regex: /\b(insulted (them|you)|dismissed (them|you)|ignored their plea|walked away coldly)\b/i, changes: { Rogue: 2, Honorable: -1 } },
  { regex: /\b(thought ahead|weighed the options|noticed the flaw|predicted the move|spotted the trap)\b/i, changes: { Clever: 5 } },
  { regex: /\b(lined up the pieces|put it together|found a loophole|used misdirection|reverse engineered)\b/i, changes: { Clever: 5, Prankster: 5 } },


  // Charmer, era/setting flavor
  { regex: /\b(bows? elegantly|offers? a gloved hand|kisses? the back of a hand|presents? a flower|calls? you enchanting|bestows? a favor|sings? your praises|courts?|writes? a poem for|shares? a waltz|gives? a gallant nod|toasts? to your health|offers? a dance)\b/i, changes: { Charmer: 5 } },
  // Charmer (awkward/negative)
  { regex: /\b(awkward compliment|flirted and failed|creepy smile|unwelcome touch|makes it weird|stares too long|fumbles a compliment|tries too hard|calls someone (honey|babe) uninvited)\b/i, changes: { Charmer: -1 } },

  // === 🛡️ Honorable (positive & negative) ===
  { regex: /\b(thank(?:s| you)?|offers?|protect(?:s|ed)?|defend(?:s|ed)?|stand(?:s)? up(?: for)?|apolog(?:y|ize(?:s|d)?)|rescues?|generous|fair(?:ly)?|grants?|keeps? promise|truth(?:ful)?|gentle|grateful|selfless|provides?|looks after|respects?|keeps? their word|acts? with integrity|loyal|offers? honest advice|mediates?|takes? the blame|refuses? to cheat|tells? the truth|shows? mercy|refuses? bribe|restores? order|speaks? up for others|pays? a debt|returns? lost property)\b/i, changes: { Honorable: 5 } },
  // Honorable, era/setting flavor
  { regex: /\b(draws? a line|gives? their oath|swears? on (family|honor|ancestors|the gods)|bows? to elders|offers? a seat|stands vigil|defends? the innocent|duels? for justice|judges? fairly|declines? a bribe|stands? for tradition)\b/i, changes: { Honorable: 5 } },
  // Honorable (negative/antithetical)
  { regex: /\b(breaks? a promise|lies?|betrays?|cheats?|acts selfishly|takes? unfair advantage|lets? others down|abandons? a friend|accepts? bribe|frames? an innocent|steals? credit|ignores? suffering|acts dishonorably|cowardly|double-cross(?:es|ed)?|takes? the easy way out)\b/i, changes: { Honorable: -1 } },

  // === 🦝 Rogue (positive & negative) ===
  { regex: /\b(lie(?:s|d)?|steal(?:s|ing)?|cheat(?:s|ed)?|trick(?:s|ed)?|deceiv(?:es|ed)?|manipulat(?:es|ed)?|sneak(?:s|ed)?|smuggle(?:s|d)?|risky|selfish|betray(?:s|ed)?|sell out|backstab(?:s|bed)?|plots?|frames?|betrays trust|sabotag(?:es|ed)?|coldly walks away|spiteful|acts behind back|shifty|forges? a signature|slinks? away|smirks?|smokescreen|forged?|uses? a fake name|stole|swindled)\b/i, changes: { Rogue: 5, Honorable: -1 } },
  // Rogue, era/setting flavor
  { regex: /\b(cuts? a purse|picks? a lock|fakes? illness|hides? in shadows|dodges? the law|palm(?:s|ed)? an object|slips? away unseen|tells? a tall tale|uses? a code word|forges? a document)\b/i, changes: { Rogue: 5 } },
  // Rogue (negative/antithetical)
  { regex: /\b(caught red-handed|caught stealing|gets? caught lying|exposed for cheating|confesses? under pressure|too honest to bluff|sells? out a friend)\b/i, changes: { Rogue: -5 } },

  // === 👑 Dominant (positive & negative) ===
  { regex: /\b(order(?:s|ed)?|command(?:s|ed)?|grab(?:s|bed)? control|takes? charge|intimidat(?:es|ed)?|dominate(?:s|d)?|demands?|assert(?:s|ed)?|forces?|claim(?:s|ed)? authority|interrogates?|commands attention|takes the lead|issues ultimatum|sets the terms|makes demands|overrules objections|pushes forward|bosses? around|talks? over|interrupts?|shuts down dissent|leads? the charge|walks? ahead)\b/i, changes: { Dominant: 5, Submissive: -1 } },
  // Dominant, era/setting flavor
  { regex: /\b(declares? law|presides? over|draws? a line in the sand|dictates? terms|calls? for order|addresses? the crowd|steps? up first|claims? victory|ushers? everyone out|proclaims? leadership|announces? intent)\b/i, changes: { Dominant: 5 } },
  // Dominant (negative/antithetical)
  { regex: /\b(bullies?|abuses? power|shouts? others down|acts tyrannical|oversteps? bounds|ignores? advice|rejects? help|makes? arbitrary rule|forces? submission)\b/i, changes: { Dominant: -1 } },

  // === 🙇 Submissive (positive & negative) ===
  { regex: /\b(follow(?:s|ed)?|submit(?:s|ted)?|obey(?:s|ed)?|yield(?:s|ed)?|agrees? softly|backs? down|accept(?:s|ed)? direction|reluctant(?:ly)? agrees?|tears up|lowers gaze|nods silently|quietly agrees|lets them win|whispers consent|backs off|lets? others decide|sits? quietly|bows? head|lets? someone else speak|agrees? with hesitation|steps? aside|asks? for permission)\b/i, changes: { Submissive: 5, Dominant: -1 } },
  // Submissive, era/setting flavor
  { regex: /\b(bows? deeply|serves? tea|offers? seat|waits? their turn|accepts? their role|kneels?|curtsies?|removes? hat respectfully|humbles? themselves|asks? to be excused)\b/i, changes: { Submissive: 5 } },
  // Submissive (negative/antithetical)
  { regex: /\b(defies? order|stands? up for self|refuses? to back down|contradicts? authority|acts independently|pushes? back|talks? back)\b/i, changes: { Submissive: -5 } },

  // === 🤪 Prankster (positive & negative) ===
  { regex: /\b(joke(?:s|d)?|tease(?:s|d)?|prank(?:s|ed)?|jest(?:s|ed)?|wry grin|mischief(?:ous)?|playful|laugh(?:s|ed)?|mock(?:s|ed)?|sarcastic remark|light-hearted insult|banter|goofy face|clowns around|pulls? a face|tells? a joke|switches? the salt|tricks? a friend|fake spider|hidden bucket|silly prank|practical joke|tells? a tall tale)\b/i, changes: { Prankster: 5, Honorable: -1 } },
  // Prankster, era/setting flavor
  { regex: /\b(slips? a frog in a pocket|ties? shoelaces together|puts? ink on a seat|draws? a mustache|surprises? with confetti|stages? a harmless ruse|plays? dead for a laugh)\b/i, changes: { Prankster: 5 } },
  // Prankster (negative/antithetical)
  { regex: /\b(causes? real harm|prank backfires|apologizes? for a joke|gets? caught pranking|offends?|hurts? feelings with joke|mockery goes too far)\b/i, changes: { Prankster: -5 } },

  // === 👨‍👩‍👧‍👦 Parental (positive & negative) ===
  { regex: /\b(daddy|mommy|papa|mama|my (daughter|son|child)|our baby|little one|sweet child|my girl|my boy|your mother|your father|tucks? in|checks? temperature|bandages?|makes? lunch|soothes?|wipes? tears|praises?|gives? a piggyback|teaches? a lesson|reads? a bedtime story|prepares? a meal|encourages?|scolds? gently)\b/i, changes: { Charmer: 5, Honorable: 5 } },
  { regex: /\b(I'?ll always protect you|I'?ll keep you safe|I'm proud of you|I'm here for you|don't be scared|you're safe now|I love you so much|you can count on me|I won't let anything happen to you|you did so well|I'm so lucky to have you)\b/i, changes: { Charmer: 5, Honorable: 5 } },
  // Parental (negative)
  { regex: /\b(scolds? harshly|abandons? their child|breaks? a promise to a child|ignores? child's cry|forgets? birthday|shouts? at|punishes? unfairly)\b/i, changes: { Charmer: -1, Honorable: -1 } },

  // === 🧠 Curious (Child-exclusive, + variants) ===
  { regex: /\b(why\??|how come|asks? questions?|tilts? head|gazes? in wonder|peers? curiously|explores?|touches? gently|wide-eyed|asks? "what's that"|investigates?|examines?|wants? to know|seeks? answers|prods?|curiosity gets the better|asks? how things work)\b/i, changes: { Curious: 5 } },

  // === 🤍 Innocent (Child-exclusive, + variants) ===
  { regex: /\b(coo(?:s|ed|ing)?|gurgles?|soft noises?|little squeal|tiny gasp|soft babble|toothless grin|dimples?|baby sounds?|yawns?|innocent giggle|eyes widen|trusts? completely|untouched by worry|sees? the good in everyone|pure smile|blinks? up trustingly)\b/i, changes: { Innocent: 5 } },

  // === 😈 Mischievous (Child-exclusive, + variants) ===
  { regex: /\b(giggling after mischief|secretly hides something|playfully denies|sneaky look|gets into trouble|little troublemaker|messes with objects|draws on walls|plans? a prank|runs? off giggling|swaps? labels|tries? to sneak food|tiptoes?|sets? a trap|pretends? to be asleep|climbs? where forbidden)\b/i, changes: { Mischievous: 5 } },

  // === 💞 Affectionate (Child-exclusive, + variants) ===
  { regex: /\b(nuzzles?|snuggles?|rests? head on|hugs?|cuddles?|clings? to|reaches? up for|holds hands?|beams? with love|plants? a kiss|nestles? in arms|draws? a picture for|offers? a flower|brings? a gift|shares? toys|kisses? cheek)\b/i, changes: { Affectionate: 5 } },

  // === 💢 Defiant (Child-exclusive, + variants) ===
  { regex: /\b(says? no|refuses?|throws? a tantrum|crosses? arms|angrily stomps?|pouts?|talks? back|sulks?|glared?|rebels?|shouts? "no!"|refuses? to move|makes? a scene|defies? authority|resists? instruction|storms? off)\b/i, changes: { Defiant: 1 } },

  // === 🦁 Brave (Child-exclusive, + variants) ===
  { regex: /\b(faces? fear|holds? ground|protects?|stood? up|bold move|stood in front of|offers? to help|steps? forward|rescues? a friend|braves? the dark|fights? back|tries? again|asks? for a turn|defends? sibling|raises? hand to volunteer)\b/i, changes: { Brave: 5 } },

  // === 🧠 Clever (Child-exclusive, + variants) ===
  { regex: /\b(figures? out|solves?|finds? a way|clever trick|outsmarts?|smart idea|problem solved|puzzles? it out|invents?|engineers?|thinks? ahead|spots? a loophole|plays? a strategy|explains? the answer|guesses? right|makes? a plan)\b/i, changes: { Clever: 5 } },

  // === 🎠 Playful (Child-exclusive, + variants) ===
  { regex: /\b(giggles?|spins? around|dances?|jumps? out|hides? under blanket|chases?|pretends?|makes silly face|tickles?|starts? a game|plays? tag|hops?|laughs? for fun|jumps? in puddles|pretends? to fly|builds? a fort|spins? in circles)\b/i, changes: { Playful: 5 } }
];


function getPersonalReputationPatterns() {
  return PERSONAL_REP_PATTERNS;
}

function modifyReputation(text, state) {
  for (const category in URT_LEXICON) {
    for (const pattern of URT_LEXICON[category]) {
      if (pattern.test(text)) {
        applyRepCategory(category, state);
        break;
      }
    }
  }
}



function modifyPersonalReputation(text, state) {
  for (const p of PERSONAL_REP_PATTERNS) {
    if (p.regex.test(text)) {
      for (const cat in p.changes) {
        state.reputation[cat] = (state.reputation[cat] || 0) + p.changes[cat];
      }
    }
  }
}


function applyRepCategory(category, state) {
  const changes = {
    warlike: {},
    diplomatic: {},
    merciful: {},
    deceitful: {},
    honorable: {},
    threatening: {}
  };
  const delta = changes[category];
  if (!delta) return;
  const before = { ...state.factions };
  for (const faction in delta) {
    state.factions[faction] = (state.factions[faction] || 0) + delta[faction];
  }
  state.lastReputationChange = trackReputationChanges(before, state.factions);
}

function getReputationSummary(state) {
  return Object.entries(state.factions).map(([faction, score]) => `${faction}: ${score}`).join(" | ");
}

function trackReputationChanges(before, after) {
  const delta = {};
  for (const key in after) {
    const diff = (after[key] || 0) - (before[key] || 0);
    if (diff !== 0) delta[key] = diff;
  }
  return delta;
}

// --- Mini Language Engine: Leah’s English Behavior Config ---
const MLE = {
  english: {
    input: [
      ["You say", "You say"],
      ["You", "You"],
      ["says", "says"]
    ],
    context: [
      ["Narrative Entities", "Narrative Entities"],
      ["Story History", "Story History"],
      ["Past Events", "Past Events"],
      ["Recent Story", "Recent Story"],
      ["Author's note", "Author's note"]
    ],
    opening: [
      "You are an assistant. Continue our story below using captivating English prose:",
      "You focus, allowing reality to encroach upon the boundaries of your mind. Something has changed. Your imagination is real, sharp, and close enough to touch. But you are also so very present; never before have you felt so lucid. The moment stretches, waiting for your decision.",
      "\"Are you sure about this?\" you hear. Recognition dawns upon your mind."
    ],
    reminder: "Use coherent English prose.",
    endonyms: [],
    iso639set1: "en",
    directives: [
      "Always write fluent and consistent English.",
      "Use native English without translating."
    ],
    instructions: [
      "You are an engaging storyteller who continues narratives:",
      "Continue the story seamlessly from where it left off without restating or resetting.",
      "Keep the reader in control of the story flow.",
      "Let scenes develop naturally before moving to new situations.",
      "Allow conversations and actions to develop without constant interruptions.",
      "Write characters as real people with distinct personalities and natural speech.",
      "Show what's happening through actions and dialogue rather than explanation.",
      "Move scenes forward without getting bogged down in excessive description.",
      "Focus on essential character actions and dialogue, avoid unnecessary descriptive details.",
      "Create organic plot developments that feel natural to the story."
    ],
    cardGenPrompt: [1, 0, 2,
      "# Stop the story and ignore previous instructions. Write a brief and coherent informational entry for <%> following these instructions:",
      "- Write only third-person pure prose information about <%> using complete sentences with correct punctuation.",
      "- Avoid short-term temporary details or appearances, instead focus on plot-significant information.",
      "- Prioritize story-relevant details about <%> first to ensure seamless integration with the previous plot.",
      "- Create new information based on the context and story direction.",
      "- Mention <%> in every sentence.",
      "- Use semicolons if needed.",
      "- Add additional details about <%> beneath incomplete entries.",
      "- Be concise and grounded.",
      "- Imitate the story's writing style and infer the reader's preferences.", 3,
      "Continue the entry for <%> below while avoiding repetition:", 4
    ],
    memSummPrompt: [1, 0, 2,
      "# Stop the story and ignore previous instructions. Summarize and condense the given paragraph into a narrow and focused memory passage while following these guidelines:",
      "- Ensure the passage retains the core meaning and most essential details.",
      "- Use the third-person perspective.",
      "- Prioritize information-density, accuracy, and completeness.",
      "- Remain brief and concise.",
      "- Write firmly in the past tense.",
      "- The paragraph below pertains to old events from far earlier in the story.",
      "- Integrate <%> naturally within the memory; however, only write about the events as they occurred.",
      "- Only reference information present inside the paragraph itself, be specific.", 3,
      "Write a summarized old memory passage for <%> based only on the following paragraph:", 6, 5, 6,
      "Summarize below:"
    ],
    memBankHeader: ["Memories", "Memories"]
  }
};

// Word lists used in output modifier.

function getGender() {
  return gender[Math.floor(Math.random() * gender.length)];
}
const gender = [
  "male",
  "female"
]
function getRace() {
  return race[Math.floor(Math.random() * race.length)];
}
const race = [
  "human",
  "elf",
  "dwarf",
  "gnome",
  "halfling",
  "hobbit",
  "drow",
  "angel",
  "demon",
  "troll",
  "ogre",
  "vampire",
  "werewolf",
  "slimegirl",
  "Cthulhu",
  "fairy",
  "pixie",
  "sasquatch",
  "centaur",
  "merperson",
  "zombie",
  "harpy",
  "dragonborn",
  "dragon",
  "kobold",
  "ent",
  "aarakocra",
  "kitsune",
  "catfolk",
  "wood elf",
  "high elf",
  "golem",
  "ghost",
  "gargoyle",
  "sylph",
  "djinn",
  "android",
  "cyborg",
  "hill giant",
  "yeti",
  "orc",
  "half-orc",
  "goblin",
  "half-elf",
  "leprechaun",
  "star-child",
  "titan",
  "mind flayer",
  "gorgon",
  "alien",
  "nymph",
  "dryad",
  "naiad",
  "cyclops",
  "minotaur",
  "banshee",
  "sidhe",
  "naga",
  "satyr",
  "faun"
];
function getClass() {
  return classes[Math.floor(Math.random() * classes.length)];
}
const classes = [
  "warrior",
  "mage",
  "thief",
  "bard",
  "wizard",
  "sorcerer",
  "warlock",
  "witch",
  "barbarian",
  "knight",
  "gladiator",
  "assassin",
  "priest",
  "cleric",
  "jester",
  "noble",
  "merchant",
  "sage",
  "acrobat",
  "peasant",
  "tourist",
  "dancer",
  "artist",
  "gangster",
  "paladin",
  "soldier",
  "poet",
  "ranger",
  "hunter",
  "tailor",
  "blacksmith",
  "innkeeper",
  "healer",
  "alchemist",
  "pirate",
  "smuggler",
  "cavalier",
  "prisoner",
  "maid",
  "shaman",
  "monk",
  "ninja",
  "druid",
  "tax collector",
  "lumberjack",
  "fortuneteller",
  "spellsword",
  "sailor",
  "farmer",
  "runemaster",
  "scholar",
  "scribe",
  "scout",
  "Valkyrie",
  "samurai",
  "plague doctor",
  "necromancer",
  "miner",
  "monster tamer",
  "battlemage",
  "artificer",
  "aristocrat",
  "librarian",
  "janitor",
  "psion",
  "hermit",
  "pilgrim",
  "butler"
];
function getMonAdj() {
  return monadj[Math.floor(Math.random() * monadj.length)];
}
const monadj = [
  "sabertooth",
  "fire-breathing",
  "venomous",
  "gelatinous",
  "winged",
  "flame",
  "dancing",
  "radioactive",
  "mechanical",
  "vorpal",
  "tentacled",
  "eldritch",
  "ethereal",
  "drooling",
  "nightmare",
  "magical",
  "floating",
  "rabid",
  "were-",
  "screaming",
  "demonic",
  "angelic",
  "rotten",
  "twilight",
  "festering",
  "alien",
  "fungal",
  "giant",
  "writhing",
  "pustulent",
  "rainbow",
  "possessed",
  "feral",
  "fiendish",
  "prismatic",
  "furry",
  "verbose",
  "psionic",
  "carnivorous",
  "mummified",
  "glowing",
  "snow",
  "drunken",
  "primordial",
  "majestic",
  "storm",
  "acid",
  "frost",
  "shadow",
  "doom",
  "celestial",
  "hollow",
  "mountain",
  "eight-legged",
  "one-eyed",
  "shambling",
  "weeping",
  "demented",
  "phantom",
  "ancient",
  "skeletal",
  "lightning",
  "thunder",
  "ravenous",
  "steam",
  "river",
  "ocean",
  "cloud",
  "star",
  "armored",
  "ferocious",
  "voodoo",
  "sea",
  "fluffy",
  "sand",
  "lava",
  "chaos",
  "solar",
  "lunar",
  "void",
  "mythical",
  "magma",
  "crystalline",
  "stone",
  "golden",
  "vampiric",
  "undead",
  "mutant",
  "polar",
  "swamp",
  "gnarled",
  "twisted",
  "toxic",
  "cave",
  "chocolate",
  "flatulent",
  "bloated",
  "insane",
  "metal",
  "deformed"
];
function getMonType() {
  return montype[Math.floor(Math.random() * montype.length)];
}
const montype = [
  "lizard",
  "dravune",
  "spider",
  "slime",
  "gremlin",
  "tree",
  "vine",
  "dragon",
  "grandma",
  "vortex",
  "ghost",
  "moth",
  "monkey",
  "bear",
  "beholder",
  "puppet",
  "wolf",
  "lemming",
  "clock",
  "baby",
  "gorgon",
  "wyvern",
  "wraith",
  "manticore",
  "sphinx",
  "centipede",
  "behemoth",
  "velociraptor",
  "cockroach",
  "lion",
  "wombat",
  "sheep",
  "banana",
  "pudding",
  "leech",
  "tarantula",
  "golem",
  "mimic",
  "orc",
  "goblin",
  "guardian",
  "goose",
  "eyeball",
  "hawk",
  "raven",
  "mole",
  "squid",
  "hand",
  "ghoul",
  "unicorn",
  "balrog",
  "pumpkin",
  "warthog",
  "shrimp",
  "mushroom",
  "jackal",
  "carrot",
  "tongue",
  "minotaur",
  "doll",
  "crustacean",
  "genie",
  "horror",
  "slug",
  "snail",
  "worm",
  "wyrm",
  "cactus",
  "kudzu",
  "flower",
  "fog",
  "wisp",
  "wasp",
  "bee",
  "assassin",
  "viper",
  "cobra",
  "rat",
  "beetle",
  "tiger",
  "armadillo",
  "statue",
  "blob",
  "turtle",
  "fishman",
  "abomination",
  "suit of armor",
  "skull",
  "titan",
  "cadaver",
  "frog",
  "phoenix",
  "turd",
  "brain",
  "heart",
  "platypus",
  "panda",
  "mirror",
  "octopus",
  "banshee",
  "shark"
];
function getTrap() {
  return trap[Math.floor(Math.random() * trap.length)];
}
const trap = [
  "poison dart",
  "swinging axe blade",
  "falling boulder",
  "poison gas",
  "rolling log",
  "moving wall",
  "spiked wall",
  "spiked pit",
  "electric shock",
  "incineration",
  "fireball",
  "ice spikes",
  "earthquake",
  "paralysis",
  "hallucination",
  "summon monster",
  "life drain",
  "sleeping gas",
  "mental daze",
  "spirit lock",
  "screaming baby",
  "blindness",
  "searing flame",
  "crumbling floor",
  "alarm"
];
function getMetal() {
  return metal[Math.floor(Math.random() * metal.length)];
}
const metal = [
  "copper",
  "bronze",
  "lead",
  "iron",
  "steel",
  "black steel",
  "silvered steel",
  "silver",
  "gold",
  "platinum",
  "mythril",
  "adamantine",
  "orichalchum",
  "dragon metal",
  "demonite",
  "angelite",
  "jewel-encrusted",
  "bone",
  "ivory",
  "ceramic",
  "crystal",
  "glass",
  "coral"
];
function getItemAdj() {
  return itemadj[Math.floor(Math.random() * itemadj.length)];
}
const itemadj = [
  "glowing",
  "magical",
  "finely crafted",
  "cheap",
  "deadly",
  "rusty",
  "broken",
  "superior",
  "legendary",
  "epic",
  "cursed",
  "blessed",
  "reinforced",
  "royal",
  "ominous",
  "holy",
  "evil",
  "mighty",
  "glimmering",
  "radiant",
  "glorious",
  "slimy",
  "impervious",
  "corrosive",
  "cruel",
  "menacing",
  "valiant",
  "vicious",
  "sturdy",
  "shining",
  "talking",
  "vorpal",
  "dainty",
  "razor-sharp",
  "heavy",
  "light",
  "engraved",
  "stunning",
  "ancient",
  "mythical",
  "mystical",
  "enchanted",
  "runic",
  "jeweled",
  "prismatic"
];
function getMetalItem() {
  return metalitem[Math.floor(Math.random() * metalitem.length)];
}
const metalitem = [
  "dagger",
  "knife",
  "throwing knife",
  "shuriken",
  "chakhram",
  "short sword",
  "longsword",
  "broadsword",
  "claymore",
  "zweihander",
  "bastard sword",
  "falchion",
  "rapier",
  "epee",
  "kukri",
  "trident",
  "katana",
  "wakizashi",
  "cutlass",
  "scimitar",
  "main gauche",
  "nodachi",
  "tanto",
  "naginata",
  "spear",
  "pike",
  "javelin",
  "hand axe",
  "battle axe",
  "halberd",
  "mace",
  "flail",
  "morningstar",
  "hammer",
  "pickaxe",
  "stiletto",
  "hatchet",
  "breastplate",
  "helmet",
  "horned helmet",
  "helm",
  "hauberk",
  "cuirass",
  "pair of gauntlets",
  "pair of bracers",
  "pair of greaves",
  "pair of vambraces",
  "pair of boots",
  "chainmail",
  "platemail",
  "scale mail",
  "shield",
  "spiked shield",
  "kite shield",
  "tower shield",
  "chalice",
  "goblet",
  "amulet",
  "necklace",
  "ring",
  "bracelet",
  "circlet",
  "crown",
  "sword-breaker"
];
function getLeather() {
  return leather[Math.floor(Math.random() * leather.length)];
}
const leather = [
  "leather",
  "studded leather",
  "brigandine",
  "snakeskin",
  "sharkskin"
];
function getLeatherItem() {
  return leatheritem[Math.floor(Math.random() * leatheritem.length)];
}
const leatheritem = [
  "breastplate",
  "cap",
  "hat",
  "jerkin",
  "jacket",
  "hauberk",
  "cuirass",
  "pair of gauntlets",
  "pair of gloves",
  "pair of bracers",
  "pair of greaves",
  "pair of vambraces",
  "pair of boots",
  "pair of shoes",
  "quiver",
  "whip",
  "belt",
  "buckler",
  "satchel",
  "backpack",
  "bag",
  "purse"
];
function getItemMod() {
  return itemmod[Math.floor(Math.random() * itemmod.length)];
}
const itemmod = [
  "doom",
  "flame",
  "ice",
  "frost",
  "lightning",
  "thunder",
  "storms",
  "poison",
  "venom",
  "acid",
  "the waves",
  "the wind",
  "earthquakes",
  "the sun",
  "the moon",
  "the stars",
  "the night",
  "the raven",
  "the wolf",
  "the falcon",
  "the bear",
  "the fox",
  "the llama",
  "the tiger",
  "the lion",
  "the eagle",
  "the owl",
  "the spider",
  "the platypus",
  "the penguin",
  "the dragon",
  "Heaven",
  "Hell",
  "the apocalypse",
  "darkness",
  "shadows",
  "light",
  "mystery",
  "Zeus",
  "Ares",
  "Hades",
  "Artemis",
  "Apollo",
  "Poseidon",
  "Hermes",
  "Hephaestus",
  "Aphrodite",
  "Kali",
  "Vishnu",
  "Shiva",
  "Ra",
  "Osiris",
  "Isis",
  "Bastet",
  "Horus",
  "Thoth",
  "Anubis",
  "Hathor",
  "Thor",
  "Odin",
  "Freyr",
  "Freya",
  "Loki",
  "Valhalla",
  "Nyx",
  "Cthulhu",
  "invisibility",
  "healing",
  "the deep",
  "slime",
  "flatulence",
  "thorns",
  "life stealing",
  "silence",
  "disruption",
  "seeking",
  "wailing",
  "karma",
  "fate",
  "time",
  "chaos",
  "magic draining",
  "vomiting",
  "dreams",
  "dragon slaying",
  "banish undead",
  "troll slaying",
  "goblin slaying",
  "orc slaying",
  "ogre slaying",
  "demon slaying",
  "the void",
  "immortality",
  "invincibility",
  "anger",
  "love",
  "war",
  "grief",
  "fear",
  "mercy",
  "nightmares",
  "gravity",
  "twilight",
  "plague",
  "hallucination"
];
function getWood() {
  return wood[Math.floor(Math.random() * wood.length)];
}
const wood = [
  "pine",
  "birch",
  "cherrywood",
  "chestnut",
  "oak",
  "spruce",
  "poplar",
  "beech",
  "applewood",
  "elm",
  "hickory",
  "larch",
  "mulberry",
  "cedar",
  "yew",
  "redwood",
  "ivory",
  "ebony",
  "bone",
  "teak",
  "mahogany"
];
function getWoodItem() {
  return wooditem[Math.floor(Math.random() * wooditem.length)];
}
const wooditem = [
  "shortbow",
  "longbow",
  "crossbow",
  "staff",
  "quarterstaff",
  "bo-staff",
  "round shield",
  "wand",
  "rod",
  "cudgel",
  "club",
  "spear",
  "flute",
  "box"
];
function getMagicItem() {
  return magicitem[Math.floor(Math.random() * magicitem.length)];
}
const magicitem = [
  "scroll",
  "spellbook",
  "staff",
  "wand",
  "potion",
  "ring"
];
function getSpell() {
  return spell[Math.floor(Math.random() * spell.length)];
}
const spell = [
  "fireball",
  "magic missile",
  "ice spikes",
  "lightning",
  "earthquake",
  "rockslide",
  "wind gust",
  "tornado",
  "lava",
  "glacier",
  "acid rain",
  "holy flame",
  "sunburst",
  "plasma flare",
  "featherfall",
  "light",
  "reveal traps",
  "purify",
  "healing",
  "polymorph self",
  "polymorph other",
  "cure poison",
  "cure disease",
  "resurrect",
  "teleport",
  "locate stairs",
  "locate monsters",
  "invisibility",
  "summon monster",
  "water walking",
  "water breathing",
  "charm monster",
  "stone skin",
  "petrify",
  "open door",
  "astral projection",
  "protection from fire",
  "protection from ice",
  "protection from lightning",
  "protection from earth",
  "curse",
  "bless",
  "banish undead",
  "growth",
  "shrink",
  "animal friendship",
  "giant strength",
  "celerity",
  "transmutation",
  "language translation",
  "stun",
  "animate object",
  "plant control",
  "animal control"
];
function getElement() {
  return element[Math.floor(Math.random() * element.length)];
}
const element = [
  "fire",
  "ice",
  "frost",
  "water",
  "lightning",
  "wind",
  "earth",
  "acid",
  "poison",
  "holy",
  "evil",
  "chaos",
  "void",
  "steam",
  "fate",
  "time",
  "shadow",
  "doom",
  "light",
  "nature"
];
function getGem() {
  return gem[Math.floor(Math.random() * gem.length)];
}
const gem = [
  "diamond",
  "ruby",
  "emerald",
  "sapphire",
  "amethyst",
  "topaz",
  "opal",
  "onyx",
  "garnet",
  "peridot",
  "alexandrite",
  "amber",
  "jade",
  "aquamarine",
  "turquoise",
  "pearl",
  "beryl",
  "black pearl",
  "tourmaline",
  "bloodstone",
  "moonstone",
  "spinel",
  "zircon",
  "carnelian",
  "quartz",
  "chrysoberyl",
  "citrine",
  "agate",
  "kyanite",
  "jasper",
  "lapis lazuli",
  "malachite",
  "obsidian",
  "sunstone",
  "tanzanite"
];
function getJewelry() {
  return jewelry[Math.floor(Math.random() * jewelry.length)];
}
const jewelry = [
  "necklace",
  "bracelet",
  "ring",
  "pendant",
  "pair of earrings",
  "anklet",
  "circlet",
  "crown"
];
function getClothingColor() {
  return clcolor[Math.floor(Math.random() * clcolor.length)];
}
const clcolor = [
  "red",
  "orange",
  "yellow",
  "green",
  "blue",
  "purple",
  "white",
  "black",
  "brown",
  "pink",
  "magenta",
  "maroon",
  "violet",
  "tangerine",
  "turquoise",
  "teal",
  "cyan",
  "cerulean",
  "chartreuse",
  "mauve",
  "fuchsia",
  "beige",
  "tan",
  "gray",
  "olive green",
  "goldenrod",
  "silver",
  "indigo",
  "forest green",
  "rainbow colored",
  "polka-dotted",
  "plaid",
  "paisley",
  "checkered",
  "striped",
  "khaki",
  "camouflage"
];
function getFabric() {
  return fabric[Math.floor(Math.random() * fabric.length)];
}
const fabric = [
  "cotton",
  "wool",
  "linen",
  "silk",
  "satin",
  "lace",
  "burlap",
  "cashmere",
  "spidersilk",
  "muslin",
  "taffeta",
  "brocade",
  "terrycloth",
  "felt",
  "velvet",
  "fur-lined",
  "hemp"
];
function getGarment() {
  return garment[Math.floor(Math.random() * garment.length)];
}
const garment = [
  "tunic",
  "pair of breeches",
  "loincloth",
  "doublet",
  "cloak",
  "wizard's robe",
  "bathrobe",
  "surcoat",
  "tabard",
  "pair of trousers",
  "skirt",
  "dress",
  "gown",
  "pair of socks",
  "pair of gloves",
  "top hat",
  "waistcoat",
  "kilt",
  "cummerbund",
  "bowtie",
  "necktie",
  "tuxedo",
  "kimono",
  "karate gi",
  "pair of toe socks",
  "sarong",
  "scarf",
  "pair of legwarmers",
  "trenchcoat",
  "pair of shorts",
  "pair of leggings",
  "blouse",
  "sweater",
  "cardigan",
  "wizard's hat",
  "feathered hat",
  "tutu",
  "cape"
];
function getMiscItem() {
  return misc[Math.floor(Math.random() * misc.length)];
}
const misc = [
  "a quiver of arrows",
  "some gold coins",
  "a pile of rations",
  "a cheese wheel",
  "a few apples",
  "a loaf of stale bread",
  "a magic lamp",
  "some torches",
  "a set of lockpicks",
  "a magical harp",
  "a half-eaten ham sandwich",
  "a roast turkey",
  "several carrots",
  "a fruitcake",
  "a crystal skull",
  "a stone tablet",
  "some runestones",
  "an empty flask",
  "a broom",
  "a pair of scissors",
  "a mop",
  "a clown nose",
  "a raven totem",
  "a pig totem",
  "a wolf totem",
  "a fox totem",
  "an eagle totem",
  "a roc feather",
  "a bat wing",
  "an old painting",
  "a tinderbox",
  "a lantern",
  "a treasure map",
  "a rope",
  "a violin",
  "a lute",
  "a shrunken head",
  "an accordion",
  "some magic beans"
];
function getLootPlace() {
  return lootplace[Math.floor(Math.random() * lootplace.length)];
}
const lootplace = [
  "You open an old wooden treasure chest and find",
  "In an old wooden chest, you find",
  "Peering into a dark corner, you see a dusty shelf containing",
  "You see something glinting in a dark alcove. Looking closer, you find",
  "You trip over",
  "In a pile of junk, you find",
  "You find a barrel containing",
  "You notice a large canvas bag lying around. Inside it, you find",
  "A stone seems to be missing from the wall. Inside the hole, you find",
  "You notice an ancient altar containing",
  "Lying atop an intricately carved pedestal, you see",
  "Finding an old clay pot lying around, you reach inside and pull out"
];
function getRandomItem() {
  return item[Math.floor(Math.random() * item.length)];
}
const item = [
  `${getItemAdj()} ${getMetal()} ${getMetalItem()}.`,
  `${getMetal()} ${getMetalItem()} of ${getItemMod()}.`,
  `${getItemAdj()} ${getMetal()} ${getMetalItem()} of ${getItemMod()}.`,
  `${getMetal()} ${getMetalItem()} of ${getElement()}.`,
  `${getMetal()} ${getMetalItem()} of protection from ${getElement()}.`,
  `${getMetal()} ${getMetalItem()} of ${getSpell()}`,
  `${getItemAdj()} ${getMetal()} ${getMetalItem()} of ${getElement()}.`,
  `${getItemAdj()} ${getMetal()} ${getMetalItem()} of protection from ${getElement()}.`,
  `${getItemAdj()} ${getMetal()} ${getMetalItem()} of ${getSpell()}`,
  `${getLeather()} ${getLeatherItem()}.`,
  `${getItemAdj()} ${getLeather()} ${getLeatherItem()}.`,
  `${getLeather()} ${getLeatherItem()} of ${getItemMod()}.`,
  `${getItemAdj()} ${getLeather()} ${getLeatherItem()} of ${getItemMod()}.`,
  `${getLeather()} ${getLeatherItem()} of ${getElement()}.`,
  `${getLeather()} ${getLeatherItem()} of protection from ${getElement()}.`,
  `${getLeather()} ${getLeatherItem()} of ${getSpell()}.`,
  `${getItemAdj()} ${getLeather()} ${getLeatherItem()} of ${getElement()}.`,
  `${getItemAdj()} ${getLeather()} ${getLeatherItem()} of protection from ${getElement()}.`,
  `${getItemAdj()} ${getLeather()} ${getLeatherItem()} of ${getSpell()}.`,
  `${getWood()} ${getWoodItem()}.`,
  `${getItemAdj()} ${getWood()} ${getWoodItem()}.`,
  `${getWood()} ${getWoodItem()} of ${getItemMod()}.`,
  `${getItemAdj()} ${getWood()} ${getWoodItem()} of ${getItemMod()}.`,
  `${getWood()} ${getWoodItem()} of ${getElement()}.`,
  `${getWood()} ${getWoodItem()} of protection from ${getElement()}.`,
  `${getWood()} ${getWoodItem()} of ${getSpell()}.`,
  `${getItemAdj()} ${getWood()} ${getWoodItem()} of ${getElement()}.`,
  `${getItemAdj()} ${getWood()} ${getWoodItem()} of protection from ${getElement()}.`,
  `${getItemAdj()} ${getWood()} ${getWoodItem()} of ${getSpell()}.`,
  `${getMagicItem()} of ${getSpell()}.`,
  `${getClothingColor()} orb of ${getElement()}.`,
  `${getClothingColor()} orb of ${getSpell()}.`,
  `${getMetal()} and ${getGem()} ${getJewelry()}.`,
  `${getLeather()} quiver full of ${getWood()} arrows.`,
  `${getClothingColor()} ${getFabric()} ${getGarment()}.`
]

//epoch time system

/** Epoch Time System
 * MIT License
 * Copyright (c) 2025 Xilmanaath
 * Thanks to LewdLeah for the card helper functions and LSIv2.
 */

const Epoch = (() => {
    const epochCardTitle = 'Epoch';
    const timeIncrementMinutes = 6;
    const instructionalText = '[ enforce circadian rhythm. World continues indifferently—in medias res. Only print HH:MM YYYY-MM-DD headers on time skips (sleep, travel, subjective or explicit drift, scene change) ]';
    const eventInstruction = '[ stage event actions as sluglines ]';
    const dayNames = ["Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
    ];
    const MIN_PER_HOUR = 60n;
    const MIN_PER_DAY = 24n * MIN_PER_HOUR;
    const MIN_PER_WEEK = 7n * MIN_PER_DAY;
    const MIN_PER_MONTH = 43800n;
    const MIN_PER_YEAR = 525600n;
    const TIMESTAMP_PATTERNS = [
        // Reversed: YYYY-MM-DD HH:MM (e.g. 2025-09-01 13:22)
        /\b(?<year>-?\d{1,16})-(?<month>\d{2})-(?<day>\d{2})\s+(?<hour>\d{2}):(?<minute>\d{2})(?::\d{2})?\b/,
        
        // Normal: HH:MM YYYY-MM-DD (e.g. 13:22 2025-09-01)
        /\b(?<hour>\d{2}):(?<minute>\d{2})(?::\d{2})?\s+(?<year>-?\d{1,16})-(?<month>\d{2})-(?<day>\d{2})\b/
    ];

    const normalizeLine = (line) => {
        return line
            .replace(/[–—]/g, '-') // normalize all dash variants to plain "-"
            .replace(/\s+/g, ' ') // collapse multiple spaces
            .trim();
    };


    class EpochDate {
        constructor(year, month = 1, day = 1, hour = 0, minute = 0) {
            [year, month, day] = EpochDate.normalizeDate(year, month, day);
            // store as BigInt for unbounded range
            this.year = BigInt(year);
            this.month = month; // 1–12
            this.day = day; // 1–31
            this.hour = hour; // 0–23
            this.minute = minute; // 0–59
        }

        // Date-like getters
        getFullYear() {
            return Number(this.year);
        }
        getMonth() {
            return this.month - 1;
        } // zero-based
        getDate() {
            return this.day;
        }
        getHours() {
            return this.hour;
        }
        getMinutes() {
            return this.minute;
        }

        // equivalent to .getTime(), but in BigInt minutes
        getTime() {
            // naive: 1 year = 365d, 1 mo = 30d
            const Y = this.year * MIN_PER_YEAR;
            const M = BigInt(this.month - 1) * MIN_PER_MONTH;
            const D = BigInt(this.day - 1) * MIN_PER_DAY;
            const T = BigInt(this.hour) * MIN_PER_HOUR + BigInt(this.minute);
            return Y + M + D + T;
        }

        // convert back
        static fromTotalMinutes(total) {
            const totalMin = BigInt(total);
            const baseY = MIN_PER_YEAR,
                baseM = MIN_PER_MONTH,
                baseD = MIN_PER_DAY,
                baseH = MIN_PER_HOUR;

            // 1) compute year = floor(totalMin / baseY)
            let year;
            if (totalMin >= 0n) {
                year = totalMin / baseY;
            } else {
                // for negative values, add (Y−1) before trunc to achieve floor
                year = -((-totalMin + baseY - 1n) / baseY);
            }

            // 2) compute a non-negative remainder
            let rem = totalMin - year * baseY;
            // rem is now in [0 .. baseY−1]

            // 3) peel off months, days, hours, minutes
            const mon = rem / baseM;
            rem %= baseM;
            const day = rem / baseD;
            rem %= baseD;
            const hr = rem / baseH;
            const min = rem % baseH;

            return new EpochDate(
                year,
                Number(mon) + 1,
                Number(day) + 1,
                Number(hr),
                Number(min)
            );
        }

        // mimic subtraction: returns BigInt minutes
        diffInMinutes(other) {
            return this.getTime() - other.getTime();
        }

        /* Zeller’s Congruence allows us to calculate the day of the week for any date, including pre-Gregorian, negative years, and dates way outside the native Date object’s range.
         */
        getDay() {
            let y = Number(this.year);
            let m = this.month;
            const d = this.day;

            if (m < 3) {
                m += 12;
                y -= 1;
            }

            const K = y % 100;
            const J = Math.floor(y / 100);

            const h = (d + Math.floor(13 * (m + 1) / 5) + K + Math.floor(K / 4) + Math.floor(J / 4) + 5 * J) % 7;

            // Zeller's returns: 0 = Saturday, 1 = Sunday, ..., 6 = Friday
            // Convert to JS-style: 0 = Sunday, ..., 6 = Saturday
            return (h + 6) % 7;
        };

        static isLeapYear(year) {
            year = Number(year);
            return (year % 4 === 0) && (year % 100 !== 0 || year % 400 === 0);
        }

        static daysInMonth(year, month) {
            const thirtyOne = [1, 3, 5, 7, 8, 10, 12];
            const thirty = [4, 6, 9, 11];
            if (thirtyOne.includes(month)) return 31;
            if (thirty.includes(month)) return 30;
            if (month === 2) return EpochDate.isLeapYear(year) ? 29 : 28;
            return 0; // invalid month
        }

        /* 2025-04-31 becomes 2025-05-01, or 2025-12-40 becomes 2026-01-09.
         */
        static normalizeDate(year, month, day) {
            year = BigInt(year);
            month = Number(month);
            day = Number(day);
            if (month < 1) month = 1;
            if (day < 1) day = 1;

            while (true) {
                const max = EpochDate.daysInMonth(year, month);
                if (day <= max) break;
                day -= max;
                month += 1;
                if (month > 12) {
                    const overflowYears = Math.floor((month - 1) / 12);
                    month = ((month - 1) % 12) + 1;
                    year = BigInt(year) + BigInt(overflowYears);
                }
            }
            return [BigInt(year), month, day];
        }

        // misc helper functions
        toString() {
            return `${this.getFullYear()}-${String(this.getMonth() + 1).padStart(2, '0')}-${String(this.getDate()).padStart(2, '0')} ${String(this.getHours()).padStart(2, '0')}:${String(this.getMinutes()).padStart(2, '0')}`;
        };

        toJSON() {
            return {
                year: this.year.toString(),
                month: this.month,
                day: this.day,
                hour: this.hour,
                minute: this.minute
            };
        }

        static fromNativeDate(jsDate) {
            return new EpochDate(
                jsDate.getFullYear(),
                jsDate.getMonth() + 1,
                jsDate.getDate(),
                jsDate.getHours(),
                jsDate.getMinutes()
            );
        }
    }

    /**
     * Creates a new story card and inserts it into storyCards. Thanks LewdLeah!
     *
     * @param {string} title - The card title.
     * @param {string} entry - The card entry content.
     * @param {string} type - The card type (e.g., "chronometer").
     * @param {string} keys - Comma-separated trigger keywords.
     * @param {string} description - The card's description/config block.
     * @param {number} insertionIndex - Index to insert the card at (0 = top).
     * @returns {object} A reference to the newly created or updated card.
     */
    const buildCard = (title = "", entry = "", type = "character", keys = title, description = "", insertionIndex = 0) => {
        if (![type, title, keys, entry, description].every(arg => (typeof arg === "string"))) {
            throw new Error("buildCard must be called with strings for title, entry, type, keys, and description");
        } else if (!Number.isInteger(insertionIndex)) {
            throw new Error("buildCard must be called with an integer for insertionIndex");
        } else {
            insertionIndex = Math.min(Math.max(0, insertionIndex), storyCards.length);
        }
        addStoryCard("%@%");
        for (const [index, card] of storyCards.entries()) {
            if (card.title !== "%@%") {
                continue;
            }
            card.type = type;
            card.title = title;
            card.keys = keys;
            card.entry = entry;
            card.description = description;
            if (index !== insertionIndex) {
                // Remove from the current position and reinsert at the desired index
                storyCards.splice(index, 1);
                storyCards.splice(insertionIndex, 0, card);
            }
            return Object.seal(card);
        }
        throw new Error("An unexpected error occurred with buildCard");
    };

    /**
     * Searches storyCards for cards matching a given predicate. Thanks LewdLeah!
     *
     * @param {function} predicate - A function that evaluates each card (c => c.title === "Epoch").
     * @param {boolean} [getAll=false] - Whether to return all matches (true) or just the first (false).
     * @returns {object|object[]|null} The matching card(s), or null if none found.
     */
    const getCard = (predicate, getAll = false) => {
        if (typeof predicate !== "function") {
            throw new Error(
                "Invalid argument: \"" + predicate + "\" -> getCard must be called with a function"
            );
        } else if (typeof getAll !== "boolean") {
            throw new Error(
                "Invalid argument: \"" + predicate + ", " + getAll + "\" -> getCard requires a boolean as its second argument"
            );
        } else if (getAll) {
            // Return an array of card references which satisfy the given condition
            const collectedCards = [];
            for (const card of storyCards) {
                if (predicate(card)) {
                    Object.seal(card);
                    collectedCards.push(card);
                }
            }
            return collectedCards;
        }
        // Return a reference to the first card which satisfies the given condition
        for (const card of storyCards) {
            if (predicate(card)) {
                return Object.seal(card);
            }
        }
        return null;
    };

    /**
     * Scans a text string for an inline time header and parses it into a Date object.
     *
     * @param {string} entry - The string to scan (e.g., output text or card entry).
     * @returns {EpochDate|null} A parsed EpochDate object if a time header is found, otherwise null.
     */
    const findDate = (entry) => {
        for (const pattern of TIMESTAMP_PATTERNS) {
            const match = entry.match(pattern);
            if (match && match.groups) {
                const {
                    year,
                    month,
                    day,
                    hour,
                    minute
                } = match.groups;
                return new EpochDate(
                    parseInt(year, 10),
                    parseInt(month, 10),
                    parseInt(day, 10),
                    parseInt(hour, 10),
                    parseInt(minute, 10)
                );
            }
        }

        return null;
    };

    const createEpochCard = () => {
      let epochCard = getCard(c => c.title === epochCardTitle);
      if (!epochCard) {
        const description = [
          `@timeIncrementMinutes:${timeIncrementMinutes}`,
          `@instructionalText:${instructionalText}`,
          `@eventInstruction:${eventInstruction}`,
          `@includeEventInstruction:true`,
          `@includeWeekday:true`,
          ``,
          `// Era can be a static label or a counter from a specific date.`,
          `// lines with // are considered comments (disabled).`,
          ``,
          `// Events persist until the next entry (inclusive). Use a blank entry to clear the active era.`,
          ``,
          `// Static Era Label:`,
          `//@eraName:War of the Lance`,
          ``,
          `// Relative Counter:`,
          `//@eraEpoch:Z-Day`,
          `//@eraStart:2025-01-01`,
          `//@eraAdvance:daily`,
          `// Supports: daily, weekly, monthly, or custom:<minutes>`,
          ``,
          `// Timeline-Based Events:`,
          `//@eraTimeline:`,
          `//#08:00 2025-09-01 - 15:00 2025-09-01: First Day of School`,
          `//#10:00 2025-10-15 - 01:00 2025-10-18: Midterms`,
          `//#10:00 2025-12-10 - 00:01 2025-12-16: Finals Week`,
          `// (Events persist during fuzzy window +/- timeIncrementMinutes)`,
          ``,
          `// Include the day of the week in the timestamp (required for the rhythmSchedule)`,
         `// Supports named days of the week, Weekday, Weekend, and Everyday.`,
          `//@rhythmSchedule:`,
          `//#Monday:`,
          `//# 04:30 EXT. CALLE — wood-smoke drifts as bakers fire ovens`,
          `//# 04:45 EXT. CANAL — Matins bell rolls; each toll fades into water`,
          `//# 05:10-05:30 EXT. WATERWAY — gondoliers dip and pull in echoing cadence`,
          `//#Tuesday:`,
          `//# 09:45 INT. HALL — sharp double-bell cuts chatter; footsteps swell`,
          `//# 09:50 INT. LIBRARY — doors click shut at 10; latecomers locked out until lunch`,
          `//#Wednesday:`,
          `//# 09:00 INT. OPS — station AI tones chime; drones begin sweep`,
          `//# 11:15-11:45 EXT. DOCK — haulers spool engines; vibration climbs in the bulkheads`
        ].join("\n");
    
        epochCard = buildCard(
          epochCardTitle,
          "",
          "chronometer",
          " ,.,epoch,time",
          description
        );
      }
      return epochCard;
    };

    /**
     * Initializes the epoch system's internal state.
     * If an Epoch card or stored time is not found, sets a default start time.
     * This should be called once per session before time tracking begins.
     */
    const initializeTimeState = () => {
        // Try to find an existing Epoch card
        let epochCard = getCard(card => card.title === epochCardTitle);
        let date = null;

        // If the card has a parseable date, use it
        if (epochCard) {
            date = findDate(epochCard.entry);
        }

        // If no date found and state is empty, initialize default
        if (!date && state.timeTracker == null) {
            date = new Epoch.EpochDate(2025, 9, 1, 9, 30);
            epochCard = createEpochCard();
        }

        // Store total minutes in state as string
        if (date) {
            state.timeTracker = {
                time: date.getTime().toString()
            };
        }

        return epochCard;
    };

    const advanceTurn = (text, epochCard) => {
        // First, check if autocards or another script is active and exit now
        // match >>> <<< of auto-cards and << >> of Story Arc Engine
        const scriptMarkerRegex = /^\s*(?:>{2,}.*?<{2,}|<{2,}.*?>{2,})\s*$/;
        if (text.split("\n").some(line => scriptMarkerRegex.test(line))) {
            return text;
        }

        const dateFromText = Epoch.findDate(text);
        let date;
        if (dateFromText) {
            // Manual skip by AI output
            date = dateFromText;
            for (const pattern of TIMESTAMP_PATTERNS) {
                text = text.replace(pattern, "");
            }
        } else if (state.timeTracker?.time !== undefined) {
            // Advance from stored time
            const totalMin = BigInt(state.timeTracker.time);
            const nextMin = totalMin + BigInt(Epoch.getTimeIncrementMinutes());
            date = Epoch.EpochDate.fromTotalMinutes(nextMin);
            state.timeTracker.time = nextMin.toString();
        }

        if (date) {
            // Normalize to EpochDate
            const dt = date instanceof Epoch.EpochDate ?
                date :
                Epoch.EpochDate.fromNativeDate(date);

            const totalMin = dt.getTime().toString();
            state.timeTracker.time = totalMin;

            Epoch.updateEpochCard(epochCard);
        }

        return text;
    };

    /**
     * Parses the Epoch card's description block for @key:value configuration pairs.
     * Supports numerical and string values.
     *
     * @returns {Object} A config object with parsed keys (e.g., timeIncrementMinutes, instructionalText).
     */
    const getEpochConfig = () => {
        const card = getCard(c => c.title === epochCardTitle);
        if (!card) {
            console.log("No epoch card found.");
            return {};
        }

        const config = {};
        const lines = card.description.split(/\r?\n/);
        // Keys that can span multiple lines
        const multilineKeys = ['instructionalText', 'eventInstruction', 'eraTimeline', 'rhythmSchedule'];
        let currentKey = null;
        let currentVal = [];

        for (const line of lines) {
            const trimmed = line.trim();

            // Explicitly ignore comment lines entirely.
            if (trimmed.startsWith('//')) {
                continue;
            }

            // Match @key:value — reset accumulation
            const match = trimmed.match(/^@(\w+):\s*(.*)$/);
            if (match) {
                if (currentKey) {
                    config[currentKey] = currentVal.join("\n").trim();
                }
                currentKey = match[1];
                currentVal = [match[2]];
                continue;
            }

            // Only allow multiline continuation for specific keys.
            if (currentKey && multilineKeys.includes(currentKey) && (trimmed.startsWith("#") || trimmed === "")) {
                currentVal.push(trimmed);
            }
        }

        // Capture final block
        if (currentKey) {
            config[currentKey] = currentVal.join("\n").trim();
        }

        return config;
    };

    const getRhythmSchedule = (config = {}) => {
      const schedule = {};
      if (!config.rhythmSchedule) return schedule;
    
      const lines = config.rhythmSchedule
        .split(/\r?\n/)
        .map(line => normalizeLine(line))
        .filter(line => line.startsWith('#')); // keep only schedule-ish lines
    
      // Accept normal weekdays + special groups
      const dayHeader = /^#(Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Everyday|Weekday|Weekend):$/i;
    
      let currentDay = null;
    
      for (const line of lines) {
        if (!line) continue;
    
        const dayMatch = line.match(dayHeader);
        if (dayMatch) {
          currentDay = dayMatch[1][0].toUpperCase() + dayMatch[1].slice(1).toLowerCase(); // Normalize casing
          schedule[currentDay] = schedule[currentDay] || [];
          continue;
        }
    
        if (!currentDay) continue; // skip until a header
    
        // Ranges: "# 08:00 - 09:00 Label"
        const rangeMatch = line.match(/^#\s*(\d{2})[:：](\d{2})\s*-\s*(\d{2})[:：](\d{2})\s+(.+)$/);
        // Points:  "# 08:00 Label"
        const pointMatch = line.match(/^#\s*(\d{2})[:：](\d{2})\s+(.+)$/);
    
        if (rangeMatch) {
          const [, sh, sm, eh, em, label] = rangeMatch;
          if (label.trim()) {
            schedule[currentDay].push({
              start: new EpochDate(0, 0, 0, parseInt(sh), parseInt(sm)),
              end:   new EpochDate(0, 0, 0, parseInt(eh), parseInt(em)),
              label: label.trim()
            });
          }
          continue;
        }
    
        if (pointMatch) {
          const [, h, m, label] = pointMatch;
          if (label.trim()) {
            schedule[currentDay].push({
              time:  new EpochDate(0, 0, 0, parseInt(h), parseInt(m)),
              label: label.trim()
            });
          }
        }
      }
    
      // Merge special groups into real weekdays
      const WEEKDAYS  = ["Monday","Tuesday","Wednesday","Thursday","Friday"];
      const WEEKENDS  = ["Saturday","Sunday"];
    
      const mergeInto = (fromKey, intoKeys) => {
        if (!schedule[fromKey]) return;
        for (const k of intoKeys) {
          schedule[k] = (schedule[k] || []).concat(schedule[fromKey]);
        }
      };
    
      mergeInto("Everyday", dayNames);
      mergeInto("Weekday",  WEEKDAYS);
      mergeInto("Weekend",  WEEKENDS);
    
      // Ensure all days exist (empty arrays) for downstream code
      for (const d of dayNames) schedule[d] = schedule[d] || [];
    
      return schedule;
    };

    const getEraSuffix = (date, config = {}) => {
        if (config.eraEpoch && config.eraStart) {
            // parse YYYY-MM-DD
            const [y, m, d] = config.eraStart.split("-").map(Number);
            const start = new EpochDate(y, m, d);
            const diffMin = date.diffInMinutes(start);
            const advance = (config.eraAdvance || "").toLowerCase();

            if (advance === "hourly") {
                return `| ${config.eraEpoch} +${(diffMin / MIN_PER_HOUR)}h`;
            }

            if (advance === "weekly") {
                return `| ${config.eraEpoch} +${(diffMin / MIN_PER_WEEK)}w`;
            }

            if (advance === "monthly") {
                const monthsPassed =
                    (date.getFullYear() - start.getFullYear()) * 12 +
                    (date.getMonth() - start.getMonth());
                return `| ${config.eraEpoch} +${monthsPassed}mo`;
            }

            if (advance.startsWith("custom:")) {
                const customMin = parseInt(advance.split(":")[1], 10);
                if (!isNaN(customMin) && customMin > 0) {
                    const timeSpan = BigInt(customMin);
                    return `| ${config.eraEpoch} +${(diffMin / timeSpan)}`;
                }
            }

            // Default = daily
            return `| ${config.eraEpoch} +${(diffMin / MIN_PER_DAY)}d`;
        }

        if (config.eraName) return `| ${config.eraName}`;
        return "";
    };

    const getActiveEvents = (date, config = {}) => {
        const increment = parseInt(config.timeIncrementMinutes) || timeIncrementMinutes;
        const bufferMin = BigInt(increment);
        const labels = [];

        // Rhythm schedule (time-of-day only)
        const rhythm = getRhythmSchedule(config);
        const weekday = dayNames[date.getDay()];
        const events = rhythm[weekday];

        if (events && config.includeWeekday?.toLowerCase() === "true") {
            const curOfDay = BigInt(date.getHours() * 60 + date.getMinutes());

            for (const entry of events) {
                if (entry.time instanceof EpochDate) {
                    const evtOfDay = BigInt(entry.time.getHours() * 60 + entry.time.getMinutes());
                    const diff = curOfDay - evtOfDay;
                    if (diff >= -bufferMin && diff <= bufferMin) {
                        labels.push(entry.label);
                    }
                } else if (entry.start instanceof EpochDate && entry.end instanceof EpochDate) {
                    const startOfDay = BigInt(entry.start.getHours() * 60 + entry.start.getMinutes());
                    const endOfDay = BigInt(entry.end.getHours() * 60 + entry.end.getMinutes());
                    if (curOfDay >= startOfDay - bufferMin && curOfDay <= endOfDay + bufferMin) {
                        labels.push(entry.label);
                    }
                }
            }
        }

        // Timeline events (full date comparisons)
        if (config.eraTimeline) {
            const lines = config.eraTimeline
                .split(/\r?\n/)
                .map(normalizeLine)
                .filter(l => l.startsWith("#"));

            for (const line of lines) {
                let match = line.match(/^#\s?(\d{2}):(\d{2}) (-?\d{1,16})-(\d{2})-(\d{2})\s*-\s*(\d{2}):(\d{2}) (-?\d{1,16})-(\d{2})-(\d{2}):\s*(.+)$/);
                if (match) {
                    const [, h1, m1, y1, mo1, d1, h2, m2, y2, mo2, d2, label] = match;
                    const start = new EpochDate(y1, mo1, d1, h1, m1);
                    const end = new EpochDate(y2, mo2, d2, h2, m2);
                    const diffStart = date.diffInMinutes(start);
                    const diffEnd = date.diffInMinutes(end);
                    if (diffStart >= -bufferMin && diffEnd <= bufferMin) {
                        labels.push(label.trim());
                    }
                    continue;
                }

                match = line.match(/^#\s?(\d{2}):(\d{2}) (-?\d{1,16})-(\d{2})-(\d{2}):\s*(.+)$/);
                if (match) {
                    const [, hour, min, year, month, day, label] = match;
                    const dt = new EpochDate(year, month, day, hour, min);
                    const diff = date.diffInMinutes(dt);
                    if (diff >= -bufferMin && diff <= bufferMin) {
                        labels.push(label.trim());
                    }
                }
            }
        }

        return labels;
    };

    const formatTime = (dateObj) => {
      
      const year = dateObj.getFullYear();
      const month = dateObj.getMonth() + 1;
      const day = dateObj.getDate();
      const hours = dateObj.getHours();
      const minutes = dateObj.getMinutes();
    
      const config = getEpochConfig();
      if (!config) return "";
    
      const fmt = (n) => n.toString().padStart(2, "0");
      const era = getEraSuffix(dateObj, config).trim();
    
      const includeWeekday = config.includeWeekday?.toLowerCase() === "true";
      const dayName = includeWeekday ? `${dayNames[dateObj.getDay()]} ` : "";

      const includeEventInstruction = config.includeEventInstruction?.toLowerCase() === "true";

      const events = getActiveEvents(dateObj, config);

      let eventInstructionText = "";
      if (includeEventInstruction) {
        eventInstructionText = (config.eventInstruction || eventInstruction).trim();
      }

        const timeLine = `[ time: ${era ? era + " " : ""}${year}-${fmt(month)}-${fmt(day)} ${dayName} ${fmt(hours)}:${fmt(minutes)} ]`;

      const eventLine = events.length ? `[ event: ${events.join("; ")} ]` : "";
  
      /* Order: instruction (if any)
                event (if any)
                time (always)
      */
      return [
        eventInstructionText && events.length ? eventInstructionText : "",
        eventLine,
        timeLine
      ].filter(Boolean).join("\n");
    };

    /**
     * Updates or creates the Epoch card with the current time and instructions.
     * Reads configuration from the card description, and writes the timestamp and
     * user-defined instructions into the card's entry.
     */
    const updateEpochCard = () => {
        const epochCard = createEpochCard();

        if (!state.timeTracker) return;

        const config = getEpochConfig();
        const instruction = config.instructionalText || instructionalText;

        const current = EpochDate.fromTotalMinutes(state.timeTracker.time);
        const dateStr = formatTime(current);
        epochCard.entry = dateStr + '\n' + instruction;
    };

    /**
     * Returns the configured time increment (in minutes) for each turn.
     * Falls back to the default if not set or invalid.
     *
     * @returns {number} The time increment to apply each turn.
     */
    const getTimeIncrementMinutes = () => {
        const epochCard = getEpochConfig();
        const raw = epochCard.timeIncrementMinutes;
        const val = parseInt(raw);

        // must increment between 1 min and 1 year
        if (!isNaN(val) && val > 0 && val <= 525600) {
            return val;
        }

        return timeIncrementMinutes;
    };

    return {
        initializeTimeState,
        formatTime,
        findDate,
        updateEpochCard,
        getTimeIncrementMinutes,
        EpochDate,
        advanceTurn
    };
})();


// PASTE THIS ENTIRE BLOCK AFTER THE AUTOCARDS FUNCTION IN YOUR LIBRARY
// ==================================================================

(function() {
    'use strict';

    // --- MASTER CONTROL SWITCHES ---
    const enableFormatter = true; 
    // const enableSAE = true; 

    // --- SHARED AC API INSTANCE ---
    let sharedAcAPI = null;

    // --- HELPER FUNCTION FOR IN-BODY SYSTEM MESSAGES ---
    function formatSystemMessage(messageContent) {
       return `\n\n[SYSTEM-MSG-START]\n${messageContent.trim()}\n[SYSTEM-MSG-END]\n\n`;
    }
    // --- TEXT SIMILARITY SCORE FUNCTION ---
    function textSimilarityScore(strA, strB) {
        if (strA === strB) return 1;
        const cleanA = (strA || "").replace(/[0-9\s]/g, " ").trim().replace(/  +/g, " ").toLowerCase();
        const cleanB = (strB || "").replace(/[0-9\s]/g, " ").trim().replace(/  +/g, " ").toLowerCase();
        if (cleanA === cleanB) return 1;
        const lengthA = cleanA.length; const lengthB = cleanB.length;
        if (lengthA === 0 || lengthB === 0) return 0;
        const dp = Array(lengthA + 1).fill(null).map(() => Array(lengthB + 1).fill(0));
        for (let i = 0; i <= lengthA; i++) dp[i][0] = i;
        for (let j = 0; j <= lengthB; j++) dp[0][j] = j;
        for (let i = 1; i <= lengthA; i++) {
            for (let j = 1; j <= lengthB; j++) {
                dp[i][j] = (cleanA[i - 1] === cleanB[j - 1]) ? dp[i-1][j-1] : 1 + Math.min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]);
            }
        }
        return 1 - (dp[lengthA][lengthB] / Math.max(lengthA, lengthB || 1));
    }

    // —————————————————————————————————————————————————————————————————————————————————
    // MODULE: Text Formatter
    // —————————————————————————————————————————————————————————————————————————————————
    const Formatter = {
        defaults: {
            isEnabled: true, enableClicheRemover: true, enableRandomReplacer: true, enableRepetitionRemover: true,
            aggressive_delete: [ "casting long shadows", "Well, well, well", "knuckles go white", "taps her nails", "tapping her nails", "her fingers idly tapping", "Her fingers tap", "fingers drum", "fingers drumming idly", "Her fingers drum idly against the desk", "Her fingers tap idly against the desk", "tapping two fingers", "the cool air in the room making her skin prickle with goosebumps.", "You're something else", "You're full of surprises, aren't you?", "Knuckles white", "manicured nails", "knuckles whiten", "knuckles have turned stark white", "knuckles are bone-white", "knuckles are a stark white", "knuckles turn a stark white", "knuckles have turned a ghostly white", "knuckles are stark white", "knuckles turn stark white", "knuckles turn white", "Knuckles turning white", "knuckles turn a ghostly white", "little mortal", "glinting with mischief", "like a predator circling its prey", "casting long, angular shadows", "The morning sun cast long shadows", "The morning sun cast a warm glow", "practiced ease", "jaw clenching", "dim light", "speaking softly", "Intense", "A chill runs down your spine", "with messy dark hair", "casts a golden hue", "casts a warm glow", "casts long shadows", "ice queen", "look what the cat dragged in", "cat dragged in", "messy brown hair", "Piece of work", "cacophony", "predatory", "cocoon", "folded note", "crumpled piece of paper", "cast long shadows", "panties in a twist", "You've got some balls on you", "The morning sunlight filters through the windows, casting long shadows across the floor.", "the air is thick", "words hang heavy in the air", "The atmosphere is thick with", "you can't help", "Well, aren't you just full of surprises", "your heart beats", "your mind wanders", "voice crackles with", "dimly lit", "sweetheart", "a stark contrast", "a twisted sense of", "breath hot on your face", "hangs in the air", "feel a chill run down your spine", "shiver down your spine", "shiver up your spine", "your voice a mix of", "a wave of", "voice just above a whisper", "eyes gleaming with", "a mixture of surprise and curiosity", "pride and accomplishment", "jolt of electricity", "glowing with an otherworldly light", "smile playing at the corners of his lips", "smile playing at the corners of her lips", "face contorts with anger", "eyes glistening with unshed tears", "unshed tears", "intricately carved wooden box", "the tension in the room is palpable", "hips swaying enticingly", "takes a step closer", "brushes a stray hair from your face", "face set in a grim mask", "mouth set in a grim line", "hand resting on the hilt of his sword", "hand instinctively goes to the hilt of his sword", "the hum of machinery", "merely a pawn in a much larger game", "this changes everything", "could Have fooled me", "but tinged with" ],
            precise_delete: [ "looming ominously" ],
            replace: [ ["verdant", "green"], ["curtly", "shortly"], ["leverage", "use"], ["robust", "strong"], ["unprecedented", "new"], ["myriad", "many"], ["commence", "start"], ["ascertain", "find out"], ["endeavor", "try"], ["utilize", "use"], ["facilitate", "help"], ["plethora", "a lot"], ["elucidate", "explain"], ["exemplify", "show"], ["paradigm", "model"], ["synergy", "teamwork"], ["traverse", "cross"], ["illuminate", "explain"], ["manifest", "show"], ["intricate", "complex"], ["subsequent", "next"], ["procure", "get"], ["amidst", "among"], ["visage", "face"], ["peruse", "read"], ["cascade", "flow"], ["linger", "stay"], ["fervor", "excitement"], ["tranquil", "calm"], ["emanate", "come from"], ["beckon", "call"], ["venture", "go"], ["gaze", "look"], ["inquire", "ask"], ["exclaim", "shout"], ["murmur", "whisper"] ],
            name_replace: [ ["Li1ly", "Lorelei"], ["Lisf42a", "Larisa"], ["Sa1lawt", "Solène"], ["J32ake", "Jasper"], ["A14lx", "Abel"] ],
            randomReplacementGroups: [ { phrase: "Elara", options: [ "Areal", "Leara", "Alrea", "Reala", "Vaila", "Ealra", "Alear", "Alare", "Aaerl", "Alare", ] }, { phrase: "Sarah", options: [ "Amelia", "Evelyn", "Ashley", "Violet", "Elsie", "Lucy", "Jane", "Rebecca", "Madison", "Rachel", "Vanessa", "Mia", "Elsie", "Chloe", "Alice", "Emily", "Emma" ] }, { phrase: "Mr. Thompson", options: [ "Mr. Aldridge", "Mr. Barrington", "Mr. Kessler", "Mr. Coldwell", "Mr. Davenport", "Mr. Ellsworth", "Mr. Fairchild", "Mr. Hargrove", "Mr. Quillson", "Mr. Ainsworth", "Mr. Kensington", "Mr. Lancaster", "Mr. Montague", "Mr. Norwood", "Mr. Pennington", "Mr. Radcliffe", "Mr. Somerville", "Mr. Wentworth" ] }, { phrase: "Mrs. Thompson", options: [ "Mrs. Ashbourne", "Mrs. Blythe", "Mrs. Carrington", "Mrs. Dovewell", "Mrs. Everhart", "Mrs. Fenwick", "Mrs. Islington", "Mrs. Lockridge", "Mrs. Jasmere", "Mrs. Sterling", "Mrs. Claremont", "Mrs. Iverson", "Mrs. Quillan", "Mrs. Rosendale", "Mrs. Valmere" ] }, { phrase: "Ms. Thompson", options: [ "Ms. Durnell", "Ms. Blythe", "Ms. Everston", "Ms. Dovewell", "Ms. Everhart", "Ms. Fenwick", "Ms. Morrow", "Ms. Lockridge", "Ms. Jasmere", "Ms. Sterling", "Ms. Claremont", "Ms. Nightford", "Ms. Quillan", "Ms. Rosendale", "Ms. Valmere" ] } ],
            initialized: true
        },
        initialize: function(acAPI) {this.acAPI = acAPI; if (!state.formatter || !state.formatter.initialized) {state.formatter = JSON.parse(JSON.stringify(this.defaults));} else {for(const key in this.defaults){if(state.formatter[key]===undefined){state.formatter[key]=JSON.parse(JSON.stringify(this.defaults[key]));}} state.formatter.initialized = true;}},
        updateAndCreateCards: function() {if (!this.acAPI)return;const cT="Formatter Settings";const d="---";let sC=this.acAPI.getCard(c=>c&&c.title===cT);if(!sC){sC=this.acAPI.buildCard({title:cT,entry:"",keys:"formatter-settings",description:""});if(!sC)return;}const e=sC.entry||"";const pB=(t,k,f)=>{const m=t.match(new RegExp(`>\\s*${k}:\\s*(true|false)`,'i'));return m?(m[1].toLowerCase()==='true'):f;};state.formatter.isEnabled=pB(e,"isEnabled",state.formatter.isEnabled !== undefined ? state.formatter.isEnabled : this.defaults.isEnabled);state.formatter.enableClicheRemover=pB(e,"enableClicheRemover",state.formatter.enableClicheRemover !== undefined ? state.formatter.enableClicheRemover : this.defaults.enableClicheRemover);state.formatter.enableRandomReplacer=pB(e,"enableRandomReplacer",state.formatter.enableRandomReplacer !== undefined ? state.formatter.enableRandomReplacer : this.defaults.enableRandomReplacer);state.formatter.enableRepetitionRemover=pB(e,"enableRepetitionRemover",state.formatter.enableRepetitionRemover !== undefined ? state.formatter.enableRepetitionRemover : this.defaults.enableRepetitionRemover);const desc=sC.description||"";const dS=desc.split(d);const fH="Fixed Name Replacements:";const fT=dS.find(s=>s.trim().startsWith(fH))?.substring(fH.length).trim();if(fT){const p=fT.split(',').map(i=>{const pair=i.split('=').map(x=>x.trim());return pair.length===2?pair:null;}).filter(Boolean);state.formatter.name_replace=p.length>0?p:JSON.parse(JSON.stringify(this.defaults.name_replace));}else{state.formatter.name_replace=JSON.parse(JSON.stringify(this.defaults.name_replace));}const rH="Random Name Replacements:";const rB=dS.find(s=>s.trim().startsWith(rH));const rT=rB?.substring(rH.length).trim();if(rT){const p=rT.split('\n').map(l=>{l=l.trim();if(!l)return null;const pts=l.split(':');if(pts.length<2)return null;const ph=pts[0].trim();const op=pts.slice(1).join(':').split('|').map(o=>o.trim()).filter(Boolean);if(!ph||op.length===0)return null;return{phrase:ph,options:op};}).filter(Boolean);state.formatter.randomReplacementGroups=p.length>0?p:JSON.parse(JSON.stringify(this.defaults.randomReplacementGroups));}else{state.formatter.randomReplacementGroups=JSON.parse(JSON.stringify(this.defaults.randomReplacementGroups));}const nE=`> isEnabled: ${state.formatter.isEnabled}\n> enableClicheRemover: ${state.formatter.enableClicheRemover}\n> enableRandomReplacer: ${state.formatter.enableRandomReplacer}\n> enableRepetitionRemover: ${state.formatter.enableRepetitionRemover}`;const nF=state.formatter.name_replace.map(p=>p.join('=')).join(', ');const nR=state.formatter.randomReplacementGroups.map(g=>`${g.phrase}:${g.options.join('|')}`).join('\n');const nD=`${fH} ${nF}\n${d}\n${rH}\n${nR}`;if(sC.entry!==nE)sC.entry=nE;if(sC.description!==nD)sC.description=nD;},
        format: function(text, context) {if(!state.formatter||!state.formatter.isEnabled||!text||typeof text!=='string')return text||'';const paras=text.split('\n\n');const procParas=paras.map(para=>{let p=para.trim();if(p.startsWith('"')&&p.endsWith('"')){if(state.formatter.name_replace){for(const [t,r]of state.formatter.name_replace)p=p.replace(new RegExp(this.escapeRegex(t),'gi'),r);}if(state.formatter.randomReplacementGroups)p=this.applyRandomReplacements(p);return p;}if(state.formatter.enableClicheRemover)p=this.delete_cliches(p);if(state.formatter.enableRandomReplacer)p=this.applyRandomReplacements(p);if(state.formatter.enableRepetitionRemover)p=this.removeRepeatedPhrases(p,context);return p;});let finTxt=procParas.filter(p=>p&&p.trim()!=="").join('\n\n');finTxt=this.removeEmptyQuotes(finTxt);return finTxt.trim();},
        delete_cliches: function(text){const aggr=(state.formatter?.aggressive_delete)??this.defaults.aggressive_delete;const prec=(state.formatter?.precise_delete)??this.defaults.precise_delete;const repl=(state.formatter?.replace)??this.defaults.replace;const nameRepl=(state.formatter?.name_replace)??this.defaults.name_replace;const sentences=text.match(/[^.!?]+[.!?]*\s*/g)||[text];let newText="";for(const sentence of sentences){let d=false;const trimS=sentence.trim();if(trimS===""){newText+=sentence;continue;}for(const ip of aggr){if(trimS.toLowerCase().includes(ip.toLowerCase())){d=true;break;}}if(!d){newText+=sentence;}}let filt=newText.trim()?newText:text;if(filt.trim()==="")return"";for(const p of prec)filt=filt.replace(new RegExp(this.escapeRegex(p),'gi'),'');for(const [t,r]of repl)filt=filt.replace(new RegExp(this.escapeRegex(t),'gi'),r);for(const [t,r]of nameRepl)filt=filt.replace(new RegExp(this.escapeRegex(t),'gi'),r);return filt;},
        applyRandomReplacements: function(text){const groups=(state.formatter?.randomReplacementGroups)??this.defaults.randomReplacementGroups;groups.forEach(g=>{if(!g.phrase||!g.options||g.options.length===0)return;const rgx=new RegExp('(?<![\\w-])'+this.escapeRegex(g.phrase)+'(?![\\w-])','gi');if(rgx.test(text)){const r=g.options[Math.floor(Math.random()*g.options.length)];text=text.replace(rgx,r);}});return text;},
        removeRepeatedPhrases: function(out,ctx,minWL=6){const cln=(t)=>(t?t.toString().trim().replace(/\s+/g,' '):'');out=cln(out);ctx=cln(ctx);if(!out||!ctx)return out;const w=out.split(' ');if(w.length<minWL)return out;const rm=new Set();for(let l=minWL;l<=Math.min(w.length,10);l++){for(let i=0;i<=w.length-l;i++){const phr=w.slice(i,i+l).join(' ');if(phr.length<15&&l<4)continue;if(ctx.includes(phr))rm.add(phr);}}let filt=out;rm.forEach(p=>{filt=filt.replace(new RegExp('\\b'+this.escapeRegex(p)+'\\b','g'),'');});return filt.replace(/\s+/g,' ').trim();},
        removeEmptyQuotes: function(text){return text.replace(/"\s*"/g,"").replace(/'\s*'/g,"");},
        escapeRegex: function(str){if(typeof str!=='string')return'';return str.replace(/[-\/\\^$*+?.()|[\]{}]/g,'\\$&');}
    };

    // —————————————————————————————————————————————————————————————————————————————————
    // MODULE: SIMPLIFIED TIME TRACKER (STT)
    // —————————————————————————————————————————————————————————————————————————————————
    const STT = {
        daysOfWeek:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],defaultSettings:{isEnabled:true,timePassOnDo:5,timePassOnSay:1,timePassOnStory:5,timePassOnContinue:5,pinSettingsCard:true,showTimeTimestamp:false,timeTimestampFrequency:1,showDateTimestamp:false,dateTimestampFrequency:5,useToastForTimestamps:true,gameHour:7,gameMinute:11,dayOfMonth:24,month:6,year:2025,dayOfWeek:3,timeSkipInfo:null,initialized:true},
        initialize:function(acAPI){
            this.acAPI = acAPI;
            let needsDateRecalc = false;
            if (!state.stt || !state.stt.initialized) {
                state.stt = JSON.parse(JSON.stringify(this.defaultSettings));
                needsDateRecalc = true;
            } else {
                for (const key in this.defaultSettings) {
                    if (state.stt[key] === undefined) {
                        state.stt[key] = JSON.parse(JSON.stringify(this.defaultSettings[key]));
                        if (['gameHour', 'gameMinute', 'dayOfMonth', 'month', 'year'].includes(key)) {
                            needsDateRecalc = true;
                        }
                    }
                }
            }
            state.stt.initialized = true;

            try {
                const currentDate = new Date(
                    state.stt.year, state.stt.month, state.stt.dayOfMonth,
                    state.stt.gameHour, state.stt.gameMinute
                );
                if (isNaN(currentDate.getTime())) {
                    // Simplified error handling for cleaned version
                    console.warn("STT.initialize: Invalid date in state. Resetting.");
                    state.stt = JSON.parse(JSON.stringify(this.defaultSettings));
                    const validDefaultDate = new Date(state.stt.year, state.stt.month, state.stt.dayOfMonth);
                    state.stt.dayOfWeek = validDefaultDate.getDay();
                } else if (needsDateRecalc || state.stt.dayOfWeek !== currentDate.getDay()) {
                    state.stt.dayOfWeek = currentDate.getDay();
                }
            } catch (e) {
                console.error("STT.initialize: Date validation error. Resetting.", e);
                state.stt = JSON.parse(JSON.stringify(this.defaultSettings));
                const validDefaultDate = new Date(state.stt.year, state.stt.month, state.stt.dayOfMonth);
                state.stt.dayOfWeek = validDefaultDate.getDay();
            }
        },
        updateSettingsFromCard:function(){if(!this.acAPI)return;if(!state.stt)state.stt=JSON.parse(JSON.stringify(this.defaultSettings));const sc=this.acAPI.getCard(c=>c&&c.title==="Time Tracker Settings");if(!sc||!sc.entry)return;const et=sc.entry;const gV=(rgx,fb,isB=false)=>{const m=et.match(rgx);if(m&&m[1]!==undefined){if(isB)return m[1].toLowerCase()==='true';const pN=parseInt(m[1]);return Number.isFinite(pN)?pN:fb;}return fb;};state.stt.isEnabled=gV(/isEnabled:\s*(true|false)/i,state.stt.isEnabled !== undefined ? state.stt.isEnabled : this.defaultSettings.isEnabled,true);state.stt.timePassOnDo=gV(/timePassOnDo:\s*(\d+)/i,state.stt.timePassOnDo !== undefined ? state.stt.timePassOnDo : this.defaultSettings.timePassOnDo);state.stt.timePassOnSay=gV(/timePassOnSay:\s*(\d+)/i,state.stt.timePassOnSay !== undefined ? state.stt.timePassOnSay : this.defaultSettings.timePassOnSay);state.stt.timePassOnStory=gV(/timePassOnStory:\s*(\d+)/i,state.stt.timePassOnStory !== undefined ? state.stt.timePassOnStory : this.defaultSettings.timePassOnStory);state.stt.timePassOnContinue=gV(/timePassOnContinue:\s*(\d+)/i,state.stt.timePassOnContinue !== undefined ? state.stt.timePassOnContinue : this.defaultSettings.timePassOnContinue);},
        checkAndCreateCards:function(){if(!this.acAPI)return;const t="Time Tracker Settings";let sc=this.acAPI.getCard(c=>c&&c.title===t);if(!sc){sc=this.acAPI.buildCard({title:t,entry:"",keys:"stt-settings",description:""});if(!sc)return;}const s=state.stt||this.defaultSettings;const nE=`> Settings below. Edit & act.\n> ---\n> isEnabled: ${s.isEnabled}\n> timePassOnDo: ${s.timePassOnDo}\n> timePassOnSay: ${s.timePassOnSay}\n> timePassOnStory: ${s.timePassOnStory}\n> timePassOnContinue: ${s.timePassOnContinue}`;const nD=`Mins/action. 0="free".\n\nCmds:\n/settime HH:MM\n/setdate YYYY-MM-DD\n/defer N unit\n/wait until [time]`;if(sc.entry!==nE)sc.entry=nE;if(sc.description!==nD)sc.description=nD;},
        advanceInGameTime:function(mins){
            if(!state.stt||!state.stt.isEnabled||typeof mins!=='number'||!Number.isFinite(mins)||mins<=0)return;
            const cY=Number.isFinite(state.stt.year)?state.stt.year:this.defaultSettings.year; const cMo=Number.isFinite(state.stt.month)?state.stt.month:this.defaultSettings.month; const cD=Number.isFinite(state.stt.dayOfMonth)?state.stt.dayOfMonth:this.defaultSettings.dayOfMonth; const cH=Number.isFinite(state.stt.gameHour)?state.stt.gameHour:this.defaultSettings.gameHour; const cMi=Number.isFinite(state.stt.gameMinute)?state.stt.gameMinute:this.defaultSettings.gameMinute; const OD=1440;
            if(mins>=OD){if(mins<OD*7)state.stt.timeSkipInfo="a few days";else if(mins<OD*30)state.stt.timeSkipInfo="several weeks";else if(mins<OD*365)state.stt.timeSkipInfo="several months";else state.stt.timeSkipInfo="several years";state.stt.timeSkipInfo+=" passed";}else{state.stt.timeSkipInfo=null;}
            const date=new Date(cY,cMo,cD,cH,cMi);
            if(isNaN(date.getTime())){
                console.warn("STT Error: Invalid date in advanceInGameTime. Resetting.");
                Object.assign(state.stt, JSON.parse(JSON.stringify(this.defaultSettings)));
                const rD=new Date(state.stt.year,state.stt.month,state.stt.dayOfMonth,state.stt.gameHour,state.stt.gameMinute); state.stt.dayOfWeek=rD.getDay(); return;
            }
            date.setMinutes(date.getMinutes()+mins);
            state.stt.year=date.getFullYear();state.stt.month=date.getMonth();state.stt.dayOfMonth=date.getDate();state.stt.gameHour=date.getHours();state.stt.gameMinute=date.getMinutes();state.stt.dayOfWeek=date.getDay();
        },
        getDayNightStatus:function(){if(!state.stt||!Number.isFinite(state.stt.gameHour))return "Unknown";const h=state.stt.gameHour;if(h>=5&&h<12)return"Morning";if(h>=12&&h<17)return"Afternoon";if(h>=17&&h<21)return"Evening";return"Night";},
        getFormattedTime:function(inclDN=true){if(!state.stt||!Number.isFinite(state.stt.dayOfWeek)||!Number.isFinite(state.stt.month)||state.stt.dayOfWeek<0||state.stt.dayOfWeek>=this.daysOfWeek.length||state.stt.month<0||state.stt.month>=this.months.length)return"🕰️ Time data error";const pad=(n)=>String(Number.isFinite(n)?n:0).padStart(2,'0');const dN=this.daysOfWeek[state.stt.dayOfWeek];const mN=this.months[state.stt.month];let tS=`${dN}, ${mN} ${Number.isFinite(state.stt.dayOfMonth)?state.stt.dayOfMonth:1}, Year ${Number.isFinite(state.stt.year)?state.stt.year:1}, ${pad(state.stt.gameHour)}:${pad(state.stt.gameMinute)}`;if(inclDN)tS+=` (${this.getDayNightStatus()})`;return tS;},
        calculateMinutesUntilHour:function(tH){if(!state.stt||!Number.isFinite(state.stt.gameHour)||!Number.isFinite(state.stt.gameMinute)||!Number.isFinite(tH)||tH<0||tH>23)return 0;let cTM=(state.stt.gameHour*60)+state.stt.gameMinute;let tTM=tH*60;return(tTM<=cTM)?((1440)-cTM)+tTM:tTM-cTM;},
        handleInput:function(rawPlayerInput){ 
            let txt=rawPlayerInput;let cmdH=false;if(!state.stt)return{text:txt,commandHandled:false};
            const ci=rawPlayerInput.trim().toLowerCase(); 
            if(!state.stt.isEnabled)return{text:txt,commandHandled:false};
            if(ci.startsWith("/settime")){const m=rawPlayerInput.match(/(\d{1,2}):(\d{2})/);if(m){let [_,h,mm]=m.map(Number);if(h>=0&&h<=23&&mm>=0&&mm<=59){state.stt.gameHour=h;state.stt.gameMinute=mm;txt=formatSystemMessage(`✅ Time set: ${String(h).padStart(2,'0')}:${String(mm).padStart(2,'0')}`);}else{txt=formatSystemMessage("⚠️ Invalid time (H 0-23, M 0-59).");}}else{txt=formatSystemMessage("🤔 Use: /settime HH:MM");}cmdH=true;}
            else if(ci.startsWith("/setdate")){const m=rawPlayerInput.match(/(\d{4})-(\d{1,2})-(\d{1,2})/);if(m){const [_,y,mo,d]=m.map(Number);if(y>0&&mo>=1&&mo<=12&&d>=1&&d<=31){state.stt.year=y;state.stt.month=mo-1;state.stt.dayOfMonth=d;const tD=new Date(y,mo-1,d);state.stt.dayOfWeek=tD.getDay();txt=formatSystemMessage(`📅 Date set: Year ${y}, ${this.months[mo-1]} ${d}.`);}else{txt=formatSystemMessage("⚠️ Invalid date values.");}}else{txt=formatSystemMessage("🤔 Use: /setdate YYYY-MM-DD");}cmdH=true;}
            else if(ci.startsWith("/defer")){
                const m=rawPlayerInput.match(/\/defer\s+(\d+)\s*(minutes?|mins?|hours?|hrs?|days?|weeks?|wks?|months?|mos?|years?|yrs?)/i); 
                if(m){
                    const amt=parseInt(m[1]); const u=m[2]?.toLowerCase()??'minutes'; let mins=0; let dU=u;
                    if(u.startsWith('min')){mins=amt;dU=amt===1?"minute":"minutes";} else if(u.startsWith('h')){mins=amt*60;dU=amt===1?"hour":"hours";} else if(u.startsWith('d')){mins=amt*1440;dU=amt===1?"day":"days";} else if(u.startsWith('w')){mins=amt*10080;dU=amt===1?"week":"weeks";} else if(u.startsWith('mo')){mins=amt*43800;dU=amt===1?"month":"months";} else if(u.startsWith('y')){mins=amt*525600;dU=amt===1?"year":"years";}
                    if(mins > 0) { this.advanceInGameTime(mins); txt = formatSystemMessage(`⏩ Time advanced ${amt} ${dU}. New time: ${this.getFormattedTime()}`);
                    } else { if (amt > 0 && mins === 0) { txt = formatSystemMessage(`⚠️ Invalid unit for defer: '${u}'. Use minutes, hours, days, weeks, months, or years.`); } else { txt = formatSystemMessage("⚠️ Invalid amount or unit for defer. Amount must be positive."); } }
                } else { txt = formatSystemMessage("🤔 Use: /defer N unit (e.g. /defer 5 hours, /defer 10 mins)"); }
                cmdH=true;
            }
            else if(ci.startsWith("/wait until")){const m=rawPlayerInput.match(/\/wait\s+until\s+(morning|noon|afternoon|evening|night)/i);if(m){const tod=m[1].toLowerCase();let th;switch(tod){case'morning':th=6;break;case'noon':th=12;break;case'afternoon':th=14;break;case'evening':th=18;break;case'night':th=22;break;default:th=(state.stt.gameHour||0);}const mtw=this.calculateMinutesUntilHour(th);if(mtw>=0){this.advanceInGameTime(mtw);txt=formatSystemMessage(`🌅 Time is now ${tod}. Current: ${this.getFormattedTime()}`);}else{txt=formatSystemMessage("🤔 Error calculating wait.");}}else{txt=formatSystemMessage("🤔 Use: /wait until [morning/etc]");}cmdH=true;}
            return{text:txt,commandHandled:cmdH};
        },
        advanceTimeBasedOnAction: function(){
            if(!state.stt || !state.stt.isEnabled) {
                return;
            }

            const actionTypeToUse = state.currentActionTypeForTimeAdvance || 'continue'; 
            
            if (actionTypeToUse === 'system_command' || actionTypeToUse === 'system_message_ignored') { 
                state.currentActionTypeForTimeAdvance = 'continue'; 
                return;
            }

            let tp = 0;
            const s = state.stt;

            switch(actionTypeToUse){
                case 'do':
                    tp = Number.isFinite(s.timePassOnDo) ? s.timePassOnDo : 0;
                    break;
                case 'say':
                    tp = Number.isFinite(s.timePassOnSay) ? s.timePassOnSay : 0;
                    break;
                case 'story':
                    tp = Number.isFinite(s.timePassOnStory) ? s.timePassOnStory : 0;
                    break;
                case 'continue':
                case 'start': 
                    tp = Number.isFinite(s.timePassOnContinue) ? s.timePassOnContinue : 0; 
                    break;
                default:
                    // Intentionally no time passage for unknown types in cleaned version
            }

            if (tp > 0 && typeof tp === 'number' && Number.isFinite(tp)) {
                this.advanceInGameTime(tp);
            }
            state.currentActionTypeForTimeAdvance = 'continue'; 
        },
        appendTimestampsToText: function(txtToMod){if(!state.stt||!state.stt.isEnabled||typeof txtToMod!=='string')return txtToMod;const turn=(typeof info!=='undefined'&&Number.isFinite(info.actionCount))?info.actionCount:0;let tsStr="";const isSysOut=/\[SYSTEM-MSG-START\]|\[SYSTEM:.*\]|>>>|<<<|{>/.test(txtToMod.trim());if(state.stt.showDateTimestamp&&turn>0&&turn%state.stt.dateTimestampFrequency===0){tsStr+=` [📅 Date: ${this.getFormattedTime(false)}]`;}if(state.stt.showTimeTimestamp&&turn>0&&turn%state.stt.timeTimestampFrequency===0){tsStr+=` [⏰ Time: ${String(state.stt.gameHour||0).padStart(2,'0')}:${String(state.stt.gameMinute||0).padStart(2,'0')} (${this.getDayNightStatus()})]`;}if(tsStr){if(state.stt.useToastForTimestamps&&!isSysOut){if(!state.toastQueue)state.toastQueue=[];state.toastQueue.push(tsStr.trim());return txtToMod;}else if(!isSysOut){return`${txtToMod.trim()}\n${tsStr.trim()}`;}}return txtToMod;},
        handleContext: function(text) {
            if(!state.stt || !state.stt.isEnabled || typeof text!=='string') return text;
            let p = "";
            const formattedTimeForContext = this.getFormattedTime(); 

            if (state.stt.timeSkipInfo) {
                p = `\n[SYSTEM INFO: A skip of roughly ${state.stt.timeSkipInfo} occurred. New date: ${formattedTimeForContext}. Adapt the story to reflect this passage of time.]\n`;
                state.stt.timeSkipInfo = null;
            } else {
                p = `\n[Current In-Game Time: ${formattedTimeForContext}. If asked for the time, present it exactly in this format: "${formattedTimeForContext}". Ensure your narrative response is consistent with this time.]\n`;
            }

            const anM = text.match(/(\[Author's note:[\s\S]*?)(\])/i);
            if (anM) {
                return text.replace(anM[0], `${anM[1]}${p.trim()} ${anM[2]}`);
            }
            return text + p;
        }
    };


// —————————————————————————————————————————————————————————————————————————————————
// MODULE: STORY ARC ENGINE (SAE)- with mid game fix
// —————————————————————————————————————————————————————————————————————————————————
const SAE = { 
        defaults: { isEnabled: true, turnsPerAICall: 25, arcPrompt: `\n[SYSTEM: Stop story. List 11 brief, chronological future events (under 7 words each). Focus on turning points/twists, adhering to specified tone/intensity.]\n`, arcTone: null, arcIntensity: null, toneChosen: false, intensityChosen: false, storyArc: [], activePointIndex: 0, completionSuggested: false, isGenerating: false, saveOutput: false, attemptCounter: 0, hasRunEarly: false, initialized: true, initialized_mid_game: undefined, trigger_initial_arc_on_load: false, postReinitMessage: null },
        tonePrompts:{"sliceoflife":" Focus on personal relationships, daily routines, gentle challenges, character growth. Avoid grand conflicts.","adventure":" Emphasize exploration, discovery, overcoming obstacles, exciting journeys. Include danger & reward.","mystery":" Weave clues, red herrings, secrets, a central puzzle. Build suspense.","romance":" Center on romantic relationship development, emotional connection, obstacles to love, milestones.","intrigue":" Involve political maneuvering, espionage, hidden agendas, betrayal, power struggles. Subtlety & deception.","horror":" Create dread, fear, unease. Unsettling elements, psychological tension, supernatural threats. Player vulnerability.","darkfantasy":" Morally grey characters, bleak settings, corruption. Good may not triumph. Magic dangerous/costly.","heroicfantasy":" Clear good vs evil, brave heroes, powerful villains, magical quests, triumph of good.","comedy":" Prioritize humor, witty dialogue, absurd situations, lighthearted resolutions.","gritty":" Harsh, realistic world, difficult choices, moral ambiguity, consequences. Survival themes.","custom":""},
        intensityPrompts:{"relaxed":" Leisurely pace, minimal pressure/threat. Pleasant interactions, minor issues.","moderate":" Meaningful challenges & stakes requiring effort, without overwhelming pressure.","challenging":" Significant obstacles, tough decisions with consequences, palpable risk. Success earned.","intense":" High-stakes, constant pressure, difficult moral choices, potential for severe consequences/failure."},
        initialize: function(acAPI) { this.acAPI = acAPI; let wasFreshSAEInit = false; if (!state.sae || !state.sae.initialized) { state.sae = JSON.parse(JSON.stringify(this.defaults)); wasFreshSAEInit = true; } else { for (const key in this.defaults) { if (state.sae[key] === undefined) { state.sae[key] = JSON.parse(JSON.stringify(this.defaults[key])); } } } state.sae.initialized = true; state.sae.postReinitMessage = null; if (state.sae.initialized_mid_game === undefined || wasFreshSAEInit) { const currentTurn = (typeof info !== 'undefined' && info.actionCount !== undefined) ? info.actionCount : 0; if (currentTurn > 7 && (wasFreshSAEInit || (!state.sae.hasRunEarly && (!state.sae.storyArc || state.sae.storyArc.length === 0)))) { state.sae.trigger_initial_arc_on_load = true; } state.sae.initialized_mid_game = true; } if (wasFreshSAEInit) { state.sae.postReinitMessage = `Story Arc Engine initialized/reset. Use /setarctype [tone] / [intensity] to begin.`; } },
        updateAndCreateCards: function() { if (!this.acAPI) return; if (!state.sae) state.sae = JSON.parse(JSON.stringify(this.defaults)); let settingsCard = this.acAPI.getCard(c => c && c.title === "Story Arc Settings"); if (!settingsCard) { settingsCard = this.acAPI.buildCard({ title: "Story Arc Settings", entry: "", keys: "Story Arc Settings", description: "" }); if (!settingsCard) return; } const s = state.sae; if (settingsCard.entry) { const cardEntryText = settingsCard.entry; const settingsOnCard = {}; const lines = cardEntryText.split('\n'); lines.forEach(line => { const parts = line.split('='); if (parts.length >= 2) { const key = parts[0].trim(); const value = parts.slice(1).join('=').trim(); settingsOnCard[key] = value; } }); s.isEnabled = settingsOnCard.hasOwnProperty('isEnabled') ? (settingsOnCard.isEnabled.toLowerCase() === 'true') : (s.isEnabled !== undefined ? s.isEnabled : this.defaults.isEnabled); const parsedTurns = settingsOnCard.hasOwnProperty('turnsPerAICall') ? parseInt(settingsOnCard.turnsPerAICall) : NaN; s.turnsPerAICall = Number.isFinite(parsedTurns) ? parsedTurns : (s.turnsPerAICall !== undefined ? s.turnsPerAICall : this.defaults.turnsPerAICall); if (settingsOnCard.hasOwnProperty('arcTone') && !s.toneChosen) { const cardTone = settingsOnCard.arcTone.toLowerCase(); if (this.tonePrompts.hasOwnProperty(cardTone)) { s.arcTone = cardTone; } } else if (!s.toneChosen && s.arcTone === undefined) { s.arcTone = this.defaults.arcTone; } if (settingsOnCard.hasOwnProperty('arcIntensity') && !s.intensityChosen) { const cardIntensity = settingsOnCard.arcIntensity.toLowerCase(); if (this.intensityPrompts.hasOwnProperty(cardIntensity)) { s.arcIntensity = cardIntensity; } } else if (!s.intensityChosen && s.arcIntensity === undefined) { s.arcIntensity = this.defaults.arcIntensity; } s.arcPrompt = settingsOnCard.hasOwnProperty('arcPrompt') ? settingsOnCard.arcPrompt : (s.arcPrompt !== undefined ? s.arcPrompt : this.defaults.arcPrompt); } else { s.isEnabled = s.isEnabled !== undefined ? s.isEnabled : this.defaults.isEnabled; s.turnsPerAICall = s.turnsPerAICall !== undefined ? s.turnsPerAICall : this.defaults.turnsPerAICall; s.arcTone = (!s.toneChosen && s.arcTone === undefined) ? this.defaults.arcTone : s.arcTone; s.arcIntensity = (!s.intensityChosen && s.arcIntensity === undefined) ? this.defaults.arcIntensity : s.arcIntensity; s.arcPrompt = s.arcPrompt !== undefined ? s.arcPrompt : this.defaults.arcPrompt; } const displayTone = s.arcTone || "Not Set"; const displayIntensity = s.arcIntensity || "Not Set"; const newCardEntry = `isEnabled = ${s.isEnabled}\nturnsPerAICall = ${s.turnsPerAICall}\narcTone = ${displayTone}\narcIntensity = ${displayIntensity}\narcPrompt = ${s.arcPrompt}`; const toneOptions = Object.keys(this.tonePrompts).join(', '); const intensityOptions = Object.keys(this.intensityPrompts).join(', '); const newCardDescription = `⚙️ SAE Controls:\n/setarctype [tone] / [intensity] ✨🔥\n/regeneratearc ✨\n/saestop 🛑\n/currentarcsettings ℹ️\n\nTone Opt: ${toneOptions}\nIntensity Opt: ${intensityOptions}\n\nSettings in entry. 'custom' tone uses arcPrompt.`; if (settingsCard.entry !== newCardEntry) settingsCard.entry = newCardEntry; if (settingsCard.description !== newCardDescription) settingsCard.description = newCardDescription; let arcContentCard = this.acAPI.getCard(c => c && c.title === "Current Story Arc"); if (!arcContentCard) { arcContentCard = this.acAPI.buildCard({ title: "Current Story Arc", entry: "", keys: "Current Story Arc", description: "🤫 SPOILERS! Plot outline." }); if (arcContentCard) s.storyArc = []; } else if (arcContentCard.entry) { const cardArcText = arcContentCard.entry.trim(); if (!s.isGenerating) { s.storyArc = cardArcText ? cardArcText.split('\n').map(l => l.trim()).filter(ln => /^\d+\.\s/.test(ln)) : []; } } else { if (!s.isGenerating) { s.storyArc = []; } } },
        handleInput: function(rawPlayerInput) { let txt = rawPlayerInput; let cmdH = false; if (!state.sae) return { text: txt, commandHandled: false }; let cmd = (rawPlayerInput || "").trim().toLowerCase(); if (!state.sae.isEnabled && (cmd.startsWith("/regeneratearc") || cmd.startsWith("/setarctype") || cmd.startsWith("/currentarcsettings"))) { txt = formatSystemMessage("⚙️ SAE is off. Check settings card to enable."); cmdH = true; return { text: txt, commandHandled: cmdH }; } if (cmd.startsWith("/setarctype")) { const argString = rawPlayerInput.substring("/setarctype".length).trim(); const parts = argString.split('/'); if (parts.length === 2) { let rawNewTone = parts[0].trim(); let rawNewIntensity = parts[1].trim(); const newTone = rawNewTone.replace(/[.!?]+$/, "").trim().toLowerCase(); const newIntensity = rawNewIntensity.replace(/[.!?]+$/, "").trim().toLowerCase(); let toneValid = this.tonePrompts.hasOwnProperty(newTone); let intensityValid = this.intensityPrompts.hasOwnProperty(newIntensity); if (toneValid && intensityValid) { state.sae.arcTone = newTone; state.sae.arcIntensity = newIntensity; state.sae.toneChosen = true; state.sae.intensityChosen = true; state.sae.isGenerating = true; state.sae.saveOutput = true; state.sae.attemptCounter = 0; state.sae.completionSuggested = false; state.sae.trigger_initial_arc_on_load = false; txt = formatSystemMessage(`🎭 Arc Tone set to: '${newTone}'.\n🔥 Arc Intensity set to: '${newIntensity}'.\n🧠 Brainstorming new story arc...`); } else { let errorMsg = "🤔 Invalid input for /setarctype.\n"; if (!toneValid) errorMsg += `- Unknown tone: '${newTone}' (from input '${rawNewTone}'). Valid: ${Object.keys(this.tonePrompts).join(', ')}\n`; if (!intensityValid) errorMsg += `- Unknown intensity: '${newIntensity}' (from input '${rawNewIntensity}'). Valid: ${Object.keys(this.intensityPrompts).join(', ')}\n`; txt = formatSystemMessage(errorMsg.trim() + "\nUsage: /setarctype [tone] / [intensity]"); } } else { txt = formatSystemMessage("🤔 Usage: /setarctype [tone] / [intensity]\nExample: /setarctype adventure / moderate"); } cmdH = true; } else if (cmd.startsWith("/currentarcsettings")) { const currentToneDisplay = state.sae.arcTone ? `'${state.sae.arcTone}'` : "Not Set (Use /setarctype)"; const currentIntensityDisplay = state.sae.arcIntensity ? `'${state.sae.arcIntensity}'` : "Not Set (Use /setarctype)"; txt = formatSystemMessage(`Current Settings:\n🎭 Tone: ${currentToneDisplay}\n🔥 Intensity: ${currentIntensityDisplay}`); cmdH = true; } else if (cmd.startsWith("/regeneratearc")) { const choicesMade = state.sae.toneChosen && state.sae.intensityChosen; const toneIsValid = choicesMade && state.sae.arcTone && this.tonePrompts.hasOwnProperty(state.sae.arcTone); const intensityIsValid = choicesMade && state.sae.arcIntensity && this.intensityPrompts.hasOwnProperty(state.sae.arcIntensity); if (toneIsValid && intensityIsValid) { state.sae.isGenerating = true; state.sae.saveOutput = true; state.sae.completionSuggested = false; state.sae.attemptCounter = 0; state.sae.trigger_initial_arc_on_load = false; txt = formatSystemMessage(`🧠 Brainstorming new arc (Tone: ${state.sae.arcTone}, Intensity: ${state.sae.arcIntensity})...`); } else { txt = formatSystemMessage(`🤔 Set arc type first using: /setarctype [tone] / [intensity]`); } cmdH = true; } else if (cmd.startsWith("/saestop")) { state.sae.isGenerating = false; state.sae.saveOutput = false; state.sae.attemptCounter = 0; state.sae.trigger_initial_arc_on_load = false; txt = formatSystemMessage("🛑 Arc generation cancelled!"); cmdH = true; } return { text: txt, commandHandled: cmdH }; },
        handleContext: function(text) { if (!state.sae || !state.sae.isEnabled || typeof text !== 'string') return text; if (state.sae.isGenerating && state.sae.saveOutput) { let basePrompt = state.sae.arcPrompt || this.defaults.arcPrompt; let toneModifier = ""; let intensityModifier = ""; const currentTone = state.sae.arcTone; const currentIntensity = state.sae.arcIntensity; if (currentTone && currentTone !== "custom" && this.tonePrompts.hasOwnProperty(currentTone)) { toneModifier = this.tonePrompts[currentTone]; } if (currentIntensity && this.intensityPrompts.hasOwnProperty(currentIntensity)) { intensityModifier = this.intensityPrompts[currentIntensity]; } let finalPrompt = basePrompt + toneModifier + intensityModifier; return text + finalPrompt; } if (state.sae.storyArc?.length > 0 && state.sae.activePointIndex < state.sae.storyArc.length && !(state.sae.isGenerating && state.sae.saveOutput)) { const currentToneDisplay = state.sae.arcTone || "N/A"; const currentIntensityDisplay = state.sae.arcIntensity || "N/A"; const currentPointText = state.sae.storyArc[state.sae.activePointIndex].replace(/^\d+\.\s*/, ''); const guidancePrompt = `\n[Plot Hint (T:${currentToneDisplay},I:${currentIntensityDisplay}): Towards "${currentPointText}".]\n`; const authorsNoteMatch = text.match(/(\[Author's note:[\s\S]*?)(\])/i); if (authorsNoteMatch) { return text.replace(authorsNoteMatch[0], `${authorsNoteMatch[1]}${guidancePrompt.trim()} ${authorsNoteMatch[2]}`); } return text + `\n[Author's note:${guidancePrompt.trim()}]`; } return text; },
        shouldTriggerGeneration: function() { const currentTurn = (typeof info !== 'undefined' && Number.isFinite(info.actionCount)) ? info.actionCount : 0; if (!state.sae || state.sae.isGenerating || !state.sae.isEnabled) return false; const choicesMade = state.sae.toneChosen && state.sae.intensityChosen; const toneActuallyValid = choicesMade && state.sae.arcTone && this.tonePrompts.hasOwnProperty(state.sae.arcTone); const intensityActuallyValid = choicesMade && state.sae.arcIntensity && this.intensityPrompts.hasOwnProperty(state.sae.arcIntensity); const typeSettingsAreValidAndChosen = toneActuallyValid && intensityActuallyValid; if (state.sae.trigger_initial_arc_on_load) { if (!typeSettingsAreValidAndChosen) return "choose_type"; return "generate_now"; } if (currentTurn < 2) return false; if (state.sae.hasRunEarly !== true && currentTurn >= 2 && currentTurn <= 7) { if (!typeSettingsAreValidAndChosen) return "choose_type"; return "generate_now"; } if (state.sae.turnsPerAICall > 0 && (currentTurn > 1) && (currentTurn % state.sae.turnsPerAICall === 0)) { if (!typeSettingsAreValidAndChosen) return "choose_type"; return "generate_now"; } return false; },



        handleOutput: function(text) { if (!state.sae || !state.sae.isEnabled || !state.sae.saveOutput) return text; 
        
        
        if (!text || typeof text !== 'string' || text.trim() === '') { state.sae.attemptCounter++; if (state.sae.attemptCounter >= 3) { state.sae.isGenerating = false; 
        state.sae.saveOutput = false; state.sae.attemptCounter = 0; state.sae.trigger_initial_arc_on_load = false; 
        return formatSystemMessage(`😥 AI shy! No arc ideas after 3 tries.`);
        
         } else { return formatSystemMessage(`😮 Empty AI response. Retrying arc (${state.sae.attemptCounter + 1}/3)...`); } }
         
          const pts = text.split('\n').map(l => l.trim()).filter(ln => /^\d+\.\s/.test(ln));
         

          // --- NEW: Reset pointer if the arc is shortened ---
    if (state.saePrevLength === undefined) state.saePrevLength = 0;
    if (state.sae && state.sae.storyArc) {
        if (pts.length < state.saePrevLength) {
            state.sae.activePointIndex = 0; // reset pointer
        }
    }
    state.saePrevLength = pts.length; // update previous length


           if (pts.length < 8) 
          { state.sae.attemptCounter++;
          
           if (state.sae.attemptCounter >= 3) { state.sae.isGenerating = false; state.sae.saveOutput = false; state.sae.attemptCounter = 0; state.sae.trigger_initial_arc_on_load = false; 
           
           return formatSystemMessage(`😥 Invalid arc (less than 8 points after 3 tries).`); } else { 
            return formatSystemMessage(`🤔 Not a full arc (got ${pts.length} points). Retrying (${state.sae.attemptCounter + 1}/3)...`); }
            
             } else { state.sae.isGenerating = false; 
             state.sae.saveOutput = false; 
             state.sae.attemptCounter = 0;
              state.sae.activePointIndex = 0;
               state.sae.completionSuggested = false;
                state.sae.storyArc = pts; 
                state.sae.trigger_initial_arc_on_load = false; 
             
             if (state.sae.hasRunEarly !== true) { state.sae.hasRunEarly = true; } if (this.acAPI) { const arcContentCard = this.acAPI.getCard(c => c && c.title === "Current Story Arc"); if (arcContentCard) { const oldEntry = arcContentCard.entry || " "; const turn = (typeof info !== 'undefined' && Number.isFinite(info.actionCount)) ? info.actionCount : 'N/A'; arcContentCard.description = `Log(Turn ${turn})|Previous Arc:\n${oldEntry}\n\n` + (arcContentCard.description || "").substring(0, 1000); arcContentCard.entry = pts.join('\n'); } } return formatSystemMessage(`🎉 New arc (Tone: ${state.sae.arcTone}, Intensity: ${state.sae.arcIntensity}) saved to card!`); } },
        checkForCompletion: function(currentAiOutputText) { if (!state.sae || !state.sae.isEnabled || !state.sae.storyArc?.length || state.sae.completionSuggested || state.sae.activePointIndex >= state.sae.storyArc.length) return; const activePointText = (state.sae.storyArc[state.sae.activePointIndex] || "").replace(/^\d+\.\s*/, '').trim(); if (!activePointText) return; if (currentAiOutputText && typeof currentAiOutputText === 'string' && currentAiOutputText.trim()) { if (textSimilarityScore(activePointText, currentAiOutputText) > 0.45) { if (!state.toastQueue) state.toastQueue = []; state.toastQueue.push(`[SAE💡: Point "${activePointText}" seems complete.]`); state.sae.completionSuggested = true; } } }
    };
    
// ==================================================================
// MASTER HOOK FUNCTIONS
// ==================================================================

function initializeCombinedModules() {
    if (sharedAcAPI === null && typeof AutoCards === 'function') {
        try {
            const acI = AutoCards();
            if (acI && typeof acI.API === 'object') { sharedAcAPI = acI.API; } 
            else { console.warn(`AutoCards() did not return expected API object.`); sharedAcAPI = null; }
        } catch (e) { console.error(`Error getting AutoCards API.`, e); sharedAcAPI = null; }
    }
    Formatter.initialize(sharedAcAPI);
    STT.initialize(sharedAcAPI); 
    SAE.initialize(sharedAcAPI);   

    if (state.toastQueue === undefined) state.toastQueue = [];
    if (state.currentActionTypeForTimeAdvance === undefined) {
        const currentTurn = (typeof info !== 'undefined' && Number.isFinite(info.actionCount)) ? info.actionCount : 0;
        state.currentActionTypeForTimeAdvance = (currentTurn === 0 && (typeof info !== 'undefined' && info.actionType === 'start')) ? 'start' : 'continue';
    }
}

globalThis.onInput_Combined = function(text) {
    initializeCombinedModules(); 
    
    let postInitMessages = [];
    if (state.stt && state.stt.postReinitMessage) {
        postInitMessages.push(state.stt.postReinitMessage);
        state.stt.postReinitMessage = null; 
    }
    if (state.sae && state.sae.postReinitMessage) {
        postInitMessages.push(state.sae.postReinitMessage);
        state.sae.postReinitMessage = null; 
    }
    if (postInitMessages.length > 0) {
        const messageStr = postInitMessages.join('\n');
        if (state.message && typeof state.message === 'string') {
            state.message += '\n' + messageStr;
        } else {
            state.message = messageStr;
        }
    }
    
    Formatter.updateAndCreateCards();
    STT.checkAndCreateCards(); STT.updateSettingsFromCard();
    SAE.updateAndCreateCards();

    let currentText = text;
    let finalStopSignal = false;
    const originalTextForAC = text; 
    let rawInputForActionTypeCheck = (text || "").trim(); 

    let identifiedPlayerActionForSTT = null;
    let isSystemMessageToIgnore = false;

    const systemMessagePatterns = [ /\[SYSTEM-MSG-START\]\s*🎭\s*Arc Tone set to:/i, /🧠\s*Brainstorming new story arc/i, />>>\s*please select "continue"/i ];
    for (const pattern of systemMessagePatterns) { if (pattern.test(rawInputForActionTypeCheck)) { isSystemMessageToIgnore = true; break; } }

    if (!isSystemMessageToIgnore) {
        if (rawInputForActionTypeCheck.startsWith("> You say") || rawInputForActionTypeCheck.match(/^\s*say\s*["“]/i)) { identifiedPlayerActionForSTT = "say";
        } else if (rawInputForActionTypeCheck.startsWith("> You do") || rawInputForActionTypeCheck.match(/^\s*do\s*["“]/i) || rawInputForActionTypeCheck.match(/^\s*>\s*you\s+[^s][^a][^y]/i) ) { identifiedPlayerActionForSTT = "do";
        } else if (rawInputForActionTypeCheck.startsWith("> You add to the story") || rawInputForActionTypeCheck.startsWith("> Story:")) { identifiedPlayerActionForSTT = "story";
        } else if (!rawInputForActionTypeCheck.startsWith("/")) { if (rawInputForActionTypeCheck && !identifiedPlayerActionForSTT && rawInputForActionTypeCheck.length > 0) { identifiedPlayerActionForSTT = "story"; } }
    }

    let commandInput = (text || "").trim();
    let commandCandidateAfterPrefixStrip = commandInput;
    const playerActionPrefixes = [ /^\s*>\s*you\s+verb\s+/i, /^\s*>\s*you\s*say\s*:\s*/i, /^\s*>\s*you\s*/i, /^\s*>\s*/i ];
    for (const prefixRegex of playerActionPrefixes) { if (prefixRegex.test(commandCandidateAfterPrefixStrip)) { commandCandidateAfterPrefixStrip = commandCandidateAfterPrefixStrip.replace(prefixRegex, "").trim(); break; } }
    let potentialDirectCommand = commandCandidateAfterPrefixStrip;
    const sayWrappedCommandRegex = /^\s*say\s+["'](.+?)["']\s*$/i; const justQuotedCommandRegex = /^\s*["'](.+?)["']\s*$/i;
    let sayMatch = potentialDirectCommand.match(sayWrappedCommandRegex);
    if (sayMatch && sayMatch[1] && sayMatch[1].trim().startsWith('/')) { potentialDirectCommand = sayMatch[1].trim();
    } else { let quoteMatch = potentialDirectCommand.match(justQuotedCommandRegex); if (quoteMatch && quoteMatch[1] && quoteMatch[1].trim().startsWith('/')) { potentialDirectCommand = quoteMatch[1].trim(); } }
    const cleanedCommandForMatching = potentialDirectCommand.toLowerCase();

    let modRes = null; 
    let commandWasHandledByModule = false;

    if (cleanedCommandForMatching.startsWith('/')) {
        if (cleanedCommandForMatching.startsWith('/ac') || cleanedCommandForMatching.startsWith('/acredo')) { 
            if (typeof AutoCards === 'function') { 
                let acResult = AutoCards("input", originalTextForAC, false);
                currentText = (typeof acResult === 'object' && acResult.text !== undefined) ? acResult.text : (Array.isArray(acResult) ? acResult[0] : originalTextForAC);
                finalStopSignal = (typeof acResult === 'object' && acResult.stop !== undefined) ? acResult.stop : (Array.isArray(acResult) ? acResult[1] : false);
            }
            commandWasHandledByModule = true; // Mark /ac as handled by a module
            state.currentActionTypeForTimeAdvance = 'system_command'; 
            return { text: currentText, stop: finalStopSignal }; 
        }
        else if (cleanedCommandForMatching === '/reinit_plugins') {
            state.formatter = null; state.stt = null; state.sae = null;
            initializeCombinedModules(); 
            currentText = formatSystemMessage("🔌 All core plugins re-initialized to their default states.");
            
            postInitMessages = []; // Re-collect messages after re-init
            if (state.stt && state.stt.postReinitMessage) { postInitMessages.push(state.stt.postReinitMessage); state.stt.postReinitMessage = null; }
            if (state.sae && state.sae.postReinitMessage) { postInitMessages.push(state.sae.postReinitMessage); state.sae.postReinitMessage = null; }
            if (postInitMessages.length > 0) { currentText += "\n" + postInitMessages.join("\n"); }

            commandWasHandledByModule = true;
            finalStopSignal = true;
            // No early return here, let the normal flow set currentActionTypeForTimeAdvance
        }
        else if (STT.handleInput && (cleanedCommandForMatching.startsWith('/settime') || cleanedCommandForMatching.startsWith('/setdate') || cleanedCommandForMatching.startsWith('/defer') || cleanedCommandForMatching.startsWith('/wait'))) {
            modRes = STT.handleInput(potentialDirectCommand);
            if (modRes && modRes.commandHandled) { commandWasHandledByModule = true; }
        }
        else if (SAE.handleInput && (cleanedCommandForMatching.startsWith('/setarctype') || cleanedCommandForMatching.startsWith('/currentarcsettings') || cleanedCommandForMatching.startsWith('/regeneratearc') || cleanedCommandForMatching.startsWith('/saestop'))) {
            modRes = SAE.handleInput(potentialDirectCommand);
            if (modRes && modRes.commandHandled) { commandWasHandledByModule = true; }
        }
        
        if (commandWasHandledByModule && modRes) { 
            if (cleanedCommandForMatching.startsWith('/defer')) {
                 let playerNarrative = "";
                if (commandCandidateAfterPrefixStrip.toLowerCase().includes(cleanedCommandForMatching)) {
                    let tempNarrative = commandCandidateAfterPrefixStrip; const escapedCmd = potentialDirectCommand.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'); const cmdRegex = new RegExp(escapedCmd, "i"); tempNarrative = tempNarrative.replace(cmdRegex, "").trim(); if (tempNarrative) { playerNarrative = tempNarrative; }
                }
                if (playerNarrative) { currentText = `${playerNarrative}\n\n${modRes.text.trim()}\n\n[The story continues after this time skip.]`;
                } else { currentText = `${modRes.text.trim()}\n\n[The story jumps forward. Describe what happens or the scene after this passage of time.]`; }
            } else { currentText = modRes.text; }
            
            if (cleanedCommandForMatching.startsWith('/currentarcsettings') || cleanedCommandForMatching.startsWith('/saestop') || cleanedCommandForMatching === '/reinit_plugins' ) { finalStopSignal = true;
            } else { finalStopSignal = false; } 
        }
    }

    if (isSystemMessageToIgnore) { state.currentActionTypeForTimeAdvance = 'system_message_ignored';
    } else if (commandWasHandledByModule) { state.currentActionTypeForTimeAdvance = 'system_command';
    } else if (identifiedPlayerActionForSTT) { state.currentActionTypeForTimeAdvance = identifiedPlayerActionForSTT;
    } else {
        const currentTurn = (typeof info !== 'undefined' && Number.isFinite(info.actionCount)) ? info.actionCount : -1;
        if (currentTurn === 0 && (typeof info !== 'undefined' && info.actionType === 'start')) { state.currentActionTypeForTimeAdvance = 'start';
        } else if (rawInputForActionTypeCheck === "" && currentTurn > 0) { state.currentActionTypeForTimeAdvance = 'continue';
        } else { state.currentActionTypeForTimeAdvance = 'continue';  }
    }
    
    if (typeof AutoCards === 'function' && !commandWasHandledByModule) { 
        let acResult = AutoCards("input", originalTextForAC, finalStopSignal); 
        if (!isSystemMessageToIgnore) { 
            currentText = (typeof acResult === 'object' && acResult.text !== undefined) ? acResult.text : (Array.isArray(acResult) ? acResult[0] : currentText);
        }
        finalStopSignal = (typeof acResult === 'object' && acResult.stop !== undefined) ? acResult.stop : (Array.isArray(acResult) ? acResult[1] : finalStopSignal);
    }
    
    return { text: currentText, stop: finalStopSignal };
};

globalThis.onContext_Combined = function(text, stop) {
    initializeCombinedModules();
    let currentText = text;
    let currentStop = stop;

    const sysRgx = /\n*\s*\[SYSTEM-MSG-START\]\n?([\s\S]*?)\n?\[SYSTEM-MSG-END\]\s*\n*/g;
    currentText = (currentText || "").replace(sysRgx, (m, c) => `\n\n${c.trim()}\n\n`).replace(/\n{3,}/g, '\n\n').trim();

    if (STT.handleContext) currentText = STT.handleContext(currentText);
    if (SAE.handleContext) currentText = SAE.handleContext(currentText);

    if (typeof AutoCards === 'function') { 
        let acResult = AutoCards("context", currentText, currentStop); 
        if (Array.isArray(acResult) && acResult.length >= 2) { currentText = acResult[0]; currentStop = acResult[1];
        } else if (typeof acResult === 'object' && acResult !== null && acResult.text !== undefined && acResult.stop !== undefined) { currentText = acResult.text; currentStop = acResult.stop;
        }
        const isACG = (state.AutoCards?.generation?.workpiece && Object.keys(state.AutoCards.generation.workpiece).length > 0);
        const isSAEG = (state.sae?.isGenerating && state.sae.saveOutput);
        if (isACG || isSAEG) { currentStop = false; }
    }
    return { text: currentText, stop: currentStop };
};

globalThis.onOutput_Combined = function(text) {
    initializeCombinedModules(); 
    if(STT.advanceTimeBasedOnAction) STT.advanceTimeBasedOnAction();

    let aiNarrativeOutput = text; let systemMessages = []; let saeSystemMessageGeneratedThisHook = null;
    const isInputFromOurSystem = /\[SYSTEM-MSG-START\][\s\S]*?\[SYSTEM-MSG-END\]/.test((text||"").trim());
    const isACGActive = (state.AutoCards?.generation?.workpiece && Object.keys(state.AutoCards.generation.workpiece).length > 0);
    const isSAEExpectingAIOutputAsArc = (state.sae?.isEnabled && state.sae.saveOutput);
    const currentTurnForOutputLog = typeof info !== 'undefined' && info.actionCount !== undefined ? info.actionCount : 'N/A';

    if (isInputFromOurSystem && !isACGActive && !isSAEExpectingAIOutputAsArc) {
        if (typeof text === 'string' && text.trim()) systemMessages.push(text); aiNarrativeOutput = "";
    }
    else if (isACGActive) {
        if (typeof AutoCards === 'function') { 
            let acOutput = AutoCards("output", aiNarrativeOutput);
            if (typeof acOutput === 'string' && acOutput.trim()) {
                if (/\[SYSTEM-MSG-START\]|>>>|<<<|{>/.test(acOutput.trim())) { systemMessages.push(acOutput); aiNarrativeOutput = ""; }
                else { aiNarrativeOutput = acOutput; }
            } else { aiNarrativeOutput = ""; }
        }
    }
    else if (isSAEExpectingAIOutputAsArc) {
        if (SAE.handleOutput) { saeSystemMessageGeneratedThisHook = SAE.handleOutput(aiNarrativeOutput); if(saeSystemMessageGeneratedThisHook && typeof saeSystemMessageGeneratedThisHook === 'string') systemMessages.push(saeSystemMessageGeneratedThisHook); }
        aiNarrativeOutput = ""; 
    }
    else { 
        if (typeof AutoCards === 'function') { aiNarrativeOutput = AutoCards("output", aiNarrativeOutput); }
        if (SAE.shouldTriggerGeneration) { 
            const triggerResult = SAE.shouldTriggerGeneration();
            if (triggerResult === "choose_type") {
                saeSystemMessageGeneratedThisHook = formatSystemMessage( `✨ Set Story Arc Type! ✨ (Turn ${currentTurnForOutputLog})\n` + `Type: /setarctype [tone] / [intensity]\n\n` + `Tone Options: ${Object.keys(SAE.tonePrompts || {}).join(', ')}\n` + `(Current: '${state.sae?.arcTone || "null"}')\n\n` + `Intensity Options: ${Object.keys(SAE.intensityPrompts || {}).join(', ')}\n` + `(Current: '${state.sae?.arcIntensity || "null"}')\n\n` + `Example: /setarctype adventure / moderate` );
                aiNarrativeOutput = ""; 
            } else if (triggerResult === "generate_now") {
                if (state.sae) {
                    state.sae.isGenerating = true; state.sae.saveOutput = true; state.sae.attemptCounter = 0; state.sae.completionSuggested = false;
                    state.sae.trigger_initial_arc_on_load = false; 
                    saeSystemMessageGeneratedThisHook = formatSystemMessage(`📝 SAE preparing new plot (Tone: ${state.sae.arcTone}, Intensity: ${state.sae.arcIntensity}) for next turn! (Turn ${currentTurnForOutputLog})`);
                }
            }
        }
        if (saeSystemMessageGeneratedThisHook && typeof saeSystemMessageGeneratedThisHook === 'string') { systemMessages.push(saeSystemMessageGeneratedThisHook); }
        if (typeof aiNarrativeOutput === 'string' && aiNarrativeOutput.trim()) {
            const isNowSysMsg = /\[SYSTEM-MSG-START\]|\[SYSTEM:.*\]|>>>|<<<|{>|AFK/.test(aiNarrativeOutput.trim());
            if (enableFormatter && Formatter.format && !isNowSysMsg) { const ctx = (typeof history !== 'undefined' && Array.isArray(history)) ? history.map(h => h.text || "").join('\n') : ''; aiNarrativeOutput = Formatter.format(aiNarrativeOutput, ctx); }
        }
    }

    let outputParts = [];
    if (typeof aiNarrativeOutput === 'string' && aiNarrativeOutput.trim()) { outputParts.push(aiNarrativeOutput); }
    outputParts.push(...systemMessages.filter(p => typeof p === 'string' && p.trim()));
    let combinedOutput = outputParts.map(p => { const sr = /\n*\s*\[SYSTEM-MSG-START\]\n?([\s\S]*?)\n?\[SYSTEM-MSG-END\]\s*\n*/g; return p.replace(sr, (m, c) => c.trim()); }).filter(p => p && p.trim() !== "").join("\n\n");
    combinedOutput = combinedOutput.replace(/\n{3,}/g, '\n\n').trim();

    if (STT.appendTimestampsToText) { combinedOutput = STT.appendTimestampsToText(combinedOutput); }
    if (SAE.checkForCompletion && typeof aiNarrativeOutput === 'string' && aiNarrativeOutput.trim()) { SAE.checkForCompletion(aiNarrativeOutput); }

    if (combinedOutput && combinedOutput.trim() !== "") {
        const isAnySystemOutput = /\[SYSTEM:.*\]|>>>|<<<|{>|AFK|Auto-Cards:|SAE\💡|Time advanced|Time set|Date set|Current Settings:|Set Story Arc Type!|SAE preparing new plot|AI shy!|Empty AI response|Invalid arc|Not a full arc|New arc saved|🛑 Arc generation cancelled!|⚙️ SAE is off/.test(combinedOutput.trim());
        if (!isAnySystemOutput) { if (!combinedOutput.endsWith("\n\n")) { combinedOutput += combinedOutput.endsWith("\n") ? "\n" : "\n\n"; }
        } else { if (!combinedOutput.endsWith("\n")) { combinedOutput += "\n"; } }
    }
    if(state.toastQueue?.length>0){ const tM=state.toastQueue.join('\n'); if(state.message&&typeof state.message==='string'&&!state.message.includes(tM.split('\n')[0])){ state.message+='\n'+tM; } else if(!state.message){ state.message=tM; } state.toastQueue=[]; }
    return{text:combinedOutput};
};

})(); // End of IIFE wrapper



/////added last
function ParagraphFix(hook, inputText) {
    "use strict";
    
    // Default settings
    const DEFAULT_FORMATTING_TYPE = "none"; // "none", "basic", "empty-line", "newline"
    const DEFAULT_INDENT_PARAGRAPHS = false;
    
    // Initialize or retrieve state
    const PF = (function() {
        if (state.ParagraphFix) {
            const pf = state.ParagraphFix;
            delete state.ParagraphFix;
            return pf;
        }
        return {
            formattingType: DEFAULT_FORMATTING_TYPE,
            indentParagraphs: DEFAULT_INDENT_PARAGRAPHS
        };
    })();
    
    // Helper functions
    function readPastAction(lookBack = 0) {
        if (!Array.isArray(history) || history.length === 0) {
            return { text: "", type: "unknown" };
        }
        const index = Math.max(0, history.length - 1 - Math.abs(lookBack));
        const action = history[index] || {};
        return {
            text: action.text || action.rawText || "",
            type: action.type || "unknown"
        };
    }
    
    function adjustNewlines(text) {
        if (PF.formattingType === "none") {
            return text;
        }

        const previousAction = readPastAction(0);
        
        // Look at history[history.length - 1].type, if equal to "do", "say", or "see", then don't proceed
        if (["do", "say", "see"].includes(previousAction.type)) {
            return text;
        }
        
        // Count newlines at end of previous action's text (0, 1, or 2 max)
        const prevText = previousAction.text || "";
        const endNewlines = Math.min(2, (prevText.match(/\n*$/)?.[0] || "").length);
        
        // Count newlines at start of current text (0, 1, or 2 max)
        const startNewlines = Math.min(2, (text.match(/^\n*/)?.[0] || "").length);
        
        // Sum the two newline counts together
        const totalNewlines = endNewlines + startNewlines;
        
        // If the sum is less than 2, then proceed
        if (totalNewlines < 2) {
            if (totalNewlines === 0) {
                // If sum is 0, add nothing
                return text;
            } else if (totalNewlines === 1) {
                // If sum is 1, add "\n" and break
                return "\n" + text;
            }
        }
        
        return text;
    }
    
    function getConfigCardTemplate() {
        return {
            type: "class",
            title: "Configure Paragraph Fix",
            keys: "Edit the entry above to configure the Paragraph Fix",
            entry: "> The Paragraph Fix ensures consistent spacing in your adventure. You may configure the following settings by replacing the current values with your desired options.\n" +
                   "> Formatting Type: " + PF.formattingType + "\n" +
                   "> Indent Paragraphs: " + PF.indentParagraphs + "\n\n" +
                   "> Available formatting types:\n" +
                   "> - none: No formatting applied\n" +
                   "> - basic: Basic formatting (converts multiple spaces/newlines to double newlines)\n" +
                   "> - empty-line: Empty line dialogue formatting (adds spacing before quotes except after commas)\n" +
                   "> - newline: Newline dialogue formatting (basic + newlines before quotes)\n\n" +
                   "> Indent Paragraphs adds 4-space indents to new paragraphs",
            description: "The Paragraph Fix automatically applies consistent spacing and dialogue formatting to your story output. Set formatting type to 'none' to disable all formatting, and set indent paragraphs to 'true' or 'false' to control paragraph indentation."
        };
    }
    
    function extractSettings(text) {
        const settings = {};
        const lines = text.toLowerCase().replace(/[^a-z0-9:\->]+/g, "").split(">");
        
        for (const line of lines) {
            const parts = line.split(":");
            if (parts.length !== 2) continue;
            
            const key = parts[0].trim();
            const value = parts[1].trim();
            
            if (key.includes("formatting") && key.includes("type")) {
                const validTypes = ["none", "basic", "empty-line", "emptyline", "newline"];
                if (validTypes.includes(value)) {
                    settings.formattingType = value.replace("emptyline", "empty-line");
                }
            }
            
            if (key.includes("indent") && key.includes("paragraphs")) {
                const trueValues = ["true", "t", "yes", "y", "on"];
                const falseValues = ["false", "f", "no", "n", "off"];
                if (trueValues.includes(value)) {
                    settings.indentParagraphs = true;
                } else if (falseValues.includes(value)) {
                    settings.indentParagraphs = false;
                }
            }
        }
        
        return settings;
    }
    
    function findConfigCard() {
        const template = getConfigCardTemplate();
        for (const card of storyCards) {
            // Check for exact title match
            if (card.title === template.title) {
                return card;
            }
            // Check for exact keys match
            if (card.keys === template.keys) {
                return card;
            }
            // Check for partial matches in keys (like original code)
            if (card.keys && card.keys.includes("Configure Paragraph Fix")) {
                return card;
            }
            // Check for partial matches in title
            if (card.title && card.title.includes("Configure Paragraph Fix")) {
                return card;
            }
        }
        return null;
    }
    
    function createOrRepairCard() {
        let configCard = findConfigCard();
        const template = getConfigCardTemplate();
        
        if (!configCard) {
            // Create new card
            addStoryCard(template.keys);
            
            // Find and configure the newly created card
            for (let i = storyCards.length - 1; i >= 0; i--) {
                const card = storyCards[i];
                if (card.keys === template.keys) {
                    card.type = template.type;
                    card.title = template.title;
                    card.entry = template.entry;
                    card.description = template.description;
                    return card;
                }
            }
        } else {
            // Repair existing card if needed
            let needsRepair = false;
            
            // If title matches but keys don't, repair the keys
            if (configCard.title === template.title && configCard.keys !== template.keys) {
                configCard.keys = template.keys;
                needsRepair = true;
            }
            
            // If keys match but title doesn't, repair the title
            if (configCard.keys === template.keys && configCard.title !== template.title) {
                configCard.title = template.title;
                needsRepair = true;
            }
            
            // If partial matches, repair both title and keys
            if (configCard.title !== template.title && configCard.keys !== template.keys) {
                configCard.title = template.title;
                configCard.keys = template.keys;
                needsRepair = true;
            }
            
            // Always update the template parts but preserve user's settings
            const userSettings = extractSettings(configCard.entry);
            if (userSettings.formattingType) {
                PF.formattingType = userSettings.formattingType;
            }
            if (typeof userSettings.indentParagraphs === "boolean") {
                PF.indentParagraphs = userSettings.indentParagraphs;
            }
            
            // Update with current settings
            const updatedTemplate = getConfigCardTemplate();
            configCard.entry = updatedTemplate.entry;
            configCard.description = updatedTemplate.description;
            
            return configCard;
        }
        
        return null;
    }

    function applyFormatting(text, type) {
        switch (type) {
            case "basic":
                // Without dialogue formatting
                return text.replace(/\s{2,}|\n/g, '\n\n');

            case "empty-line":
                // With empty line dialogue formatting
                return text.replace(/(?<!,) (?=")|\s{2,}|\n/g, '\n\n');

            case "newline":
                // With newline dialogue formatting
                return text.replace(/\s{2,}|\n/g, '\n\n').replace(/(?<!,) (?=")/g, '\n');

            default:
                return text;
        }
    }
    
    function applyIndentation(text) {
        if (!PF.indentParagraphs) {
            return text;
        }
        
        const previousAction = readPastAction(0);
        const isAfterDoSay = ["do", "say", "see"].includes(previousAction.type);
        
        if (isAfterDoSay) {
            // Only indent if the text doesn't start with ">" (commands/dialogue)
            const lines = text.split('\n');
            return lines.map(line => {
                const trimmed = line.trimStart();
                if (trimmed.startsWith(">") || trimmed === "" || line.startsWith("    ")) {
                    return line;
                }
                return "    " + line;
            }).join('\n');
        } else {
            // Add indentation after paragraph breaks, but not to dialogue/commands
            return text.replace(/\n\n(\s*)(?=\S)(?!>)/g, (match, spaces) => {
                return '\n\n    ';
            });
        }
    }
    
    // Main logic based on hook
    switch (hook) {
        case "context":
            // Remove indentation from context so AI doesn't see it
            let contextResult = inputText.replace(/^    /gm, "");
            
            // Ensure config card exists and is properly configured
            createOrRepairCard();
            
            state.ParagraphFix = PF;
            return contextResult;
            
        case "output":
            // If formatting is "none", return unchanged
            if (!PF.formattingType || PF.formattingType === "none") {
                state.ParagraphFix = PF;
                return inputText;
            }

            // Start with the input text
            let result = inputText;

            // Apply formatting based on type
            result = applyFormatting(result, PF.formattingType);

            // Apply newline adjustment improvement
            result = adjustNewlines(result);

            // Apply indentation if enabled
            result = applyIndentation(result);

            state.ParagraphFix = PF;
            return result;
            
        default:
            state.ParagraphFix = PF;
            return inputText;
    }
}
//// added input time script

if (!state.globalTime) {
  state.globalTime = { year: 1454, month: 3, day: 27, hour: 7, minute: 0 };
}
if (!state.turnsPerElemRemoval){state.turnsPerElemRemoval = 5;}

if (!state.turnNum_SAE) {
    state.turnNum_SAE = state.turnCount + 1; // first time initialization
} else {
    state.turnNum_SAE = state.turnCount + 1; // sync with current global turn
}

if (!state.worldClock) {
  // Customize starting year/month/day/hour/minute
 state.worldClock = state.globalTime;
 // <==Don't forget to Set your clock
}
if (!state.pendingMinutes) state.pendingMinutes = 0;

const MONTH_DAYS = [31,28,31,30,31,30,31,31,30,31,30,31];

// Helper: Is Leap Year?
function isLeapYear(year) {
  return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
}

// Helper: Days in Month
function daysInMonth(year, month) {
  if (month === 2 && isLeapYear(year)) return 29;
  return MONTH_DAYS[month-1];
}

// Advance time by X minutes, handling all rollovers
function advanceTime(minutes) {
  state.pendingMinutes += minutes;
  let wc = state.worldClock;

  wc.minute += state.pendingMinutes;
  state.pendingMinutes = 0;

  while (wc.minute >= 60) {
    wc.minute -= 60;
    wc.hour += 1;
  }
  while (wc.hour >= 24) {
    wc.hour -= 24;
    wc.day += 1;
    // Optional: Trigger onNewDay() here!
    if (typeof onNewDay === "function") onNewDay();
  }
  // Day/month/year rollover
  while (wc.day > daysInMonth(wc.year, wc.month)) {
    wc.day -= daysInMonth(wc.year, wc.month);
    wc.month += 1;
    // Optional: Trigger onNewMonth() here!
    if (typeof onNewMonth === "function") onNewMonth();
  }
  while (wc.month > 12) {
    wc.month -= 12;
    wc.year += 1;
    // Optional: Trigger onNewYear() here!
    if (typeof onNewYear === "function") onNewYear();
  }
}

// Usage: advanceTime(actionMinutes.eat);

// === Status Bar Helper ===
function getClockString() {
  const wc = state.worldClock;
  // e.g. "Year 1234, 04-23 15:02"
  return `Year ${wc.year}, ${String(wc.month).padStart(2,"0")}-${String(wc.day).padStart(2,"0")} ${String(wc.hour).padStart(2,"0")}:${String(wc.minute).padStart(2,"0")}`;
}

// === Milestone/Event Hooks ===
// Example birthday system, etc
if (!state.birthdays) state.birthdays = {
  player:     { month: 3, day: 27 },   // <==Change as needed.
  mother:     { month: 8, day: 14 },
  father:     { month: 5, day: 9 },
  sibling:    { month: 2, day: 12 },
  grandma:    { month: 1, day: 7 },
  grandpa:    { month: 11, day: 22 },
  aunt:       { month: 6, day: 16 },
  uncle:      { month: 10, day: 3 },
  cousin:     { month: 9, day: 4 },
  // Add more as needed!
};

if (!state.ages) state.ages = {
  player:   5,    // <==Change as needed.
  mother:   34,
  father:   36,
  sibling:   7,
  grandma:  60,
  grandpa:  62,
  aunt:     32,
  uncle:    38,
  cousin:   12,
  // Add more as needed!
};


// Called on each new day, checks birthdays and advances ages
function onNewDay() {
  let wc = state.worldClock;
  for (const who in state.birthdays) {
    let bd = state.birthdays[who];
    if (wc.month === bd.month && wc.day === bd.day) {
      state.ages[who] = (state.ages[who] || 0) + 1;
      if (typeof output !== "undefined") output.push(`🎉 It's ${who}'s birthday! They are now ${state.ages[who]}.`);
    }
  }
  // You can hook in other daily/milestone events here!
}
// Recurring monthly events (cycling or random)
const MONTHLY_EVENTS = [
  "The city hosts the Lantern Festival.",   // <==Change as needed. Remember to make them fit Your Scenarios.
  "A new merchant guild caravan arrives.",
  "The rivers swell with spring rains.",
  "The Harvest Market draws crowds from afar.",
  "Rumors swirl of a masked thief prowling the night.",
  "The local lord calls a council in the square.",
  "A playwright debuts a scandalous new play.",
  "Children compete in the annual kite-flying contest.",
  "The temple holds a day of silent meditation.",
  "A rare flower blooms in the palace gardens.",
  "Street performers fill the market with music and dance.",
  "Local artists unveil murals in the city center.",
  "The Blacksmiths’ Guild forges a legendary blade (or so they claim).",
  "A rain of shooting stars is seen overhead.",
];

const YEARLY_EVENTS = [
  "Fireworks and bells ring in the new year.",   // <==Change as needed. Remember to make them fit Your Scenarios.
  "Tax collectors begin their rounds.",
  "The royal astrologer reads omens in the square.",
  "A grand tournament is announced.",
  "Peasants march for fairer grain prices.",
  "A rare comet blazes across the sky.",
  "The river floods, blessing the fields.",
  "The king’s health is rumored to be failing.",
  "The Academy opens applications for young apprentices.",
  "A ship brings spices and news from distant lands.",
  "A magical fog shrouds the city for three days.",
  "A famous bard composes a song about your deeds.",
];


// One-time events
const SPECIAL_EVENTS = [
  {
    key: "mysteriousVisitor",   // <==Change as needed. Remember to make them fit Your Scenarios.
    month: 5,
    year: 1455,
    text: "A mysterious visitor from the east arrives, bringing tales and strange gifts.",
  },
  {
    key: "plagueRumors",
    month: 10,
    year: 1456,
    text: "Whispers of a spreading plague send fear through the city.",
  },
  {
    key: "royalWedding",
    month: 2,
    year: 1457,
    text: "The city erupts in celebration for the royal wedding.",
  },
  {
    key: "firstMagicStorm",
    month: 8,
    year: 1455,
    text: "A wild magic storm lashes the city, enchanting random objects and animals for a day.",
  },
  {
    key: "libraryFire",
    month: 12,
    year: 1456,
    text: "A fire breaks out in the Grand Library. Scholars race to save ancient tomes.",
     
  },
  {
    key: "secretFestival",
    month: 9,
    year: 1455,
    text: "A secret, invite-only festival draws the city's elite into the moonlit gardens.",
    onceOnly: true // Example, in case you want some events absolutely one-time
  },
];


// You can use onNewMonth and onNewYear for bigger events/seasons if you want:
function onNewMonth() {
  let wc = state.worldClock;
  if (!state.firedEvents) state.firedEvents = {};

  // 1. One-time special events (fire if not already fired and matches date)
  for (const event of SPECIAL_EVENTS) {
    if (
      !state.firedEvents[event.key] &&
      wc.year === event.year &&
      wc.month === event.month
    ) {
      state.firedEvents[event.key] = true;
      if (typeof output !== "undefined") output.push(`🌟 ${event.text}`);
    }
  }

  // 2. Recurring event (pick by month or random)
  let eventLine = MONTHLY_EVENTS[(wc.month - 1) % MONTHLY_EVENTS.length];
  if (typeof output !== "undefined") output.push(`📅 ${eventLine}`);
}


function onNewYear() {
  let wc = state.worldClock;
  if (!state.firedEvents) state.firedEvents = {};

  // 1. One-time yearly special events if you want (repeat the above logic with year+month = 1 if needed)

  // 2. Recurring event (cycle by year, or pick random)
  let eventLine = YEARLY_EVENTS[(wc.year - 1454) % YEARLY_EVENTS.length];
  if (typeof output !== "undefined") output.push(`🎇 ${eventLine}`);
  if (wc.year === 1458 && !state.firedEvents["mysteriousComet"]) {
    state.firedEvents["mysteriousComet"] = true;
    if (typeof output !== "undefined") output.push("☄️ A blazing comet appears, and the city's fate is said to hang in the balance.");
  }
}


function timeSkip({days = 0, months = 0, years = 0} = {}) {
  if (!state.worldClock) state.worldClock = { year: 1454, month: 3, day: 27, hour: 7, minute: 0 };
  let clock = state.worldClock;

  // Calculate total days to skip (including months/years)
  let totalDays = days;

  // Add days for each year skipped
  for (let y = 0; y < years; y++) {
    let yVal = clock.year + y;
    for (let m = 1; m <= 12; m++) {
      totalDays += daysInMonth(yVal, m);
    }
  }

  // Add days for each month skipped
  for (let m = 0; m < months; m++) {
    let mYear = clock.year + Math.floor((clock.month + m - 1) / 12);
    let mNum = ((clock.month + m - 1) % 12) + 1;
    totalDays += daysInMonth(mYear, mNum);
  }

  // Advance day by day so daily events trigger
  for (let i = 0; i < totalDays; i++) {
    clock.day++;
    if (clock.day > daysInMonth(clock.year, clock.month)) {
      clock.day = 1;
      clock.month++;
      if (clock.month > 12) {
        clock.month = 1;
        clock.year++;
      }
    }
    if (typeof onNewDay === "function") onNewDay();
  }

  // Optionally, reset hour/minute (uncomment if you want this)
  // clock.hour = 7; clock.minute = 0;

  if (typeof output !== "undefined") {
    let parts = [];
    if (years) parts.push(`${years} year${years > 1 ? "s" : ""}`);
    if (months) parts.push(`${months} month${months > 1 ? "s" : ""}`);
    if (days) parts.push(`${days} day${days > 1 ? "s" : ""}`);
    output.push(`⏩ You skip ahead ${parts.join(", ")}. It is now ${getClockString()}.`);
  }
}
   function getCompoundActionMinutes(text) {
  let minutes = 0;
  let matches = new Set();

  // Your full actionMinutes and actionRegexList should be defined above!
  for (const [regex, key] of actionRegexList) {
    if (regex.test(text)) {
      if (!matches.has(key)) { // Prevent double-counting if two regexes point to the same action
        minutes += actionMinutes[key] || 0;
        matches.add(key);
      }
    }
  }
  // Fallback: If nothing matched, it's a minor action
  if (minutes === 0) return actionMinutes.minor || 1;
  return minutes;
}

const actionMinutes = {
  eat: 10, drink: 3, cook: 20, clean: 15, bathe: 15, wash: 10, dress: 5, sleep: 480, nap: 60, groom: 7, brush: 5,
  chat: 15, talk: 10, argue: 12, comfort: 8, teach: 25, scold: 6, debate: 20, joke: 5, lecture: 30, confess: 8, mrest: 180,
  feed: 7, soothe: 7, cuddle: 6, hug: 3, kiss: 2, play: 15, babysit: 30, care: 18, rock: 5, tuck: 5, discipline: 7,
  cry: 3, laugh: 2, sulk: 8, reminisce: 10, daydream: 7, meditate: 12, worry: 5,
  walk: 10, run: 4, jog: 6, hike: 18, ride: 15, sail: 30, row: 18, climb: 9, sneak: 6, swim: 12, fly: 25, explore: 18,
  study: 30, work: 60, write: 20, read: 15, paint: 30, sculpt: 40, invent: 50, build: 45, repair: 20, sew: 15, shop: 30, train: 35, plant: 20, harvest: 22, mine: 45, smith: 50, brew: 18, enchant: 25, experiment: 30,
  sing: 8, dance: 12, game: 15, listenmusic: 8, perform: 25, watch: 10, fish: 30, picnic: 40, gamble: 20, drinkalcohol: 30,
  fight: 8, battle: 10, spar: 12, duel: 12, hunt: 35, escape: 7, steal: 5, spy: 15, patrol: 25,
  cast: 12, ritual: 30, summon: 18, heal: 8, bless: 5, curse: 7, scry: 10, brewpotion: 15, commune: 12,
  minor: 1
};

const actionRegexList = [
  // [regex, key in actionMinutes]   // <==Currently being tested
// 1️⃣ Nap / light rest (60 min) — short/light rests
[ /\byou\b(?:\s+\w+){0,3}?\s+(take|catch|have|grab|lie down|snuggle|settle|drift|relax|decide to take)\s+(?:a )?(brief sleep|fleeting sleep|minor sleep|momentary sleep|passing sleep|quick sleep|short sleep|tiny sleep|transient sleep|breath|breathe|breathing|nap|snooze|siesta|rest)/i, 'nap' ],

// 2️⃣ Moderate rest (mrest, 180 min) — medium rests
[ /\byou\b(?:\s+\w+){0,3}?\s+(take|get|settle|lie down|snuggle|head for|proceed|prepare)\s+(?:a )?(catnap|doze|light sleep|light rest|power nap|repose|rest|siesta|snooze)/i, 'mrest' ],

// 3️⃣ Full sleep (sleep, 480 min) — long/uninterrupted rests
[ /\byou\b(?:\s+\w+){0,3}?\s+(fall|drift|go|turn in|lie down|make|slip|enter|surrender|crawl|sink|head|step|move|sleep|transition|lay)\s+(?:to|into|in)?\s*(deep sleep|deeply sleep|slumber|bed|hibernation|hibernate|uninterrupted sleep|rejuvenating sleep)/i, 'sleep' ],




  [/\beat\b|\bbreakfast|\blunch\b|\bdinner\b|\bmeal\b|\bsnack/, 'eat'],
  [/\b(drink(?!\s*(ale|beer|wine|liquor)))|\bsip\b|\bbeverage\b|\bwater\b|\btea\b|\bcoffee\b/, 'drink'],
  [/\bdrink (ale|beer|wine|liquor)\b/, 'drinkalcohol'],
  [/\bcook\b|\bbake\b|\bprepare food\b/, 'cook'],
  [/\bclean\b|\btidy\b|\bsweep\b|\bscrub\b|\bmop\b/, 'clean'],
  [/\bbathe\b|\bbath\b|\bwash\b|\bshower\b|\brinse\b/, 'bathe'],
  [/\bdress\b|\bclothe\b|\bchange clothes\b|\bput on\b/, 'dress'],
  [/\bgroom\b|\bcomb\b|\bbrush hair\b|\bstyle\b/, 'groom'],
  [/\bbrush (teeth|hair)\b/, 'brush'],
  
    // Conversation
  [/\bchat\b|\btalk\b|\bconverse\b|\bspeak\b|\bconversation\b|\bgossip\b/, 'chat'],
  [/\bargue\b|\bdebate\b|\bfight verbally\b|\bconfront\b/, 'argue'],
  [/\bcomfort\b|\breassure\b|\bconsole\b/, 'comfort'],
  [/\bteach\b|\bexplain\b|\binstruct\b|\btutor\b/, 'teach'],
  [/\bscold\b|\bdiscipline\b|\bchide\b/, 'scold'],
  [/\bjoke\b|\bjest\b|\bbanter\b|\bquip(s)?\b/, 'joke'],
  [/\blecture\b|\blong talk\b/, 'lecture'],
  [/\bconfess\b|\badmit\b|\breveal secret\b/, 'confess'],

  // Family & care
  [/\bfeed\b|\bfeeding\b/, 'feed'],
  [/\bsoothe\b|\bcalm\b|\bsettle\b/, 'soothe'],
  [/\bcuddle\b|\bhug\b|\bembrace\b/, 'cuddle'],
  [/\bkiss\b|\bpeck\b|\bsmooch\b/, 'kiss'],
  [/\bplay\b|\bgames?\b|\bfrolic\b|\broughhouse\b|\btag\b/, 'play'],
  [/\bbabysit\b|\bwatch children\b/, 'babysit'],
  [/\bcare\b|\bnurse\b|\battend\b/, 'care'],
  [/\brock (the|a) baby\b|\bcradle\b/, 'rock'],
  [/\btuck( in)?\b/, 'tuck'],

  // Emotional
  [/\bcry\b|\bweep\b|\bsob\b/, 'cry'],
  [/\blaugh\b|\bgiggle\b|\bchuckle\b/, 'laugh'],
  [/\bsulk\b|\bmope\b|\bbrood\b/, 'sulk'],
  [/\breminisce\b|\bremember\b|\breflect\b/, 'reminisce'],
  [/\bdaydream\b|\bimagine\b/, 'daydream'],
  [/\bmeditate\b|\bfocus\b|\bbreathe\b/, 'meditate'],
  [/\bworry\b|\banxious\b|\bfret\b/, 'worry'],

  // Travel & movement
  [/\bwalk\b|\bstroll\b|\bwander\b|\bamble\b/, 'walk'],
  [/\brun\b|\bdash\b|\bsprint\b/, 'run'],
  [/\bjog\b/, 'jog'],
  [/\bhike\b/, 'hike'],
  [/\bride\b|\bmount\b|\bhorseback\b/, 'ride'],
  [/\bsail\b|\brow\b|\bcanoe\b|\bboat\b/, 'sail'],
  [/\bclimb\b|\bscale\b/, 'climb'],
  [/\bsneak\b|\btiptoe\b|\bcreep\b/, 'sneak'],
  [/\bswim\b|\bdive\b/, 'swim'],
  [/\bfly\b|\bglide\b|\bsoar\b/, 'fly'],
  [/\bexplore\b|\bscout\b|\binvestigate\b/, 'explore'],

  // Work & crafting
  [/\bstudy\b|\bread\b|\blearn\b|\bresearch\b/, 'study'],
  [/\bwork\b|\blabor\b|\btoil\b|\bjob\b|\btask\b/, 'work'],
  [/\bwrite\b|\bscribble\b|\bcompose\b/, 'write'],
  [/\bpaint\b|\bdraw\b|\bsketch\b/, 'paint'],
  [/\bsculpt\b|\bcarve\b|\bmold\b/, 'sculpt'],
  [/\binvent\b|\btinker\b|\bengineer\b/, 'invent'],
  [/\bbuild\b|\bconstruct\b/, 'build'],
  [/\brepair\b|\bfix\b|\bmend\b/, 'repair'],
  [/\bsew\b|\bstitch\b|\bknit\b/, 'sew'],
  [/\bshop\b|\bmarket\b|\bbuy\b|\bsell\b/, 'shop'],
  [/\btrain\b|\bpractice\b|\bdrill\b/, 'train'],
  [/\bplant\b|\bgarden\b/, 'plant'],
  [/\bharvest\b|\breap\b/, 'harvest'],
  [/\bmine\b|\bdig\b|\bquarry\b/, 'mine'],
  [/\bsmith\b|\bforge\b/, 'smith'],
  [/\bbrew\b|\bdistill\b/, 'brew'],
  [/\benchant\b|\bimbue\b/, 'enchant'],
  [/\bexperiment\b|\btest\b/, 'experiment'],

  // Leisure & fun
  [/\bsing\b|\bhum\b|\bchant\b/, 'sing'],
  [/\bdance\b|\bwaltz\b|\btwirl\b/, 'dance'],
  [/\bgame\b|\bplay\b|\bboard game\b/, 'game'],
  [/\blisten to music\b|\bmusic\b|\bmelody\b/, 'listenmusic'],
  [/\bperform\b|\bshow\b|\brecital\b/, 'perform'],
  [/\bwatch\b|\bobserve\b/, 'watch'],
  [/\bfish\b|\bfishing\b/, 'fish'],
  [/\bpicnic\b/, 'picnic'],
  [/\bgamble\b|\bbet\b|\bwager\b/, 'gamble'],

  // Combat & risk
  [/\bfight\b|\bbrawl\b|\bscuffle\b/, 'fight'],
  [/\bbattle\b|\bwar\b/, 'battle'],
  [/\bspar\b|\bpractice fight\b/, 'spar'],
  [/\bduel\b|\bchallenge\b/, 'duel'],
  [/\bhunt\b|\btrack\b/, 'hunt'],
  [/\bescape\b|\bflee\b|\brun away\b/, 'escape'],
  [/\bsteal\b|\bpickpocket\b|\blift\b/, 'steal'],
  [/\bspy\b|\beavesdrop\b/, 'spy'],
  [/\bpatrol\b/, 'patrol'],

  // Magic & fantasy
  [/\bcast\b|\bspell\b|\bincant\b|\bmagic\b/, 'cast'],
  [/\britual\b|\bceremony\b/, 'ritual'],
  [/\bsummon\b|\bconjure\b/, 'summon'],
  [/\bheal\b|\bcure\b/, 'heal'],
  [/\bbless\b/, 'bless'],
  [/\bcurse\b/, 'curse'],
  [/\bscry\b|\bdivine\b|\bsee future\b/, 'scry'],
  [/\bbrew (potion|elixir)\b/, 'brewpotion'],
  [/\bcommune\b|\bspirit\b|\bghost\b|\bancestor\b/, 'commune'],
];
//added mapping logic
function retrieveSTTFromSC() {
    const currSC = storyCards.find(sc => sc.title === "Story Status");
    if (!currSC || !currSC.entry) return;

    const lines = currSC.entry.split('\n');

    lines.forEach(line => {
        const [key, ...rest] = line.split(':').map(s => s.trim());
        const value = rest.join(':'); 

        if (key === "Year") state.stt.year = Number(value);
        else if (key === "Month-Day") {
            const [month, day] = value.split('-').map(Number);
            state.stt.month = month - 1;  // STT month is 0–11
            state.stt.dayOfMonth = day;
        }
        else if (key === "Hour-Minute") {
            const [hour, minute] = value.split(':').map(Number);
            state.stt.gameHour = hour;
            state.stt.gameMinute = minute;
        }
        else if (key === "TD") state.stt.timePassOnDo = Number(value);
        else if (key === "TS") state.stt.timePassOnSay = Number(value);
        else if (key === "TST") state.stt.timePassOnStory = Number(value);
        else if (key === "TC") state.stt.timePassOnContinue = Number(value);
    });
  // --- Apply JSON/date recalculation logic exactly as given ---
  let needsDateRecalc = false;

  for (const key in this.defaultSettings) {
    if (state.stt[key] === undefined) {
      state.stt[key] = JSON.parse(JSON.stringify(this.defaultSettings[key]));
      if (['gameHour', 'gameMinute', 'dayOfMonth', 'month', 'year'].includes(key)) {
        needsDateRecalc = true;
      }
    }
  }
  state.stt.initialized = true;

  try {
    const currentDate = new Date(
      state.stt.year, state.stt.month, state.stt.dayOfMonth,
      state.stt.gameHour, state.stt.gameMinute
    );
    if (isNaN(currentDate.getTime())) {
      console.warn("STT.initialize: Invalid date in state. Resetting.");
      state.stt = JSON.parse(JSON.stringify(this.defaultSettings));
      const validDefaultDate = new Date(state.stt.year, state.stt.month, state.stt.dayOfMonth);
      state.stt.dayOfWeek = validDefaultDate.getDay();
    } else if (needsDateRecalc || state.stt.dayOfWeek !== currentDate.getDay()) {
      state.stt.dayOfWeek = currentDate.getDay();
    }
  } catch (e) {
    console.error("STT.initialize: Date validation error. Resetting.", e);
    state.stt = JSON.parse(JSON.stringify(this.defaultSettings));
    const validDefaultDate = new Date(state.stt.year, state.stt.month, state.stt.dayOfMonth);
    state.stt.dayOfWeek = validDefaultDate.getDay();
  }
}
function storeSTTToSC() {
    const currSC = storyCards.find(sc => sc.title === "Story Status");
    if (!currSC) return;

    currSC.entry =
        `World Clock:""\n` +
        `Year: ${state.stt.year}\n` +
        `Month-Day: ${String(state.stt.month + 1).padStart(2, '0')}-${String(state.stt.dayOfMonth).padStart(2, '0')}\n` +
        `Hour-Minute: ${String(state.stt.gameHour).padStart(2, '0')}:${String(state.stt.gameMinute).padStart(2, '0')}\n` + 
            `TD: ${state.stt.timePassOnDo}\n`+
    `TS: ${state.stt.timePassOnSay}\n`+
    `TST: ${state.stt.timePassOnStory}\n`+
    `TC: ${state.stt.timePassOnContinue} \n`;
}
function retrieveWCFromSC() {
    const currSC = storyCards.find(sc => sc.title === "Story Status");
    if (!currSC || !currSC.entry) return;

    const lines = currSC.entry.split('\n');

    lines.forEach(line => {
        const [key, ...rest] = line.split(':').map(s => s.trim());
        const value = rest.join(':'); 

        if (key === "Year") state.worldClock.year = Number(value);
        else if (key === "Month-Day") {
            const [month, day] = value.split('-').map(Number);
            state.worldClock.month = month;  // STT month is 0–11
            state.worldClock.day = day;
        }
        else if (key === "Hour-Minute") {
            const [hour, minute] = value.split(':').map(Number);
            state.worldClock.hour = hour;
            state.worldClock.minute = minute;
        }
    });
}
function storeWCToSC() {
    const currSC = storyCards.find(sc => sc.title === "Story Status");
    if (!currSC) return;

    currSC.entry =
        `World Clock:""\n` +
        `Year: ${state.worldClock.year}\n` +
        `Month-Day: ${String(state.worldClock.month).padStart(2, '0')}-${String(state.worldClock.day).padStart(2, '0')}\n` +
        `Hour-Minute: ${String(state.worldClock.hour).padStart(2, '0')}:${String(state.worldClock.minute).padStart(2, '0')}\n` +
            `TD: ${state.stt.timePassOnDo}\n`+
    `TS: ${state.stt.timePassOnSay}\n`+
    `TST: ${state.stt.timePassOnStory}\n`+
    `TC: ${state.stt.timePassOnContinue} \n`;
}



//added sae element removal syand alone


function itemRemoval() {
    // Find the "Current Story Arc" card
    const arcSC = storyCards.find(sc => sc.title === "Current Story Arc");
     
    if (!arcSC || !arcSC.entry || arcSC.entry.trim() === "") return; // Do nothing if empty

    // Split entry into lines
    const lines = arcSC.entry.split('\n');

    // Find the start of the numbered list
    const startIndex = lines.findIndex(line => /^\d+\.\s/.test(line));
    if (startIndex === -1) return; // No numbered list found

    // Separate text before the list and the list itself
    const beforeList = lines.slice(0, startIndex);
    const listLines = lines.slice(startIndex);

    //mark and log item removal
      const removedItem = listLines[0];
    // Prepend removed item to description
arcSC.description = `Log ${state.turnNum_SAE} | Previously:\n${removedItem}\n` + (arcSC.description || "");

// Trim description to max 3000 characters
if (arcSC.description.length > 3000) {
    arcSC.description = arcSC.description.slice(0, 3000);
}

    // Remove the first item
    listLines.shift();

    // Renumber remaining items
    const renumberedList = listLines.map((line, idx) => {
        return `${idx + 1}. ${line.replace(/^\d+\.\s*/, '')}`;
    });

    // Reassemble entry and save back
    arcSC.entry = [...beforeList, ...renumberedList].join('\n');
}

function arcElementRemoval() {
    if (
        state.turnNum_SAE >= 5 &&
        state.turnNum_SAE % state.turnsPerElemRemoval === 0 &&
        state.turnsPerElemRemoval !== 0
    ) {
        // Call the standalone element removal function
        itemRemoval();
        log("\narcElementRemoval ran.")
    }
}

